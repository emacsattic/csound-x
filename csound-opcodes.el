(setq csdoc-opcode-database (makehash (quote equal)))
(puthash "zkwm" (quote (:opcode "zkwm" :spec " zkwm kki" :out nil :in "kki" :template "zkwm ksig, kndx [, imix]" :doc "Writes to a zk variable at k-rate with mixing" :html "zkwm.html")) csdoc-opcode-database)
(puthash "zkw" (quote (:opcode "zkw" :spec " zkw kk" :out nil :in "kk" :template "zkw ksig, kndx" :doc "Writes to a zk variable at k-rate without mixing" :html "zkw.html")) csdoc-opcode-database)
(puthash "zkr" (quote (:opcode "zkr" :spec "k zkr k" :out "k" :in "k" :template "kres zkr kndx" :doc "Reads from a location in zk space at k-rate" :html "zkr.html")) csdoc-opcode-database)
(puthash "zkmod" (quote (:opcode "zkmod" :spec "k zkmod kk" :out "k" :in "kk" :template "kres zkmod ksig, kzkmod" :doc "Facilitates the modulation of one signal by another" :html "zkmod.html")) csdoc-opcode-database)
(puthash "zkcl" (quote (:opcode "zkcl" :spec " zkcl kk" :out nil :in "kk" :template "zkcl kfirst, klast" :doc "Clears one or more variables in the zk space" :html "zkcl.html")) csdoc-opcode-database)
(puthash "ziwm" (quote (:opcode "ziwm" :spec " ziwm iii" :out nil :in "iii" :template "ziwm isig, indx [, imix]" :doc "Writes to a zk variable to an i-rate variable with mixing" :html "ziwm.html")) csdoc-opcode-database)
(puthash "ziw" (quote (:opcode "ziw" :spec " ziw ii" :out nil :in "ii" :template "ziw isig, indx" :doc "Writes to a zk variable at i-rate without mixing" :html "ziw.html")) csdoc-opcode-database)
(puthash "zir" (quote (:opcode "zir" :spec "i zir i" :out "i" :in "i" :template "ir zir indx" :doc "Reads from a location in zk space at i-rate" :html "zir.html")) csdoc-opcode-database)
(puthash "zfilter2" (quote (:opcode "zfilter2" :spec "a zfilter2 akkiiiiiiii" :out "a" :in "akkiiiiiiii" :template "ares zfilter2 asig, kdamp, kfreq, iM, iN, ib0, ib1, ..., ibM, ia1,ia2, ..., iaN" :doc "General purpose custom filter with time-varying pole control" :html "zfilter2.html")) csdoc-opcode-database)
(puthash "zawm" (quote (:opcode "zawm" :spec " zawm aki" :out nil :in "aki" :template "zawm asig, kndx [, imix]" :doc "Writes to a za variable at a-rate with mixing" :html "zawm.html")) csdoc-opcode-database)
(puthash "zaw" (quote (:opcode "zaw" :spec " zaw ak" :out nil :in "ak" :template "zaw asig, kndx" :doc "Writes to a za variable at a-rate without mixing" :html "zaw.html")) csdoc-opcode-database)
(puthash "zarg" (quote (:opcode "zarg" :spec "a zarg kk" :out "a" :in "kk" :template "ares zarg kndx, kgain" :doc "Reads from a location in za space at a-rate, adds some gain" :html "zarg.html")) csdoc-opcode-database)
(puthash "zar" (quote (:opcode "zar" :spec "a zar k" :out "a" :in "k" :template "ares zar kndx" :doc "Reads from a location in za space at a-rate" :html "zar.html")) csdoc-opcode-database)
(puthash "zamod" (quote (:opcode "zamod" :spec "a zamod ak" :out "a" :in "ak" :template "ares zamod asig, kzamod" :doc "Modulates one a-rate signal by a second one" :html "zamod.html")) csdoc-opcode-database)
(puthash "zakinit" (quote (:opcode "zakinit" :spec " zakinit ii" :out nil :in "ii" :template "zakinit isizea, isizek" :doc "Establishes zak space" :html "zakinit.html")) csdoc-opcode-database)
(puthash "zacl" (quote (:opcode "zacl" :spec " zacl kk" :out nil :in "kk" :template "zacl kfirst, klast" :doc "Clears one or more variables in the za space" :html "zacl.html")) csdoc-opcode-database)
(puthash "xyin" (quote (:opcode "xyin" :spec "kk xyin iiiiiii" :out "kk" :in "iiiiiii" :template "kx, ky xyin iprd, ixmin, ixmax, iymin, iymax [, ixinit] [, iyinit]" :doc "Sense the cursor position in an output window" :html "xyin.html")) csdoc-opcode-database)
(puthash "xtratim" (quote (:opcode "xtratim" :spec " xtratim i" :out nil :in "i" :template "xtratim iextradur" :doc "Extend the duration of real-time generated events and handle their extra life (Usually for usage along with release instead of linenr, linsegr, etc)" :html "xtratim.html")) csdoc-opcode-database)
(puthash "xscanu" (quote (:opcode "xscanu" :spec " xscanu iiiiiiikkkkiikkaii" :out nil :in "iiiiiiikkkkiikkaii" :template "xscanu init, irate, ifnvel, ifnmass, ifnstif, ifncentr, ifndamp, kmass, kstif, kcentr, kdamp, ileft, iright, kpos, kstrngth, ain, idisp, id" :doc "Experimental version of scanu" :html "xscanu.html")) csdoc-opcode-database)
(puthash "xscans" (quote (:opcode "xscans" :spec "a xscans kkiii" :out "a" :in "kkiii" :template "ares xscans kamp, kfreq, ifntraj, id [, iorder]" :doc "Experimental version of scans" :html "xscans.html")) csdoc-opcode-database)
(puthash "xscansmap" (quote (:opcode "xscansmap" :spec " xscansmap kkikki" :out nil :in "kkikki" :template "xscansmap kpos, kvel, iscan, kamp, kvamp [, iwhich]" :doc "Allows the position and velocity of a node in a scanned process to be read" :html "xscansmap.html")) csdoc-opcode-database)
(puthash "xscanmap" (quote (:opcode "xscanmap" :spec "kk xscanmap ikki" :out "kk" :in "ikki" :template "kpos, kvel xscanmap iscan, kamp, kvamp [, iwhich]" :doc "Allows the position and velocity of a node in a scanned process to be read" :html "xscanmap.html")) csdoc-opcode-database)
(puthash "xout" (quote (:opcode "xout" :spec " xout xxx" :out nil :in "xxx" :template "xout xoutarg1 [, xoutarg2] ... [, xoutargN]" :doc "The xin and xout opcodes copy variables to and from the opcode definition, allowing communication with the calling instrument" :html "xout.html")) csdoc-opcode-database)
(puthash "xin" (quote (:opcode "xin" :spec "xxx xin " :out "xxx" :in nil :template "xinarg1 [, xinarg2] ... [xinargN] xin" :doc "The xin and xout opcodes copy variables to and from the opcode definition, allowing communication with the calling instrument" :html "xin.html")) csdoc-opcode-database)
(puthash "xadsr" (quote (:opcode "xadsr" :spec "x xadsr iiiii" :out "x" :in "iiiii" :template "ares xadsr iatt, idec, islev, irel [, idel]
 kres xadsr iatt, idec, islev, irel [, idel]" :doc "Calculates the classical ADSR envelope" :html "xadsr.html")) csdoc-opcode-database)
(puthash "wterrain" (quote (:opcode "wterrain" :spec "a wterrain kkkkkkii" :out "a" :in "kkkkkkii" :template "aout wterrain kamp, kpch, k_xcenter, k_ycenter, k_xradius, k_yradius, itabx, itaby" :doc "A simple wave-terrain synthesis opcode" :html "wterrain.html")) csdoc-opcode-database)
(puthash "wrap" (quote (:opcode "wrap" :spec "x wrap xxx" :out "x" :in "xxx" :template "ares wrap asig, klow, khigh
 ires wrap isig, ilow, ihigh
 kres wrap ksig, klow, khigh" :doc "Wraps-around the signal that exceeds the low and high thresholds" :html "wrap.html")) csdoc-opcode-database)
(puthash "wiisend" (quote (:opcode "wiisend" :spec "k wiisend kkk" :out "k" :in "kkk" :template "kres wiisend kcontrol, kvalue[, knum]" :doc "Sends data to one of a number of external Nintendo Wiimote controllers" :html "wiisend.html")) csdoc-opcode-database)
(puthash "wiirange" (quote (:opcode "wiirange" :spec " wiirange iiii" :out nil :in "iiii" :template "wiirange icontrol, iminimum, imaximum[, inum]" :doc "Sets scaling and range limits for certain Wiimote fields" :html "wiirange.html")) csdoc-opcode-database)
(puthash "wiidata" (quote (:opcode "wiidata" :spec "k wiidata kk" :out "k" :in "kk" :template "kres wiidata kcontrol[, knum]" :doc "Reads data fields from upto four external Nintendo Wiimote controllers" :html "wiidata.html")) csdoc-opcode-database)
(puthash "wiiconnect" (quote (:opcode "wiiconnect" :spec "k wiiconnect ii" :out "k" :in "ii" :template "kres wiiconnect [itimeout, imaxnum]" :doc "Opens and at control-rate polls up to four external Nintendo Wiimote controllers" :html "wiiconnect.html")) csdoc-opcode-database)
(puthash "wguide2" (quote (:opcode "wguide2" :spec "a wguide2 axxkkkk" :out "a" :in "axxkkkk" :template "ares wguide2 asig, xfreq1, xfreq2, kcutoff1, kcutoff2, kfeedback1, kfeedback2" :doc "A model of beaten plate consisting of two parallel delay-lines and two first-order lowpass filters" :html "wguide2.html")) csdoc-opcode-database)
(puthash "wguide1" (quote (:opcode "wguide1" :spec "a wguide1 axkk" :out "a" :in "axkk" :template "ares wguide1 asig, xfreq, kcutoff, kfeedback" :doc "A simple waveguide model consisting of one delay-line and one first-order lowpass filter" :html "wguide1.html")) csdoc-opcode-database)
(puthash "wgpluck2" (quote (:opcode "wgpluck2" :spec "a wgpluck2 ikikk" :out "a" :in "ikikk" :template "ares wgpluck2 iplk, kamp, icps, kpick, krefl" :doc "wgpluck2 is an implementation of the physical model of the plucked string, with control over the pluck point, the pickup point and the filter" :html "wgpluck2.html")) csdoc-opcode-database)
(puthash "wgpluck" (quote (:opcode "wgpluck" :spec "a wgpluck iikiiia" :out "a" :in "iikiiia" :template "ares wgpluck icps, iamp, kpick, iplk, idamp, ifilt, axcite" :doc "A high fidelity simulation of a plucked string, using interpolating delay-lines" :html "wgpluck.html")) csdoc-opcode-database)
(puthash "wgflute" (quote (:opcode "wgflute" :spec "a wgflute kkkiikkkiiii" :out "a" :in "kkkiikkkiiii" :template "ares wgflute kamp, kfreq, kjet, iatt, idetk, kngain, kvibf, kvamp, ifn [, iminfreq] [, ijetrf] [, iendrf]" :doc "Audio output is a tone similar to a flute, using a physical model developed from Perry Cook, but re-coded for Csound" :html "wgflute.html")) csdoc-opcode-database)
(puthash "wgclar" (quote (:opcode "wgclar" :spec "a wgclar kkkiikkkii" :out "a" :in "kkkiikkkii" :template "ares wgclar kamp, kfreq, kstiff, iatt, idetk, kngain, kvibf, kvamp, ifn [, iminfreq]" :doc "Audio output is a tone similar to a clarinet, using a physical model developed from Perry Cook, but re-coded for Csound" :html "wgclar.html")) csdoc-opcode-database)
(puthash "wgbrass" (quote (:opcode "wgbrass" :spec "a wgbrass kkkikkii" :out "a" :in "kkkikkii" :template "ares wgbrass kamp, kfreq, ktens, iatt, kvibf, kvamp, ifn [, iminfreq]" :doc "Audio output is a tone related to a brass instrument, using a physical model developed from Perry Cook, but re-coded for Csound" :html "wgbrass.html")) csdoc-opcode-database)
(puthash "wgbowedbar" (quote (:opcode "wgbowedbar" :spec "a wgbowedbar kkkkkiiii" :out "a" :in "kkkkkiiii" :template "ares wgbowedbar kamp, kfreq, kpos, kbowpres, kgain [, iconst] [, itvel] [, ibowpos] [, ilow]" :doc "A physical model of a bowed bar, belonging to the Perry Cook family of waveguide instruments" :html "wgbowedbar.html")) csdoc-opcode-database)
(puthash "wgbow" (quote (:opcode "wgbow" :spec "a wgbow kkkkkkii" :out "a" :in "kkkkkkii" :template "ares wgbow kamp, kfreq, kpres, krat, kvibf, kvamp, ifn [, iminfreq]" :doc "Audio output is a tone similar to a bowed string, using a physical model developed from Perry Cook, but re-coded for Csound" :html "wgbow.html")) csdoc-opcode-database)
(puthash "weibull" (quote (:opcode "weibull" :spec "x weibull kk" :out "x" :in "kk" :template "ares weibull ksigma, ktau
 ires weibull ksigma, ktau
 kres weibull ksigma, ktau" :doc "Weibull distribution random number generator (positive values only)" :html "weibull.html")) csdoc-opcode-database)
(puthash "waveset" (quote (:opcode "waveset" :spec "a waveset aki" :out "a" :in "aki" :template "ares waveset ain, krep [, ilen]" :doc "A simple time stretch by repeating cycles" :html "waveset.html")) csdoc-opcode-database)
(puthash "vwrap" (quote (:opcode "vwrap" :spec " vwrap ikki" :out nil :in "ikki" :template "vwrap ifn, kmin, kmax, ielements" :doc "Wraps elements of vectorial control signals" :html "vwrap.html")) csdoc-opcode-database)
(puthash "vtabwa" (quote (:opcode "vtabwa" :spec " vtabwa aiaaaa" :out nil :in "aiaaaa" :template "vtabwa andx, ifn, ainarg1 [, ainarg2, ainarg3 , .... , ainargN ]" :doc "This opcode writes vectors to tables at a-rate" :html "vtabwa.html")) csdoc-opcode-database)
(puthash "vtabwk" (quote (:opcode "vtabwk" :spec " vtabwk kikkkk" :out nil :in "kikkkk" :template "vtabwk kndx, ifn, kinarg1 [, kinarg2, kinarg3 , .... , kinargN ]" :doc "This opcode writes vectors to tables at a-rate" :html "vtabwk.html")) csdoc-opcode-database)
(puthash "vtabwi" (quote (:opcode "vtabwi" :spec " vtabwi iiiiii" :out nil :in "iiiiii" :template "vtabwi indx, ifn, inarg1 [, inarg2, inarg3 , .... , inargN ]" :doc "This opcode writes vectors to tables at init time" :html "vtabwi.html")) csdoc-opcode-database)
(puthash "vtaba" (quote (:opcode "vtaba" :spec " vtaba aiaaaa" :out nil :in "aiaaaa" :template "vtaba andx, ifn, aout1 [, aout2, aout3, .... , aoutN ]" :doc "This opcode reads vectors from tables at a-rate" :html "vtaba.html")) csdoc-opcode-database)
(puthash "vtabk" (quote (:opcode "vtabk" :spec " vtabk kikkkk" :out nil :in "kikkkk" :template "vtabk kndx, ifn, kout1 [, kout2, kout3, .... , koutN ]" :doc "This opcode reads vectors from tables at k-rate" :html "vtabk.html")) csdoc-opcode-database)
(puthash "vtabi" (quote (:opcode "vtabi" :spec " vtabi iiiiii" :out nil :in "iiiiii" :template "vtabi indx, ifn, iout1 [, iout2, iout3, .... , ioutN ]" :doc "This opcode reads vectors from tables" :html "vtabi.html")) csdoc-opcode-database)
(puthash "vtablewa" (quote (:opcode "vtablewa" :spec " vtablewa akiaaaa" :out nil :in "akiaaaa" :template "vtablewa andx, kfn, ixmode, ainarg1 [, ainarg2, ainarg3 , .... , ainargN ]" :doc "This opcode writes vectors to tables at a-rate" :html "vtablewa.html")) csdoc-opcode-database)
(puthash "vtablewk" (quote (:opcode "vtablewk" :spec " vtablewk kkikkkk" :out nil :in "kkikkkk" :template "vtablewk kndx, kfn, ixmode, kinarg1 [, kinarg2, kinarg3 , .... , kinargN ]" :doc "This opcode writes vectors to tables at k-rate" :html "vtablewk.html")) csdoc-opcode-database)
(puthash "vtablewi" (quote (:opcode "vtablewi" :spec " vtablewi iiiiiii" :out nil :in "iiiiiii" :template "vtablewi indx, ifn, ixmode, inarg1 [, inarg2, inarg3 , .... , inargN ]" :doc "This opcode writes vectors to tables at init time" :html "vtablewi.html")) csdoc-opcode-database)
(puthash "vtablea" (quote (:opcode "vtablea" :spec " vtablea akkiaaaa" :out nil :in "akkiaaaa" :template "vtablea andx, kfn, kinterp, ixmode, aout1 [, aout2, aout3, .... , aoutN ]" :doc "This opcode reads vectors from tables at a-rate" :html "vtablea.html")) csdoc-opcode-database)
(puthash "vtablek" (quote (:opcode "vtablek" :spec " vtablek kkkikkkk" :out nil :in "kkkikkkk" :template "vtablek kndx, kfn, kinterp, ixmode, kout1 [, kout2, kout3, .... , koutN ]" :doc "This opcode reads vectors from tables at k-rate" :html "vtablek.html")) csdoc-opcode-database)
(puthash "vtablei" (quote (:opcode "vtablei" :spec " vtablei iiiiiiii" :out nil :in "iiiiiiii" :template "vtablei indx, ifn, interp, ixmode, iout1 [, iout2, iout3, .... , ioutN ]" :doc "This opcode reads vectors from tables" :html "vtablei.html")) csdoc-opcode-database)
(puthash "vtable1k" (quote (:opcode "vtable1k" :spec " vtable1k kkkkk" :out nil :in "kkkkk" :template "vtable1k kfn,kout1 [, kout2, kout3, .... , koutN ]" :doc "This opcode reads vectors from tables at k-rate" :html "vtable1k.html")) csdoc-opcode-database)
(puthash "vsubv_i" (quote (:opcode "vsubv_i" :spec " vsubv_i iiiii" :out nil :in "iiiii" :template "vsubv_i ifn1, ifn2, ielements [, idstoffset] [, isrcoffset]" :doc "Performs subtraction between two vectorial control signals at init time" :html "vsubv_i.html")) csdoc-opcode-database)
(puthash "vsubv" (quote (:opcode "vsubv" :spec " vsubv iikkkk" :out nil :in "iikkkk" :template "vsubv ifn1, ifn2, kelements [, kdstoffset] [, ksrcoffset] [,kverbose]" :doc "Performs subtraction between two vectorial control signals" :html "vsubv.html")) csdoc-opcode-database)
(puthash "vstprogset" (quote (:opcode "vstprogset" :spec " vstprogset ik" :out nil :in "ik" :template "vstprogset instance, kprogram" :doc "vstprogset sets one of the programs in an " :html "vstprogset.html")) csdoc-opcode-database)
(puthash "vstnote" (quote (:opcode "vstnote" :spec " vstnote ikkkk" :out nil :in "ikkkk" :template "vstnote instance, kchan, knote, kveloc, kdur" :doc "vstnote sends a MIDI note with definite duration to a VST plugin" :html "vstnote.html")) csdoc-opcode-database)
(puthash "vstmidiout" (quote (:opcode "vstmidiout" :spec " vstmidiout ikkkk" :out nil :in "ikkkk" :template "vstmidiout instance, kstatus, kchan, kdata1, kdata2" :doc "vstmidiout is used for sending MIDI information to a VST plugin" :html "vstmidiout.html")) csdoc-opcode-database)
(puthash "vstinfo" (quote (:opcode "vstinfo" :spec " vstinfo i" :out nil :in "i" :template "vstinfo instance" :doc "vstinfo displays the parameters and the programs of a VST plugin" :html "vstinfo.html")) csdoc-opcode-database)
(puthash "vstinit" (quote (:opcode "vstinit" :spec "i vstinit ii" :out "i" :in "ii" :template "instance vstinit ilibrarypath [,iverbose]" :doc "vstinit is used to load a VST plugin into memory for use with the other vst4cs opcodes" :html "vstinit.html")) csdoc-opcode-database)
(puthash "vstedit" (quote (:opcode "vstedit" :spec " vstedit i" :out nil :in "i" :template "vstedit instance" :doc "vstedit opens the custom GUI editor widow for a VST plugin" :html "vstedit.html")) csdoc-opcode-database)
(puthash "vstbankload" (quote (:opcode "vstbankload" :spec " vstbankload ii" :out nil :in "ii" :template "vstbankload instance, ipath" :doc "vstbankload is used for loading parameter banks to a VST plugin" :html "vstbankload.html")) csdoc-opcode-database)
(puthash "vrandi" (quote (:opcode "vrandi" :spec " vrandi ikkiiiii" :out nil :in "ikkiiiii" :template "vrandi ifn, krange, kcps, ielements [, idstoffset] [, iseed] [, isize] [, ioffset]" :doc "Generate a sort of vectorial band-limited noise" :html "vrandi.html")) csdoc-opcode-database)
(puthash "vrandh" (quote (:opcode "vrandh" :spec " vrandh ikkiiiii" :out nil :in "ikkiiiii" :template "vrandh ifn, krange, kcps, ielements [, idstoffset] [, iseed] [, isize] [, ioffset]" :doc "Generates a vector of random numbers stored into a table, holding the values for a period of time" :html "vrandh.html")) csdoc-opcode-database)
(puthash "vpvoc" (quote (:opcode "vpvoc" :spec "a vpvoc kkiii" :out "a" :in "kkiii" :template "ares vpvoc ktimpnt, kfmod, ifile [, ispecwp] [, ifn]" :doc "Implements signal reconstruction using an fft-based phase vocoder and an extra envelope" :html "vpvoc.html")) csdoc-opcode-database)
(puthash "vpowv_i" (quote (:opcode "vpowv_i" :spec " vpowv_i iiiii" :out nil :in "iiiii" :template "vpowv_i ifn1, ifn2, ielements [, idstoffset] [, isrcoffset]" :doc "Performs power-of operations between two vectorial control signals at init time" :html "vpowv_i.html")) csdoc-opcode-database)
(puthash "vpowv" (quote (:opcode "vpowv" :spec " vpowv iikkkk" :out nil :in "iikkkk" :template "vpowv ifn1, ifn2, kelements [, kdstoffset] [, ksrcoffset] [,kverbose]" :doc "Performs power-of operations between two vectorial control signals" :html "vpowv.html")) csdoc-opcode-database)
(puthash "vpow_i" (quote (:opcode "vpow_i" :spec " vpow_i iiii" :out nil :in "iiii" :template "vpow_i ifn, ival, ielements [, idstoffset]" :doc "Raises each element of a vector to a scalar power" :html "vpow_i.html")) csdoc-opcode-database)
(puthash "vpow" (quote (:opcode "vpow" :spec " vpow ikkkk" :out nil :in "ikkkk" :template "vpow ifn, kval, kelements [, kdstoffset] [, kverbose]" :doc "Raises each element of a vector to a scalar power" :html "vpow.html")) csdoc-opcode-database)
(puthash "vport" (quote (:opcode "vport" :spec " vport ikii" :out nil :in "ikii" :template "vport ifn, khtime, ielements [, ifnInit]" :doc "Generate a sort of vectorial portamento" :html "vport.html")) csdoc-opcode-database)
(puthash "vphaseseg" (quote (:opcode "vphaseseg" :spec " vphaseseg kiiiiiiiii" :out nil :in "kiiiiiiiii" :template "vphaseseg kphase, ioutab, ielems, itab1,idist1,itab2 [,idist2,itab3, ... ,idistN-1,itabN]" :doc "vphaseseg allows one-dimensional HVS (Hyper-Vectorial Synthesis)" :html "vphaseseg.html")) csdoc-opcode-database)
(puthash "vosim" (quote (:opcode "vosim" :spec "a vosim kkkkkkii" :out "a" :in "kkkkkkii" :template "ar vosim kamp, kFund, kForm, kDecay, kPulseCount, kPulseFactor, ifn [, iskip]" :doc "This opcode produces a simple vocal simulation based on glottal pulses with formant characteristics" :html "vosim.html")) csdoc-opcode-database)
(puthash "voice" (quote (:opcode "voice" :spec "a voice kkkkkkii" :out "a" :in "kkkkkkii" :template "ares voice kamp, kfreq, kphoneme, kform, kvibf, kvamp, ifn, ivfn" :doc "An emulation of a human voice" :html "voice.html")) csdoc-opcode-database)
(puthash "vmultv_i" (quote (:opcode "vmultv_i" :spec " vmultv_i iiiii" :out nil :in "iiiii" :template "vmultv_i ifn1, ifn2, ielements [, idstoffset] [, isrcoffset]" :doc "Performs mutiplication between two vectorial control signals at init time" :html "vmultv_i.html")) csdoc-opcode-database)
(puthash "vmultv" (quote (:opcode "vmultv" :spec " vmultv iikkkk" :out nil :in "iikkkk" :template "vmultv ifn1, ifn2, kelements [, kdstoffset] [, ksrcoffset] [,kverbose]" :doc "Performs mutiplication between two vectorial control signals" :html "vmultv.html")) csdoc-opcode-database)
(puthash "vmult_i" (quote (:opcode "vmult_i" :spec " vmult_i iiii" :out nil :in "iiii" :template "vmult_i ifn, ival, ielements [, idstoffset]" :doc "Multiplies a vector in a table by a scalar value" :html "vmult_i.html")) csdoc-opcode-database)
(puthash "vmult" (quote (:opcode "vmult" :spec " vmult ikkkk" :out nil :in "ikkkk" :template "vmult ifn, kval, kelements [, kdstoffset] [, kverbose]" :doc "Multiplies a vector in a table by a scalar value" :html "vmult.html")) csdoc-opcode-database)
(puthash "vmirror" (quote (:opcode "vmirror" :spec " vmirror ikki" :out nil :in "ikki" :template "vmirror ifn, kmin, kmax, ielements" :doc "Reflects elements of vectorial control signals on thresholds" :html "vmirror.html")) csdoc-opcode-database)
(puthash "vmap" (quote (:opcode "vmap" :spec " vmap iiiii" :out nil :in "iiiii" :template "vmap ifn1, ifn2, ielements [,idstoffset, isrcoffset]" :doc "Maps elements from a vector onto another according to the indeces of a this vector" :html "vmap.html")) csdoc-opcode-database)
(puthash "vlowres" (quote (:opcode "vlowres" :spec "a vlowres akkik" :out "a" :in "akkik" :template "ares vlowres asig, kfco, kres, iord, ksep" :doc "A bank of filters in which the cutoff frequency can be separated under user control" :html "vlowres.html")) csdoc-opcode-database)
(puthash "vlinseg" (quote (:opcode "vlinseg" :spec " vlinseg iiiiiii" :out nil :in "iiiiiii" :template "vlinseg ifnout, ielements, ifn1, idur1, ifn2 [, idur2, ifn3 [...]]" :doc "Generate linear vectorial segments" :html "vlinseg.html")) csdoc-opcode-database)
(puthash "vlimit" (quote (:opcode "vlimit" :spec " vlimit ikki" :out nil :in "ikki" :template "vlimit ifn, kmin, kmax, ielements" :doc "Limits elements of vectorial control signals" :html "vlimit.html")) csdoc-opcode-database)
(puthash "vincr" (quote (:opcode "vincr" :spec " vincr aa" :out nil :in "aa" :template "vincr accum, aincr" :doc "vincr increments one audio variable with another signal, i" :html "vincr.html")) csdoc-opcode-database)
(puthash "vibrato" (quote (:opcode "vibrato" :spec "k vibrato kkkkkkkkii" :out "k" :in "kkkkkkkkii" :template "kout vibrato kAverageAmp, kAverageFreq, kRandAmountAmp, kRandAmountFreq, kAmpMinRate, kAmpMaxRate, kcpsMinRate, kcpsMaxRate, ifn [, iphs]" :doc "Generates a natural-sounding user-controllable vibrato" :html "vibrato.html")) csdoc-opcode-database)
(puthash "vibr" (quote (:opcode "vibr" :spec "k vibr kki" :out "k" :in "kki" :template "kout vibr kAverageAmp, kAverageFreq, ifn" :doc "Easier-to-use user-controllable vibrato" :html "vibr.html")) csdoc-opcode-database)
(puthash "vibes" (quote (:opcode "vibes" :spec "a vibes kkiiikkii" :out "a" :in "kkiiikkii" :template "ares vibes kamp, kfreq, ihrd, ipos, imp, kvibf, kvamp, ivibfn, idec" :doc "Audio output is a tone related to the striking of a metal block as found in a vibraphone" :html "vibes.html")) csdoc-opcode-database)
(puthash "vexpv_i" (quote (:opcode "vexpv_i" :spec " vexpv_i iiiii" :out nil :in "iiiii" :template "vexpv_i ifn1, ifn2, ielements [, idstoffset] [, isrcoffset]" :doc "Performs exponential operations between two vectorial control signals at init time" :html "vexpv_i.html")) csdoc-opcode-database)
(puthash "vexpv" (quote (:opcode "vexpv" :spec " vexpv iikkkk" :out nil :in "iikkkk" :template "vexpv ifn1, ifn2, kelements [, kdstoffset] [, ksrcoffset] [,kverbose]" :doc "Performs exponential operations between two vectorial control signals" :html "vexpv.html")) csdoc-opcode-database)
(puthash "vexpseg" (quote (:opcode "vexpseg" :spec " vexpseg iiiiiii" :out nil :in "iiiiiii" :template "vexpseg ifnout, ielements, ifn1, idur1, ifn2 [, idur2, ifn3 [...]]" :doc "Generate exponential vectorial segments" :html "vexpseg.html")) csdoc-opcode-database)
(puthash "vexp_i" (quote (:opcode "vexp_i" :spec " vexp_i iiii" :out nil :in "iiii" :template "vexp_i ifn, ival, ielements[, idstoffset]" :doc "Performs power-of operations between a vector and a scalar" :html "vexp_i.html")) csdoc-opcode-database)
(puthash "vexp" (quote (:opcode "vexp" :spec " vexp ikkkk" :out nil :in "ikkkk" :template "vexp ifn, kval, kelements [, kdstoffset] [, kverbose]" :doc "Performs power-of operations between a vector and a scalar" :html "vexp.html")) csdoc-opcode-database)
(puthash "veloc" (quote (:opcode "veloc" :spec "i veloc ii" :out "i" :in "ii" :template "ival veloc [ilow] [, ihigh]" :doc "Get the velocity from a MIDI event" :html "veloc.html")) csdoc-opcode-database)
(puthash "vecdelay" (quote (:opcode "vecdelay" :spec " vecdelay iiiiii" :out nil :in "iiiiii" :template "vecdelay ifn, ifnIn, ifnDel, ielements, imaxdel [, iskip]" :doc "Generate a sort of vectorial delay" :html "vecdelay.html")) csdoc-opcode-database)
(puthash "vdelayk" (quote (:opcode "vdelayk" :spec "k vdelayk ikiii" :out "k" :in "ikiii" :template "kout vdelayk iksig, kdel, imaxdel [, iskip, imode]" :doc "Variable delay applied to a k-rate signal" :html "vdelayk.html")) csdoc-opcode-database)
(puthash "vdivv_i" (quote (:opcode "vdivv_i" :spec " vdivv_i iiiii" :out nil :in "iiiii" :template "vdivv_i ifn1, ifn2, ielements [, idstoffset] [, isrcoffset]" :doc "Performs division between two vectorial control signals at init time" :html "vdivv_i.html")) csdoc-opcode-database)
(puthash "vdivv" (quote (:opcode "vdivv" :spec " vdivv iikkkk" :out nil :in "iikkkk" :template "vdivv ifn1, ifn2, kelements [, kdstoffset] [, ksrcoffset] [,kverbose]" :doc "Performs division between two vectorial control signals" :html "vdivv.html")) csdoc-opcode-database)
(puthash "vdelayxws" (quote (:opcode "vdelayxws" :spec "aa vdelayxws aaaiii" :out "aa" :in "aaaiii" :template "aout1, aout2 vdelayxws ain1, ain2, adl, imd, iws [, ist]" :doc "Variable delay opcodes with high quality interpolation" :html "vdelayxws.html")) csdoc-opcode-database)
(puthash "vdelayxwq" (quote (:opcode "vdelayxwq" :spec "aaaa vdelayxwq aaaaaiii" :out "aaaa" :in "aaaaaiii" :template "aout1, aout2, aout3, aout4 vdelayxwq ain1, ain2, ain3, ain4, adl, imd, iws [, ist]" :doc "Variable delay opcodes with high quality interpolation" :html "vdelayxwq.html")) csdoc-opcode-database)
(puthash "vdelayxw" (quote (:opcode "vdelayxw" :spec "a vdelayxw aaiii" :out "a" :in "aaiii" :template "aout vdelayxw ain, adl, imd, iws [, ist]" :doc "Variable delay opcodes with high quality interpolation" :html "vdelayxw.html")) csdoc-opcode-database)
(puthash "vdelayxs" (quote (:opcode "vdelayxs" :spec "aa vdelayxs aaaiii" :out "aa" :in "aaaiii" :template "aout1, aout2 vdelayxs ain1, ain2, adl, imd, iws [, ist]" :doc "A stereo variable delay opcode with high quality interpolation" :html "vdelayxs.html")) csdoc-opcode-database)
(puthash "vdelayxq" (quote (:opcode "vdelayxq" :spec "aaaa vdelayxq aaaaaiii" :out "aaaa" :in "aaaaaiii" :template "aout1, aout2, aout3, aout4 vdelayxq ain1, ain2, ain3, ain4, adl, imd, iws [, ist]" :doc "A 4-channel variable delay opcode with high quality interpolation" :html "vdelayxq.html")) csdoc-opcode-database)
(puthash "vdelayx" (quote (:opcode "vdelayx" :spec "a vdelayx aaiii" :out "a" :in "aaiii" :template "aout vdelayx ain, adl, imd, iws [, ist]" :doc "A variable delay opcode with high quality interpolation" :html "vdelayx.html")) csdoc-opcode-database)
(puthash "vdelay3" (quote (:opcode "vdelay3" :spec "a vdelay3 aaii" :out "a" :in "aaii" :template "ares vdelay3 asig, adel, imaxdel [, iskip]" :doc "vdelay3 is experimental" :html "vdelay3.html")) csdoc-opcode-database)
(puthash "vdelay" (quote (:opcode "vdelay" :spec "a vdelay aaii" :out "a" :in "aaii" :template "ares vdelay asig, adel, imaxdel [, iskip]" :doc "This is an interpolating variable time delay, it is not very different from the existing implementation (deltapi), it is only easier to use" :html "vdelay.html")) csdoc-opcode-database)
(puthash "vcopy_i" (quote (:opcode "vcopy_i" :spec " vcopy_i iiiii" :out nil :in "iiiii" :template "vcopy_i ifn, ifn2, ielements [,idstoffset, isrcoffset]" :doc "Copies a vector from one table to another" :html "vcopy_i.html")) csdoc-opcode-database)
(puthash "vcopy" (quote (:opcode "vcopy" :spec " vcopy iikkkk" :out nil :in "iikkkk" :template "vcopy ifn, ifn2, kelements [, kdstoffset] [, ksrcoffset] [, kverbose]" :doc "Copies between two vectorial control signals" :html "vcopy.html")) csdoc-opcode-database)
(puthash "vcomb" (quote (:opcode "vcomb" :spec "a vcomb akxiii" :out "a" :in "akxiii" :template "ares vcomb asig, krvt, xlpt, imaxlpt [, iskip] [, insmps]" :doc "Variably reverberates an input signal with a “colored” frequency response" :html "vcomb.html")) csdoc-opcode-database)
(puthash "vco2init" (quote (:opcode "vco2init" :spec "i vco2init iiiiii" :out "i" :in "iiiiii" :template "ifn vco2init iwave [, ibasfn] [, ipmul] [, iminsiz] [, imaxsiz] [, isrcft]" :doc "vco2init calculates tables for use by vco2 opcode" :html "vco2init.html")) csdoc-opcode-database)
(puthash "vco2ift" (quote (:opcode "vco2ift" :spec "i vco2ift iii" :out "i" :in "iii" :template "ifn vco2ift icps, iwave [, inyx]" :doc "vco2ift is the same as vco2ft, but works at i-time" :html "vco2ift.html")) csdoc-opcode-database)
(puthash "vco2ft" (quote (:opcode "vco2ft" :spec "k vco2ft kii" :out "k" :in "kii" :template "kfn vco2ft kcps, iwave [, inyx]" :doc "vco2ft returns the function table number to be used for generating the specified waveform at a given frequency" :html "vco2ft.html")) csdoc-opcode-database)
(puthash "vco2" (quote (:opcode "vco2" :spec "a vco2 kkikki" :out "a" :in "kkikki" :template "ares vco2 kamp, kcps [, imode] [, kpw] [, kphs] [, inyx]" :doc "vco2 is similar to vco" :html "vco2.html")) csdoc-opcode-database)
(puthash "vco" (quote (:opcode "vco" :spec "a vco xxikiiiiii" :out "a" :in "xxikiiiiii" :template "ares vco xamp, xcps, iwave, kpw [, ifn] [, imaxd] [, ileak] [, inyx] [, iphs] [, iskip]" :doc "Implementation of a band limited, analog modeled oscillator, based on integration of band limited impulses" :html "vco.html")) csdoc-opcode-database)
(puthash "vcella" (quote (:opcode "vcella" :spec " vcella kkiiiiii" :out nil :in "kkiiiiii" :template "vcella ktrig, kreinit, ioutFunc, initStateFunc, iRuleFunc, ielements, irulelen [, iradius]" :doc "Unidimensional Cellular Automata applied to Csound vectors" :html "vcella.html")) csdoc-opcode-database)
(puthash "vbapzmove" (quote (:opcode "vbapzmove" :spec " vbapzmove iiaiiiii" :out nil :in "iiaiiiii" :template "vbapzmove inumchnls, istartndx, asig, idur, ispread, ifldnum, ifld1, ifld2, [...]" :doc "Writes a multi-channel audio signal to a ZAK array with moving virtual sources" :html "vbapzmove.html")) csdoc-opcode-database)
(puthash "vbapz" (quote (:opcode "vbapz" :spec " vbapz iiakkk" :out nil :in "iiakkk" :template "vbapz inumchnls, istartndx, asig, kazim [, kelev] [, kspread]" :doc "Writes a multi-channel audio signal to a ZAK array" :html "vbapz.html")) csdoc-opcode-database)
(puthash "vbaplsinit" (quote (:opcode "vbaplsinit" :spec " vbaplsinit iiiii" :out nil :in "iiiii" :template "vbaplsinit idim, ilsnum [, idir1] [, idir2] [...] [, idir32]" :doc "Configures VBAP output according to loudspeaker parameters" :html "vbaplsinit.html")) csdoc-opcode-database)
(puthash "vbap8move" (quote (:opcode "vbap8move" :spec "aa vbap8move aiiiii" :out "aa" :in "aiiiii" :template "ar1, ..., ar8 vbap8move asig, idur, ispread, ifldnum, ifld1 [, ifld2] [...]" :doc "Distributes an audio signal among 8 channels with moving virtual sources" :html "vbap8move.html")) csdoc-opcode-database)
(puthash "vbap8" (quote (:opcode "vbap8" :spec "aa vbap8 akkk" :out "aa" :in "akkk" :template "ar1, ..., ar8 vbap8 asig, kazim [, kelev] [, kspread]" :doc "Distributes an audio signal among 8 channels" :html "vbap8.html")) csdoc-opcode-database)
(puthash "vbap4move" (quote (:opcode "vbap4move" :spec "aaaa vbap4move aiiiii" :out "aaaa" :in "aiiiii" :template "ar1, ar2, ar3, ar4 vbap4move asig, idur, ispread, ifldnum, ifld1 [, ifld2] [...]" :doc "Distributes an audio signal among 4 channels with moving virtual sources" :html "vbap4move.html")) csdoc-opcode-database)
(puthash "vbap4" (quote (:opcode "vbap4" :spec "aaaa vbap4 akkk" :out "aaaa" :in "akkk" :template "ar1, ar2, ar3, ar4 vbap4 asig, kazim [, kelev] [, kspread]" :doc "Distributes an audio signal among 4 channels" :html "vbap4.html")) csdoc-opcode-database)
(puthash "vbap16move" (quote (:opcode "vbap16move" :spec "aa vbap16move aiiiii" :out "aa" :in "aiiiii" :template "ar1, ..., ar16 vbap16move asig, idur, ispread, ifldnum, ifld1 [, ifld2] [...]" :doc "Distribute an audio signal among 16 channels with moving virtual sources" :html "vbap16move.html")) csdoc-opcode-database)
(puthash "vbap16" (quote (:opcode "vbap16" :spec "aa vbap16 akkk" :out "aa" :in "akkk" :template "ar1, ..., ar16 vbap16 asig, kazim [, kelev] [, kspread]" :doc "Distributes an audio signal among 16 channels" :html "vbap16.html")) csdoc-opcode-database)
(puthash "vaset" (quote (:opcode "vaset" :spec " vaset kka" :out nil :in "kka" :template "vaset kval, kndx, avar" :doc "Write values into the current buffer of an a-rate variable at the given index" :html "vaset.html")) csdoc-opcode-database)
(puthash "valpass" (quote (:opcode "valpass" :spec "a valpass akxiii" :out "a" :in "akxiii" :template "ares valpass asig, krvt, xlpt, imaxlpt [, iskip] [, insmps]" :doc "Variably reverberates an input signal with a flat frequency response" :html "valpass.html")) csdoc-opcode-database)
(puthash "vaget" (quote (:opcode "vaget" :spec "k vaget ka" :out "k" :in "ka" :template "kval vaget kndx, avar" :doc "Access values of the current buffer of an a-rate variable by indexing" :html "vaget.html")) csdoc-opcode-database)
(puthash "vaddv_i" (quote (:opcode "vaddv_i" :spec " vaddv_i iiiii" :out nil :in "iiiii" :template "vaddv_i ifn1, ifn2, ielements [, idstoffset] [, isrcoffset]" :doc "Performs addition between two vectorial control signals at init time" :html "vaddv_i.html")) csdoc-opcode-database)
(puthash "vaddv" (quote (:opcode "vaddv" :spec " vaddv iikkkk" :out nil :in "iikkkk" :template "vaddv ifn1, ifn2, kelements [, kdstoffset] [, ksrcoffset] [,kverbose]" :doc "Performs addition between two vectorial control signals" :html "vaddv.html")) csdoc-opcode-database)
(puthash "vadd_i" (quote (:opcode "vadd_i" :spec " vadd_i iiii" :out nil :in "iiii" :template "vadd_i ifn, ival, ielements [, idstoffset]" :doc "Adds a scalar value to a vector in a table" :html "vadd_i.html")) csdoc-opcode-database)
(puthash "vadd" (quote (:opcode "vadd" :spec " vadd ikkkk" :out nil :in "ikkkk" :template "vadd ifn, kval, kelements [, kdstoffset] [, kverbose]" :doc "Adds a scalar value to a vector in a table" :html "vadd.html")) csdoc-opcode-database)
(puthash "urd" (quote (:function "urd" :html "urd.html")) csdoc-opcode-database)
(puthash "upsamp" (quote (:opcode "upsamp" :spec "a upsamp k" :out "a" :in "k" :template "ares upsamp ksig" :doc "Modify a signal by up-sampling" :html "upsamp.html")) csdoc-opcode-database)
(puthash "unirand" (quote (:opcode "unirand" :spec "x unirand k" :out "x" :in "k" :template "ares unirand krange
 ires unirand krange
 kres unirand krange" :doc "Uniform distribution random number generator (positive values only)" :html "unirand.html")) csdoc-opcode-database)
(puthash "turnon" (quote (:opcode "turnon" :spec " turnon ii" :out nil :in "ii" :template "turnon insnum [, itime]" :doc "Activate an instrument for an indefinite time" :html "turnon.html")) csdoc-opcode-database)
(puthash "turnoff2" (quote (:opcode "turnoff2" :spec " turnoff2 kkk" :out nil :in "kkk" :template "turnoff2 kinsno, kmode, krelease" :doc "Turn off instance(s) of other instruments at performance time" :html "turnoff2.html")) csdoc-opcode-database)
(puthash "turnoff" (quote (:opcode "turnoff" :spec " turnoff " :out nil :in nil :template "turnoff" :doc "Enables an instrument to turn itself off" :html "turnoff.html")) csdoc-opcode-database)
(puthash "trsplit" (quote (:opcode "trsplit" :spec "ff trsplit fkkk" :out "ff" :in "fkkk" :template "fsiglow, fsighi trsplit fin, ksplit[, kgainlow, kgainhigh]" :doc "The trsplit opcode takes an input containg a TRACKS pv streaming signal (as generated, for instance by partials) and splits it into two signals according to a k-rate frequency split point" :html "trsplit.html")) csdoc-opcode-database)
(puthash "trshift" (quote (:opcode "trshift" :spec "f trshift fkk" :out "f" :in "fkk" :template "fsig trshift fin, kpshift[, kgain]" :doc "The trshift opcode takes an input containg a TRACKS pv streaming signal (as generated, for instance by partials) and shifts all frequencies by a k-rate frequency" :html "trshift.html")) csdoc-opcode-database)
(puthash "trscale" (quote (:opcode "trscale" :spec "f trscale fkk" :out "f" :in "fkk" :template "fsig trscale fin, kpitch[, kgain]" :doc "The trscale opcode takes an input containg a TRACKS pv streaming signal (as generated, for instance by partials) and scales all frequencies by a k-rate amount" :html "trscale.html")) csdoc-opcode-database)
(puthash "trmix" (quote (:opcode "trmix" :spec "f trmix ff" :out "f" :in "ff" :template "fsig trmix fin1, fin2" :doc "The trmix opcode takes two inputs containg TRACKS pv streaming signals (as generated, for instance by partials) and mixes them into a single TRACKS stream" :html "trmix.html")) csdoc-opcode-database)
(puthash "trlowest" (quote (:opcode "trlowest" :spec "fkk trlowest fk" :out "fkk" :in "fk" :template "fsig, kfr,kamp trlowest fin1, kscal" :doc "The trlowest opcode takes an input containg TRACKS pv streaming signals (as generated, for instance by partials) and outputs only the lowest track" :html "trlowest.html")) csdoc-opcode-database)
(puthash "trirand" (quote (:opcode "trirand" :spec "x trirand k" :out "x" :in "k" :template "ares trirand krange
 ires trirand krange
 kres trirand krange" :doc "Triangular distribution random number generator" :html "trirand.html")) csdoc-opcode-database)
(puthash "trigseq" (quote (:opcode "trigseq" :spec " trigseq kkkkkkk" :out nil :in "kkkkkkk" :template "trigseq ktrig_in, kstart, kloop, kinitndx, kfn_values, kout1 [, kout2] [...]" :doc "Accepts a trigger signal as input and outputs a group of values" :html "trigseq.html")) csdoc-opcode-database)
(puthash "trigger" (quote (:opcode "trigger" :spec "k trigger kkk" :out "k" :in "kkk" :template "kout trigger ksig, kthreshold, kmode" :doc "Informs when a krate signal crosses a threshold" :html "trigger.html")) csdoc-opcode-database)
(puthash "trhighest" (quote (:opcode "trhighest" :spec "fkk trhighest fk" :out "fkk" :in "fk" :template "fsig, kfr,kamp trhighest fin1, kscal" :doc "The trhighest opcode takes an input containg TRACKS pv streaming signals (as generated, for instance by partials) and outputs only the highest track" :html "trhighest.html")) csdoc-opcode-database)
(puthash "trfilter" (quote (:opcode "trfilter" :spec "f trfilter fki" :out "f" :in "fki" :template "fsig trfilter fin, kamnt, ifn" :doc "The trfilter opcode takes an input containg a TRACKS pv streaming signal (as generated, for instance by partials) and filters it using an amplitude response curve stored in a function table" :html "trfilter.html")) csdoc-opcode-database)
(puthash "trcross" (quote (:opcode "trcross" :spec "f trcross ffkkk" :out "f" :in "ffkkk" :template "fsig trcross fin1, fin2, ksearch,kdepth[,kmode]" :doc "The trcross opcode takes two inputs containg TRACKS pv streaming signals (as generated, for instance by partials) and cross-synthesises them into a single TRACKS stream" :html "trcross.html")) csdoc-opcode-database)
(puthash "transeg" (quote (:opcode "transeg" :spec "x transeg iiiiiii" :out "x" :in "iiiiiii" :template "ares transeg ia, idur, itype, ib [, idur2] [, itype] [, ic] ...
 kres transeg ia, idur, itype, ib [, idur2] [, itype] [, ic] ..." :doc "Constructs a user-definable envelope" :html "transeg.html")) csdoc-opcode-database)
(puthash "tradsyn" (quote (:opcode "tradsyn" :spec "a tradsyn fkkki" :out "a" :in "fkkki" :template "asig tradsyn fin, kscal, kpitch, kmaxtracks, ifn" :doc "The tradsyn opcode takes an input containg a TRACKS pv streaming signal (as generated, for instance by partials),as described in Lazzarini et al, \"Time-stretching using the Instantaneous Frequency Distribution and Partial Tracking\", Proc" :html "tradsyn.html")) csdoc-opcode-database)
(puthash "trandom" (quote (:opcode "trandom" :spec "k trandom kkk" :out "k" :in "kkk" :template "kout trandom ktrig, kmin, kmax" :doc "Generates a controlled pseudo-random number series between min and max values at k-rate whenever the trigger parameter is different to 0" :html "trandom.html")) csdoc-opcode-database)
(puthash "tonex" (quote (:opcode "tonex" :spec "a tonex akii" :out "a" :in "akii" :template "ares tonex asig, khp [, inumlayer] [, iskip]" :doc "tonex is equivalent to a filter consisting of more layers of tone with the same arguments, serially connected" :html "tonex.html")) csdoc-opcode-database)
(puthash "tonek" (quote (:opcode "tonek" :spec "k tonek kki" :out "k" :in "kki" :template "kres tonek ksig, khp [, iskip]" :doc "A first-order recursive low-pass filter with variable frequency response" :html "tonek.html")) csdoc-opcode-database)
(puthash "tone" (quote (:opcode "tone" :spec "a tone aki" :out "a" :in "aki" :template "ares tone asig, khp [, iskip]" :doc "A first-order recursive low-pass filter with variable frequency response" :html "tone.html")) csdoc-opcode-database)
(puthash "tlineto" (quote (:opcode "tlineto" :spec "k tlineto kkk" :out "k" :in "kkk" :template "kres tlineto ksig, ktime, ktrig" :doc "Generate glissandos starting from a control signal with a trigger" :html "tlineto.html")) csdoc-opcode-database)
(puthash "tival" (quote (:opcode "tival" :spec "i tival " :out "i" :in nil :template "ir tival" :doc "Puts the value of the instruments internal “tie-in” flag into the named i-rate variable" :html "tival.html")) csdoc-opcode-database)
(puthash "timout" (quote (:opcode "timout" :spec " timout iil" :out nil :in "iil" :template "timout istrt, idur, label" :doc "Conditional branch during p-time depending on elapsed note time" :html "timout.html")) csdoc-opcode-database)
(puthash "times" (quote (:opcode "times" :spec "x times " :out "x" :in nil :template "ires times
 kres times" :doc "Read absolute time, in seconds, since the start of the performance" :html "times.html")) csdoc-opcode-database)
(puthash "timek" (quote (:opcode "timek" :spec "x timek " :out "x" :in nil :template "ires timek
 kres timek" :doc "Read absolute time, in k-rate cycles, since the start of the performance" :html "timek.html")) csdoc-opcode-database)
(puthash "timeinsts" (quote (:opcode "timeinsts" :spec "k timeinsts " :out "k" :in nil :template "kres timeinsts" :doc "Read absolute time, in seconds, since the start of an instance of an instrument" :html "timeinsts.html")) csdoc-opcode-database)
(puthash "timeinstk" (quote (:opcode "timeinstk" :spec "k timeinstk " :out "k" :in nil :template "kres timeinstk" :doc "Read absolute time, in k-rate cycles, since the start of an instance of an instrument" :html "timeinstk.html")) csdoc-opcode-database)
(puthash "timedseq" (quote (:opcode "timedseq" :spec "k timedseq kikkkk" :out "k" :in "kikkkk" :template "ktrig timedseq ktimpnt, ifn, kp1 [,kp2, kp3, ...,kpN]" :doc "An event-sequencer in which time can be controlled by a time-pointer" :html "timedseq.html")) csdoc-opcode-database)
(puthash "tigoto" (quote (:opcode "tigoto" :spec " tigoto l" :out nil :in "l" :template "tigoto label" :doc "Similar to igoto but effective only during an i-time pass at which a new note is being “tied” onto a previously held note" :html "tigoto.html")) csdoc-opcode-database)
(puthash "tempoval" (quote (:opcode "tempoval" :spec "k tempoval " :out "k" :in nil :template "kres tempoval" :doc "Reads the current value of the tempo" :html "tempoval.html")) csdoc-opcode-database)
(puthash "tempo" (quote (:opcode "tempo" :spec " tempo ki" :out nil :in "ki" :template "tempo ktempo, istartempo" :doc "Apply tempo control to an uninterpreted score" :html "tempo.html")) csdoc-opcode-database)
(puthash "tempest" (quote (:opcode "tempest" :spec "k tempest kiiiiiiiiiii" :out "k" :in "kiiiiiiiiiii" :template "ktemp tempest kin, iprd, imindur, imemdur, ihp, ithresh, ihtim, ixfdbak, istartempo, ifn [, idisprd] [, itweek]" :doc "Estimate the tempo of beat patterns in a control signal" :html "tempest.html")) csdoc-opcode-database)
(puthash "tbvcf" (quote (:opcode "tbvcf" :spec "a tbvcf axxkki" :out "a" :in "axxkki" :template "ares tbvcf asig, xfco, xres, kdist, kasym [, iskip]" :doc "This opcode attempts to model some of the filter characteristics of a Roland TB303 voltage-controlled filter" :html "tbvcf.html")) csdoc-opcode-database)
(puthash "taninv2" (quote (:opcode "taninv2" :spec "x taninv2 xx" :out "x" :in "xx" :template "ares taninv2 ay, ax
 ires taninv2 iy, ix
 kres taninv2 ky, kx
 Returns the arctangent of iy/ix, ky/kx, or ay/ax. If y is zero, taninv2 returns zero regardless of the value of x. If x is zero, the return value is:" :doc "Returns the arctangent of iy/ix, ky/kx, or ay/ax" :html "taninv2.html")) csdoc-opcode-database)
(puthash "taninv" (quote (:function "taninv" :html "taninv.html")) csdoc-opcode-database)
(puthash "tanh" (quote (:function "tanh" :html "tanh.html")) csdoc-opcode-database)
(puthash "tan" (quote (:function "tan" :html "tan.html")) csdoc-opcode-database)
(puthash "tambourine" (quote (:opcode "tambourine" :spec "a tambourine kiiiiiii" :out "a" :in "kiiiiiii" :template "ares tambourine kamp, idettack [, inum] [, idamp] [, imaxshake] [, ifreq] [, ifreq1] [, ifreq2]" :doc "tambourine is a semi-physical model of a tambourine sound" :html "tambourine.html")) csdoc-opcode-database)
(puthash "tabsum" (quote (:opcode "tabsum" :spec "k tabsum ikk" :out "k" :in "ikk" :template "kr tabsum ifn[[, kmin] [, kmax]]" :doc "Sums the values in an f-table in a consecutive range" :html "tabsum.html")) csdoc-opcode-database)
(puthash "tabplay" (quote (:opcode "tabplay" :spec " tabplay kkkkkk" :out nil :in "kkkkkk" :template "tabplay ktrig, knumtics, kfn, kout1 [,kout2,..., koutN]" :doc "Plays-back control-rate signals on trigger-temporization basis" :html "tabplay.html")) csdoc-opcode-database)
(puthash "tabmorphi" (quote (:opcode "tabmorphi" :spec "k tabmorphi kkkkiiiii" :out "k" :in "kkkkiiiii" :template "kout tabmorphi kindex, kweightpoint, ktabnum1, ktabnum2, ifn1, ifn2 [, ifn3, ifn4, ... ifnN]" :doc "tabmorphi allows morphing between a set of tables of the same size, by means of a weighted average between two currently selected tables" :html "tabmorphi.html")) csdoc-opcode-database)
(puthash "tabmorphak" (quote (:opcode "tabmorphak" :spec "a tabmorphak akkkiiiii" :out "a" :in "akkkiiiii" :template "aout tabmorphak aindex, kweightpoint, ktabnum1, ktabnum2, ifn1, ifn2 [, ifn3, ifn4, ... ifnN]" :doc "tabmorphak allows morphing between a set of tables of the same size, by means of a weighted average between two currently selected tables" :html "tabmorphak.html")) csdoc-opcode-database)
(puthash "tabmorpha" (quote (:opcode "tabmorpha" :spec "a tabmorpha aaaaiiiii" :out "a" :in "aaaaiiiii" :template "aout tabmorpha aindex, aweightpoint, atabnum1, atabnum2, ifn1, ifn2 [, ifn3, ifn4, ... ifnN]" :doc "tabmorpha allows morphing between a set of tables of the same size, by means of a weighted average between two currently selected tables" :html "tabmorpha.html")) csdoc-opcode-database)
(puthash "tabmorph" (quote (:opcode "tabmorph" :spec "k tabmorph kkkkiiiii" :out "k" :in "kkkkiiiii" :template "kout tabmorph kindex, kweightpoint, ktabnum1, ktabnum2, ifn1, ifn2 [, ifn3, ifn4, ... ifnN]" :doc "tabmorph allows morphing between a set of tables of the same size, by means of a weighted average between two currently selected tables" :html "tabmorph.html")) csdoc-opcode-database)
(puthash "tablexseg" (quote (:opcode "tablexseg" :spec " tablexseg iiiii" :out nil :in "iiiii" :template "tablexseg ifn1, idur1, ifn2 [, idur2] [, ifn3] [...]" :doc "tablexseg is like expseg but interpolate between values in a stored function tables" :html "tablexseg.html")) csdoc-opcode-database)
(puthash "tablexkt" (quote (:opcode "tablexkt" :spec "a tablexkt xkkiiii" :out "a" :in "xkkiiii" :template "ares tablexkt xndx, kfn, kwarp, iwsize [, ixmode] [, ixoff] [, iwrap]" :doc "Reads function tables with linear, cubic, or sinc interpolation" :html "tablexkt.html")) csdoc-opcode-database)
(puthash "tablewkt" (quote (:opcode "tablewkt" :spec " tablewkt xxkiii" :out nil :in "xxkiii" :template "tablewkt asig, andx, kfn [, ixmode] [, ixoff] [, iwgmode]
 tablewkt ksig, kndx, kfn [, ixmode] [, ixoff] [, iwgmode]" :doc "This opcode operates on existing function tables, changing their contents" :html "tablewkt.html")) csdoc-opcode-database)
(puthash "tablewa" (quote (:opcode "tablewa" :spec "k tablewa kak" :out "k" :in "kak" :template "kstart tablewa kfn, asig, koff" :doc "This opcode writes to a table in sequential locations to and from an a-rate variable" :html "tablewa.html")) csdoc-opcode-database)
(puthash "tablew" (quote (:opcode "tablew" :spec " tablew xxiiii" :out nil :in "xxiiii" :template "tablew asig, andx, ifn [, ixmode] [, ixoff] [, iwgmode]
 tablew isig, indx, ifn [, ixmode] [, ixoff] [, iwgmode]
 tablew ksig, kndx, ifn [, ixmode] [, ixoff] [, iwgmode]" :doc "This opcode operates on existing function tables, changing their contents" :html "tablew.html")) csdoc-opcode-database)
(puthash "tableseg" (quote (:opcode "tableseg" :spec " tableseg iiiii" :out nil :in "iiiii" :template "tableseg ifn1, idur1, ifn2 [, idur2] [, ifn3] [...]" :doc "tableseg is like linseg but interpolate between values in a stored function tables" :html "tableseg.html")) csdoc-opcode-database)
(puthash "tablera" (quote (:opcode "tablera" :spec "a tablera kkk" :out "a" :in "kkk" :template "ares tablera kfn, kstart, koff" :doc "These opcode reads tables in sequential locations to an a-rate variable" :html "tablera.html")) csdoc-opcode-database)
(puthash "tableng" (quote (:opcode "tableng" :spec "x tableng x" :out "x" :in "x" :template "ires tableng ifn
 kres tableng kfn" :doc "Interrogates a function table for length" :html "tableng.html")) csdoc-opcode-database)
(puthash "tablemix" (quote (:opcode "tablemix" :spec " tablemix kkkkkkkkk" :out nil :in "kkkkkkkkk" :template "tablemix kdft, kdoff, klen, ks1ft, ks1off, ks1g, ks2ft, ks2off, ks2g" :doc "Mixes two tables" :html "tablemix.html")) csdoc-opcode-database)
(puthash "tablekt" (quote (:opcode "tablekt" :spec "x tablekt xkiii" :out "x" :in "xkiii" :template "ares tablekt xndx, kfn [, ixmode] [, ixoff] [, iwrap]
 kres tablekt kndx, kfn [, ixmode] [, ixoff] [, iwrap]" :doc "k-rate control over table numbers" :html "tablekt.html")) csdoc-opcode-database)
(puthash "tableiw" (quote (:opcode "tableiw" :spec " tableiw iiiiii" :out nil :in "iiiiii" :template "tableiw isig, indx, ifn [, ixmode] [, ixoff] [, iwgmode]" :doc "This opcode operates on existing function tables, changing their contents" :html "tableiw.html")) csdoc-opcode-database)
(puthash "tableimix" (quote (:opcode "tableimix" :spec " tableimix iiiiiiiii" :out nil :in "iiiiiiiii" :template "tableimix idft, idoff, ilen, is1ft, is1off, is1g, is2ft, is2off, is2g" :doc "Mixes two tables" :html "tableimix.html")) csdoc-opcode-database)
(puthash "tableikt" (quote (:opcode "tableikt" :spec "x tableikt xkiii" :out "x" :in "xkiii" :template "ares tableikt xndx, kfn [, ixmode] [, ixoff] [, iwrap]
 kres tableikt kndx, kfn [, ixmode] [, ixoff] [, iwrap]" :doc "k-rate control over table numbers" :html "tableikt.html")) csdoc-opcode-database)
(puthash "tableigpw" (quote (:opcode "tableigpw" :spec " tableigpw i" :out nil :in "i" :template "tableigpw ifn" :doc "Writes a tables guard point" :html "tableigpw.html")) csdoc-opcode-database)
(puthash "tableicopy" (quote (:opcode "tableicopy" :spec " tableicopy ii" :out nil :in "ii" :template "tableicopy idft, isft" :doc "Simple, fast table copy opcode" :html "tableicopy.html")) csdoc-opcode-database)
(puthash "tablei" (quote (:opcode "tablei" :spec "x tablei xiiii" :out "x" :in "xiiii" :template "ares tablei andx, ifn [, ixmode] [, ixoff] [, iwrap]
 ires tablei indx, ifn [, ixmode] [, ixoff] [, iwrap]
 kres tablei kndx, ifn [, ixmode] [, ixoff] [, iwrap]" :doc "Accesses table values by direct indexing with linear interpolation" :html "tablei.html")) csdoc-opcode-database)
(puthash "tablegpw" (quote (:opcode "tablegpw" :spec " tablegpw k" :out nil :in "k" :template "tablegpw kfn" :doc "Writes a tables guard point" :html "tablegpw.html")) csdoc-opcode-database)
(puthash "tablecopy" (quote (:opcode "tablecopy" :spec " tablecopy kk" :out nil :in "kk" :template "tablecopy kdft, ksft" :doc "Simple, fast table copy opcode" :html "tablecopy.html")) csdoc-opcode-database)
(puthash "table3" (quote (:opcode "table3" :spec "x table3 xiiii" :out "x" :in "xiiii" :template "ares table3 andx, ifn [, ixmode] [, ixoff] [, iwrap]
 ires table3 indx, ifn [, ixmode] [, ixoff] [, iwrap]
 kres table3 kndx, ifn [, ixmode] [, ixoff] [, iwrap]" :doc "Accesses table values by direct indexing with cubic interpolation" :html "table3.html")) csdoc-opcode-database)
(puthash "table" (quote (:opcode "table" :spec "x table xiiii" :out "x" :in "xiiii" :template "ares table andx, ifn [, ixmode] [, ixoff] [, iwrap]
 ires table indx, ifn [, ixmode] [, ixoff] [, iwrap]
 kres table kndx, ifn [, ixmode] [, ixoff] [, iwrap]" :doc "Accesses table values by direct indexing" :html "table.html")) csdoc-opcode-database)
(puthash "tabrec" (quote (:opcode "tabrec" :spec " tabrec kkkkkkk" :out nil :in "kkkkkkk" :template "tabrec ktrig_start, ktrig_stop, knumtics, kfn, kin1 [,kin2,...,kinN]" :doc "Records control-rate signals on trigger-temporization basis" :html "tabrec.html")) csdoc-opcode-database)
(puthash "tab" (quote (:opcode "tab" :spec "xT tab  tab xxii" :out "xT" :in "xxii" :template "ir tab_i indx, ifn[, ixmode]
 kr tab kndx, ifn[, ixmode]
 ar tab xndx, ifn[, ixmode]
 tabw_i isig, indx, ifn [,ixmode]
 tabw ksig, kndx, ifn [,ixmode]
 tabw asig, andx, ifn [,ixmode]" :doc "Fast table opcodes" :html "tab.html")) csdoc-opcode-database)
(puthash "tb" (quote (:opcode "tb" :spec "Ti" :out "Ti" :in "Ti" :template "tb0_init ifn
 tb1_init ifn
 tb2_init ifn
 tb3_init ifn
 tb4_init ifn
 tb5_init ifn
 tb6_init ifn
 tb7_init ifn
 tb8_init ifn
 tb9_init ifn
 tb10_init ifn
 tb11_init ifn
 tb12_init ifn
 tb13_init ifn
 tb14_init ifn
 tb15_init ifn
 iout = tb0(iIndex)
 kout = tb0(kIndex)
 iout = tb1(iIndex)
 kout = tb1(kIndex)
 iout = tb2(iIndex)
 kout = tb2(kIndex)
 iout = tb3(iIndex)
 kout = tb3(kIndex)
 iout = tb4(iIndex)
 kout = tb4(kIndex)
 iout = tb5(iIndex)
 kout = tb5(kIndex)
 iout = tb6(iIndex)
 kout = tb6(kIndex)
 iout = tb7(iIndex)
 kout = tb7(kIndex)
 iout = tb8(iIndex)
 kout = tb8(kIndex)
 iout = tb9(iIndex)
 kout = tb9(kIndex)
 iout = tb10(iIndex)
 kout = tb10(kIndex)
 iout = tb11(iIndex)
 kout = tb11(kIndex)
 iout = tb12(iIndex)
 kout = tb12(kIndex)
 iout = tb13(iIndex)
 kout = tb13(kIndex)
 iout = tb14(iIndex)
 kout = tb14(kIndex)
 iout = tb15(iIndex)
 kout = tb15(kIndex)" :doc "Allow to read tables in function fashion, to be used inside expressions" :html "tb.html")) csdoc-opcode-database)
(puthash "system" (quote (:opcode "system" :spec "xS system xSx" :out "xS" :in "xSx" :template "ires system_i itrig, Scmd, [inowait]
 kres system ktrig, Scmd, [knowait]" :doc "system and system_i call any external command understood by the operating system, similarly to the C function system()" :html "system.html")) csdoc-opcode-database)
(puthash "syncphasor" (quote (:opcode "syncphasor" :spec "aa syncphasor xai" :out "aa" :in "xai" :template "aphase, asyncout syncphasor xcps, asyncin, [, iphs]" :doc "Produces a moving phase value between zero and one and an extra impulse output (\"sync out\") whenever its phase value crosses or is reset to zero" :html "syncphasor.html")) csdoc-opcode-database)
(puthash "syncloop" (quote (:opcode "syncloop" :spec "a syncloop kkkkkkkiiiii" :out "a" :in "kkkkkkkiiiii" :template "asig syncloop kamp, kfreq, kpitch, kgrsize, kprate, klstart, klend, ifun1, ifun2, iolaps[,istart, iskip]" :doc "syncloop is a variation on syncgrain,which implements synchronous granular synthesis" :html "syncloop.html")) csdoc-opcode-database)
(puthash "syncgrain" (quote (:opcode "syncgrain" :spec "a syncgrain kkkkkiii" :out "a" :in "kkkkkiii" :template "asig syncgrain kamp, kfreq, kpitch, kgrsize, kprate, ifun1, ifun2, iolaps" :doc "syncgrain implements synchronous granular synthesis" :html "syncgrain.html")) csdoc-opcode-database)
(puthash "svfilter" (quote (:opcode "svfilter" :spec "aaa svfilter akki" :out "aaa" :in "akki" :template "alow, ahigh, aband svfilter asig, kcf, kq [, iscl]" :doc "Implementation of a resonant second order filter, with simultaneous lowpass, highpass and bandpass outputs" :html "svfilter.html")) csdoc-opcode-database)
(puthash "sum" (quote (:opcode "sum" :spec "a sum aaa" :out "a" :in "aaa" :template "ares sum asig1 [, asig2] [, asig3] [...]" :doc "Sums any number of a-rate signals" :html "sum.html")) csdoc-opcode-database)
(puthash "strupperk" (quote (:opcode "strupperk" :spec "S strupperk S" :out "S" :in "S" :template "Sdst strupperk Ssrc" :doc "Convert Ssrc to upper case, and write the result to Sdst" :html "strupperk.html")) csdoc-opcode-database)
(puthash "strupper" (quote (:opcode "strupper" :spec "S strupper S" :out "S" :in "S" :template "Sdst strupper Ssrc" :doc "Convert Ssrc to upper case, and write the result to Sdst" :html "strupper.html")) csdoc-opcode-database)
(puthash "strtolk" (quote (:opcode "strtolk" :spec "k strtolk x" :out "k" :in "x" :template "kr strtolk Sstr
 kr strtolk kndx
 strtolk can parse numbers in decimal, octal (prefixed by 0), and hexadecimal (with a prefix of 0x) format." :doc "Convert a string to a floating point value at i- or k-rate" :html "strtolk.html")) csdoc-opcode-database)
(puthash "strtol" (quote (:opcode "strtol" :spec "i strtol x" :out "i" :in "x" :template "ir strtol Sstr
 ir strtol indx" :doc "Convert a string to a signed integer value" :html "strtol.html")) csdoc-opcode-database)
(puthash "strtodk" (quote (:opcode "strtodk" :spec "k strtodk x" :out "k" :in "x" :template "kr strtodk Sstr
 kr strtodk kndx" :doc "Convert a string to a floating point value at i- or k-rate" :html "strtodk.html")) csdoc-opcode-database)
(puthash "strtod" (quote (:opcode "strtod" :spec "i strtod x" :out "i" :in "x" :template "ir strtod Sstr
 ir strtod indx" :doc "Convert a string to a floating point value" :html "strtod.html")) csdoc-opcode-database)
(puthash "strsubk" (quote (:opcode "strsubk" :spec "S strsubk Skk" :out "S" :in "Skk" :template "Sdst strsubk Ssrc, kstart, kend" :doc "Return a substring of the source string" :html "strsubk.html")) csdoc-opcode-database)
(puthash "strsub" (quote (:opcode "strsub" :spec "S strsub Sii" :out "S" :in "Sii" :template "Sdst strsub Ssrc[, istart[, iend]]" :doc "Return a substring of the source string" :html "strsub.html")) csdoc-opcode-database)
(puthash "strset" (quote (:opcode "strset" :spec " strset ii" :out nil :in "ii" :template "strset iarg, istring" :doc "Allows a string to be linked with a numeric value" :html "strset.html")) csdoc-opcode-database)
(puthash "strrindexk" (quote (:opcode "strrindexk" :spec "k strrindexk SS" :out "k" :in "SS" :template "kpos strrindexk S1, S2" :doc "Return the position of the last occurence of S2 in S1, or -1 if not found" :html "strrindexk.html")) csdoc-opcode-database)
(puthash "strrindex" (quote (:opcode "strrindex" :spec "i strrindex SS" :out "i" :in "SS" :template "ipos strrindex S1, S2" :doc "Return the position of the last occurence of S2 in S1, or -1 if not found" :html "strrindex.html")) csdoc-opcode-database)
(puthash "strlowerk" (quote (:opcode "strlowerk" :spec "S strlowerk S" :out "S" :in "S" :template "Sdst strlowerk Ssrc" :doc "Convert Ssrc to lower case, and write the result to Sdst" :html "strlowerk.html")) csdoc-opcode-database)
(puthash "strlower" (quote (:opcode "strlower" :spec "S strlower S" :out "S" :in "S" :template "Sdst strlower Ssrc" :doc "Convert Ssrc to lower case, and write the result to Sdst" :html "strlower.html")) csdoc-opcode-database)
(puthash "strlenk" (quote (:opcode "strlenk" :spec "k strlenk S" :out "k" :in "S" :template "klen strlenk Sstr" :doc "Return the length of a string, or zero if it is empty" :html "strlenk.html")) csdoc-opcode-database)
(puthash "strlen" (quote (:opcode "strlen" :spec "i strlen S" :out "i" :in "S" :template "ilen strlen Sstr" :doc "Return the length of a string, or zero if it is empty" :html "strlen.html")) csdoc-opcode-database)
(puthash "strindexk" (quote (:opcode "strindexk" :spec "k strindexk SS" :out "k" :in "SS" :template "kpos strindexk S1, S2" :doc "Return the position of the first occurence of S2 in S1, or -1 if not found" :html "strindexk.html")) csdoc-opcode-database)
(puthash "strindex" (quote (:opcode "strindex" :spec "i strindex SS" :out "i" :in "SS" :template "ipos strindex S1, S2" :doc "Return the position of the first occurence of S2 in S1, or -1 if not found" :html "strindex.html")) csdoc-opcode-database)
(puthash "strget" (quote (:opcode "strget" :spec "S strget i" :out "S" :in "i" :template "Sdst strget indx" :doc "strget sets a string variable at initialization time to the value stored in strset table at the specified index, or a string p-field from the score" :html "strget.html")) csdoc-opcode-database)
(puthash "streson" (quote (:opcode "streson" :spec "a streson aki" :out "a" :in "aki" :template "ares streson asig, kfr, ifdbgain" :doc "An audio signal is modified by a string resonator with variable fundamental frequency" :html "streson.html")) csdoc-opcode-database)
(puthash "strcmpk" (quote (:opcode "strcmpk" :spec "k strcmpk SS" :out "k" :in "SS" :template "kres strcmpk S1, S2" :doc "Compare strings and set the result to -1, 0, or 1 if the first string is less than, equal to, or greater than the second, respectively" :html "strcmpk.html")) csdoc-opcode-database)
(puthash "strcmp" (quote (:opcode "strcmp" :spec "i strcmp SS" :out "i" :in "SS" :template "ires strcmp S1, S2" :doc "Compare strings and set the result to -1, 0, or 1 if the first string is less than, equal to, or greater than the second, respectively" :html "strcmp.html")) csdoc-opcode-database)
(puthash "strcatk" (quote (:opcode "strcatk" :spec "S strcatk SS" :out "S" :in "SS" :template "Sdst strcatk Ssrc1, Ssrc2" :doc "Concatenate two strings and store the result in a variable" :html "strcatk.html")) csdoc-opcode-database)
(puthash "strcat" (quote (:opcode "strcat" :spec "S strcat SS" :out "S" :in "SS" :template "Sdst strcat Ssrc1, Ssrc2" :doc "Concatenate two strings and store the result in a variable" :html "strcat.html")) csdoc-opcode-database)
(puthash "strcpyk" (quote (:opcode "strcpyk" :spec "S strcpyk S" :out "S" :in "S" :template "Sdst strcpyk Ssrc" :doc "Assign to a string variable by copying the source which may be a constant or another string variable" :html "strcpyk.html")) csdoc-opcode-database)
(puthash "strcpy" (quote (:opcode "strcpy" :spec "S strcpy S" :out "S" :in "S" :template "Sdst strcpy Ssrc" :doc "Assign to a string variable by copying the source which may be a constant or another string variable" :html "strcpy.html")) csdoc-opcode-database)
(puthash "strchark" (quote (:opcode "strchark" :spec "k strchark Sk" :out "k" :in "Sk" :template "kchr strchark Sstr[, kpos]" :doc "Return the ASCII code of the character in Sstr at kpos (defaults to zero which means the first character), or zero if kpos is out of range" :html "strchark.html")) csdoc-opcode-database)
(puthash "strchar" (quote (:opcode "strchar" :spec "i strchar Si" :out "i" :in "Si" :template "ichr strchar Sstr[, ipos]" :doc "Return the ASCII code of the character in Sstr at ipos (defaults to zero which means the first character), or zero if ipos is out of range" :html "strchar.html")) csdoc-opcode-database)
(puthash "stix" (quote (:opcode "stix" :spec "a stix iiiii" :out "a" :in "iiiii" :template "ares stix iamp, idettack [, inum] [, idamp] [, imaxshake]" :doc "stix is a semi-physical model of a stick sound" :html "stix.html")) csdoc-opcode-database)
(puthash "statevar" (quote (:opcode "statevar" :spec "aaaa statevar akkii" :out "aaaa" :in "akkii" :template "ahp,alp,abp,abr statevar ain, kcf, kq [, iosamps, istor]" :doc "Statevar is a new digital implementation of the analogue state-variable filter" :html "statevar.html")) csdoc-opcode-database)
(puthash "stack" (quote (:opcode "stack" :spec " stack i" :out nil :in "i" :template "stack iStackSize" :doc "Initializes and sets the size of the global stack" :html "stack.html")) csdoc-opcode-database)
(puthash "sqrt" (quote (:function "sqrt" :html "sqrt.html")) csdoc-opcode-database)
(puthash "sprintfk" (quote (:opcode "sprintfk" :spec "S sprintfk Sxx" :out "S" :in "Sxx" :template "Sdst sprintfk Sfmt, xarg1[, xarg2[, ... ]]" :doc "sprintfk writes printf-style formatted output to a string variable, similarly to the C function sprintf()" :html "sprintfk.html")) csdoc-opcode-database)
(puthash "sprintf" (quote (:opcode "sprintf" :spec "S sprintf Sxx" :out "S" :in "Sxx" :template "Sdst sprintf Sfmt, xarg1[, xarg2[, ... ]]
 Sdst sprintfk Sfmt, xarg1[, xarg2[, ... ]]" :doc "sprintf write printf-style formatted output to a string variable, similarly to the C function sprintf()" :html "sprintf.html")) csdoc-opcode-database)
(puthash "spsend" (quote (:opcode "spsend" :spec "aaaa spsend " :out "aaaa" :in nil :template "a1, a2, a3, a4 spsend" :doc "spsend depends upon the existence of a previously defined space" :html "spsend.html")) csdoc-opcode-database)
(puthash "splitrig" (quote (:opcode "splitrig" :spec " splitrig kkiikkk" :out nil :in "kkiikkk" :template "splitrig ktrig, kndx, imaxtics, ifn, kout1 [,kout2,...,koutN]" :doc "splitrig splits a trigger signal (i" :html "splitrig.html")) csdoc-opcode-database)
(puthash "spectrum" (quote (:opcode "spectrum" :spec "w spectrum xiiiiiiii" :out "w" :in "xiiiiiiii" :template "wsig spectrum xsig, iprd, iocts, ifrqa [, iq] [, ihann] [, idbout] [, idsprd] [, idsinrs]" :doc "Generate a constant-Q, exponentially-spaced DFT across all octaves of a multiply-downsampled control or audio input signal" :html "spectrum.html")) csdoc-opcode-database)
(puthash "specsum" (quote (:opcode "specsum" :spec "k specsum wi" :out "k" :in "wi" :template "ksum specsum wsig [, interp]" :doc "Sums the magnitudes across all channels of the spectrum" :html "specsum.html")) csdoc-opcode-database)
(puthash "specscal" (quote (:opcode "specscal" :spec "w specscal wii" :out "w" :in "wii" :template "wsig specscal wsigin, ifscale, ifthresh" :doc "Scales an input spectral datablock with spectral envelopes" :html "specscal.html")) csdoc-opcode-database)
(puthash "specptrk" (quote (:opcode "specptrk" :spec "kk specptrk wkiiiiiiiiiii" :out "kk" :in "wkiiiiiiiiiii" :template "koct, kamp specptrk wsig, kvar, ilo, ihi, istr, idbthresh, inptls, irolloff [, iodd] [, iconfs] [, interp] [, ifprd] [, iwtflg]" :doc "Estimate the pitch of the most prominent complex tone in the spectrum" :html "specptrk.html")) csdoc-opcode-database)
(puthash "spechist" (quote (:opcode "spechist" :spec "w spechist w" :out "w" :in "w" :template "wsig spechist wsigin" :doc "Accumulates the values of successive spectral frames" :html "spechist.html")) csdoc-opcode-database)
(puthash "specfilt" (quote (:opcode "specfilt" :spec "w specfilt wi" :out "w" :in "wi" :template "wsig specfilt wsigin, ifhtim" :doc "Filters each channel of an input spectrum" :html "specfilt.html")) csdoc-opcode-database)
(puthash "specdisp" (quote (:opcode "specdisp" :spec " specdisp wii" :out nil :in "wii" :template "specdisp wsig, iprd [, iwtflg]" :doc "Displays the magnitude values of the spectrum" :html "specdisp.html")) csdoc-opcode-database)
(puthash "specdiff" (quote (:opcode "specdiff" :spec "w specdiff w" :out "w" :in "w" :template "wsig specdiff wsigin" :doc "Finds the positive difference values between consecutive spectral frames" :html "specdiff.html")) csdoc-opcode-database)
(puthash "specaddm" (quote (:opcode "specaddm" :spec "w specaddm wwi" :out "w" :in "wwi" :template "wsig specaddm wsig1, wsig2 [, imul2]" :doc "Perform a weighted add of two input spectra" :html "specaddm.html")) csdoc-opcode-database)
(puthash "spdist" (quote (:opcode "spdist" :spec "k spdist ikkk" :out "k" :in "ikkk" :template "k1 spdist ifn, ktime, kx, ky" :doc "spdist uses the same xy data as space, also either from a text file using Gen28 or from x and y arguments given to the unit directly" :html "spdist.html")) csdoc-opcode-database)
(puthash "spat3dt" (quote (:opcode "spat3dt" :spec " spat3dt iiiiiiiii" :out nil :in "iiiiiiiii" :template "spat3dt ioutft, iX, iY, iZ, idist, ift, imode, irlen [, iftnocl]" :doc "This opcode positions the input sound in a 3D space, with optional simulation of room acoustics, in various output formats" :html "spat3dt.html")) csdoc-opcode-database)
(puthash "spat3di" (quote (:opcode "spat3di" :spec "aaaa spat3di aiiiiiii" :out "aaaa" :in "aiiiiiii" :template "aW, aX, aY, aZ spat3di ain, iX, iY, iZ, idist, ift, imode [, istor]" :doc "This opcode positions the input sound in a 3D space, with optional simulation of room acoustics, in various output formats" :html "spat3di.html")) csdoc-opcode-database)
(puthash "spat3d" (quote (:opcode "spat3d" :spec "aaaa spat3d akkkiiiiii" :out "aaaa" :in "akkkiiiiii" :template "aW, aX, aY, aZ spat3d ain, kX, kY, kZ, idist, ift, imode, imdel, iovr [, istor]" :doc "This opcode positions the input sound in a 3D space, with optional simulation of room acoustics, in various output formats" :html "spat3d.html")) csdoc-opcode-database)
(puthash "space" (quote (:opcode "space" :spec "aaaa space aikkkk" :out "aaaa" :in "aikkkk" :template "a1, a2, a3, a4 space asig, ifn, ktime, kreverbsend, kx, ky" :doc "space takes an input signal and distributes it among 4 channels using Cartesian xy coordinates to calculate the balance of the outputs" :html "space.html")) csdoc-opcode-database)
(puthash "soundouts" (quote (:opcode "soundouts" :spec " soundouts aaii" :out nil :in "aaii" :template "soundouts asigl, asigr, ifilcod [, iformat]" :doc "Note The usage of soundouts is discouraged" :html "soundouts.html")) csdoc-opcode-database)
(puthash "soundout" (quote (:opcode "soundout" :spec " soundout aii" :out nil :in "aii" :template "soundout asig1, ifilcod [, iformat]" :doc "Note The usage of soundout is discouraged" :html "soundout.html")) csdoc-opcode-database)
(puthash "soundin" (quote (:opcode "soundin" :spec "aaaa soundin iiiii" :out "aaaa" :in "iiiii" :template "ar1[, ar2[, ar3[, ... a24]]] soundin ifilcod [, iskptim] [, iformat] [, iskipinit] [, ibufsize]" :doc "Reads audio data from an external device or stream" :html "soundin.html")) csdoc-opcode-database)
(puthash "sockrecv" (quote (:opcode "sockrecv" :spec "a sockrecv ii" :out "a" :in "ii" :template "asig sockrecv iport, ilength
 asigl, asigr sockrecvs iport, ilength" :doc "Receives directly using the UDP (sockrecv and sockrecvs) or TCP (strecv) protocol onto a network" :html "sockrecv.html")) csdoc-opcode-database)
(puthash "socksend" (quote (:opcode "socksend" :spec " socksend aSii" :out nil :in "aSii" :template "socksend asig, Sipaddr, iport, ilength
 socksends asigl, asigr, Sipaddr, iport, ilength" :doc "Transmits data directly using the UDP (socksend and socksends) or TCP (stsend) protocol onto a network" :html "socksend.html")) csdoc-opcode-database)
(puthash "sndwarpst" (quote (:opcode "sndwarpst" :spec "aaaa sndwarpst xxxiiiiiii" :out "aaaa" :in "xxxiiiiiii" :template "ar1, ar2 [,ac1] [, ac2] sndwarpst xamp, xtimewarp, xresample, ifn1, ibeg, iwsize, irandw, ioverlap, ifn2, itimemode" :doc "sndwarpst reads stereo sound samples from a table and applies time-stretching and/or pitch modification" :html "sndwarpst.html")) csdoc-opcode-database)
(puthash "sndwarp" (quote (:opcode "sndwarp" :spec "aa sndwarp xxxiiiiiii" :out "aa" :in "xxxiiiiiii" :template "ares [, ac] sndwarp xamp, xtimewarp, xresample, ifn1, ibeg, iwsize, irandw, ioverlap, ifn2, itimemode" :doc "sndwarp reads sound samples from a table and applies time-stretching and/or pitch modification" :html "sndwarp.html")) csdoc-opcode-database)
(puthash "sndloop" (quote (:opcode "sndloop" :spec "ak sndloop akkii" :out "ak" :in "akkii" :template "asig, krec sndloop ain, kpitch, ktrig, idur, ifad" :doc "This opcode records input audio and plays it back in a loop with user-defined duration and crossfade time" :html "sndloop.html")) csdoc-opcode-database)
(puthash "sndload" (quote (:opcode "sndload" :spec " sndload Siiiiiiiii" :out nil :in "Siiiiiiiii" :template "sndload Sfname[, ifmt[, ichns[, isr[, ibas[, iamp[, istrt [, ilpmod[, ilps[, ilpe]]]]]]]]]" :doc "sndload loads a sound file into memory for use by loscilx" :html "sndload.html")) csdoc-opcode-database)
(puthash "sliderKawai" (quote (:opcode "sliderKawai" :spec "kkk sliderKawai iiiiiiiiiiii" :out "kkk" :in "iiiiiiiiiiii" :template "k1, k2, ...., k16 sliderKawai imin1, imax1, init1, ifn1, imin2, imax2, init2, ifn2, ..., imin16, imax16, init16, ifn16" :doc "Creates a bank of 16 different MIDI control message numbers from a KAWAI MM-16 midi mixer" :html "sliderKawai.html")) csdoc-opcode-database)
(puthash "slider8tablef" (quote (:opcode "slider8tablef" :spec "k slider8tablef iiiiiiiiiiiiiii" :out "k" :in "iiiiiiiiiiiiiii" :template "kflag slider8tablef ichan, ioutTable, ioffset, ictlnum1, imin1, imax1, init1, ifn1, icutoff1, .... , ictlnum8, imin8, imax8, init8, ifn8, icutoff8" :doc "Stores a bank of 8 different MIDI control messages to a table, filtered before output" :html "slider8tablef.html")) csdoc-opcode-database)
(puthash "slider8table" (quote (:opcode "slider8table" :spec "k slider8table iiiiiiiiiiiii" :out "k" :in "iiiiiiiiiiiii" :template "kflag slider8table ichan, ioutTable, ioffset, ictlnum1, imin1, imax1, init1, ifn1,..., ictlnum8, imin8, imax8, init8, ifn8" :doc "Stores a bank of 8 different MIDI control messages to a table" :html "slider8table.html")) csdoc-opcode-database)
(puthash "slider64tablef" (quote (:opcode "slider64tablef" :spec "k slider64tablef iiiiiiiiiiiiiii" :out "k" :in "iiiiiiiiiiiiiii" :template "kflag slider64tablef ichan, ioutTable, ioffset, ictlnum1, imin1, imax1, init1, ifn1, icutoff1, .... , ictlnum64, imin64, imax64, init64, ifn64, icutoff64" :doc "Stores a bank of 64 different MIDI MIDI control messages to a table, filtered before output" :html "slider64tablef.html")) csdoc-opcode-database)
(puthash "slider64table" (quote (:opcode "slider64table" :spec "k slider64table iiiiiiiiiiiii" :out "k" :in "iiiiiiiiiiiii" :template "kflag slider64table ichan, ioutTable, ioffset, ictlnum1, imin1, imax1, init1, ifn1, .... , ictlnum64, imin64, imax64, init64, ifn64" :doc "Creates a bank of 64 different MIDI control messages to a table" :html "slider64table.html")) csdoc-opcode-database)
(puthash "slider32tablef" (quote (:opcode "slider32tablef" :spec "k slider32tablef iiiiiiiiiiiiiii" :out "k" :in "iiiiiiiiiiiiiii" :template "kflag slider32tablef ichan, ioutTable, ioffset, ictlnum1, imin1, imax1, init1, ifn1, icutoff1, .... , ictlnum32, imin32, imax32, init32, ifn32, icutoff32" :doc "Creates a bank of 32 different MIDI control message numbers, filtered before output" :html "slider32tablef.html")) csdoc-opcode-database)
(puthash "slider32table" (quote (:opcode "slider32table" :spec "k slider32table iiiiiiiiiiiii" :out "k" :in "iiiiiiiiiiiii" :template "kflag slider32table ichan, ioutTable, ioffset, ictlnum1, imin1, imax1, init1, ifn1, .... , ictlnum32, imin32, imax32, init32, ifn32" :doc "Creates a bank of 32 different MIDI control messages to a table" :html "slider32table.html")) csdoc-opcode-database)
(puthash "slider16tablef" (quote (:opcode "slider16tablef" :spec "k slider16tablef iiiiiiiiiiiiiii" :out "k" :in "iiiiiiiiiiiiiii" :template "kflag slider16tablef ichan, ioutTable, ioffset, ictlnum1, imin1, imax1, init1, ifn1, icutoff1, .... , ictlnum16, imin16, imax16, init16, ifn16, icutoff16" :doc "Stores a bank of 16 different MIDI control messages to a table, filtered before output" :html "slider16tablef.html")) csdoc-opcode-database)
(puthash "slider16table" (quote (:opcode "slider16table" :spec "k slider16table iiiiiiiiiiiii" :out "k" :in "iiiiiiiiiiiii" :template "kflag slider16table ichan, ioutTable, ioffset, ictlnum1, imin1, imax1, init1, ifn1, .... , ictlnum16, imin16, imax16, init16, ifn16" :doc "Stores a bank of 16 different MIDI control messages to a table" :html "slider16table.html")) csdoc-opcode-database)
(puthash "slider8f" (quote (:opcode "slider8f" :spec "kk slider8f iiiiiiiiiiiii" :out "kk" :in "iiiiiiiiiiiii" :template "k1,...,k8 slider8f ichan, ictlnum1, imin1, imax1, init1, ifn1, icutoff1, ..., ictlnum8, imin8, imax8, init8, ifn8, icutoff8" :doc "Creates a bank of 8 different MIDI control message numbers, filtered before output" :html "slider8f.html")) csdoc-opcode-database)
(puthash "slider8" (quote (:opcode "slider8" :spec "xx slider8 iiiiiiiiiii" :out "xx" :in "iiiiiiiiiii" :template "i1,...,i8 slider8 ichan, ictlnum1, imin1, imax1, init1, ifn1,..., ictlnum8, imin8, imax8, init8, ifn8
 k1,...,k8 slider8 ichan, ictlnum1, imin1, imax1, init1, ifn1,..., ictlnum8, imin8, imax8, init8, ifn8" :doc "Creates a bank of 8 different MIDI control message numbers" :html "slider8.html")) csdoc-opcode-database)
(puthash "slider64f" (quote (:opcode "slider64f" :spec "kk slider64f iiiiiiiiiiiii" :out "kk" :in "iiiiiiiiiiiii" :template "k1,...,k64 slider64f ichan, ictlnum1, imin1, imax1, init1, ifn1, icutoff1,..., ictlnum64, imin64, imax64, init64, ifn64, icutoff64" :doc "Creates a bank of 64 different MIDI control message numbers, filtered before output" :html "slider64f.html")) csdoc-opcode-database)
(puthash "slider64" (quote (:opcode "slider64" :spec "xx slider64 iiiiiiiiiii" :out "xx" :in "iiiiiiiiiii" :template "i1,...,i64 slider64 ichan, ictlnum1, imin1, imax1, init1, ifn1,..., ictlnum64, imin64, imax64, init64, ifn64
 k1,...,k64 slider64 ichan, ictlnum1, imin1, imax1, init1, ifn1,..., ictlnum64, imin64, imax64, init64, ifn64" :doc "Creates a bank of 64 different MIDI control message numbers" :html "slider64.html")) csdoc-opcode-database)
(puthash "slider32f" (quote (:opcode "slider32f" :spec "kk slider32f iiiiiiiiiiiii" :out "kk" :in "iiiiiiiiiiiii" :template "k1,...,k32 slider32f ichan, ictlnum1, imin1, imax1, init1, ifn1, icutoff1, ..., ictlnum32, imin32, imax32, init32, ifn32, icutoff32" :doc "Creates a bank of 32 different MIDI control message numbers, filtered before output" :html "slider32f.html")) csdoc-opcode-database)
(puthash "slider32" (quote (:opcode "slider32" :spec "xx slider32 iiiiiiiiiii" :out "xx" :in "iiiiiiiiiii" :template "i1,...,i32 slider32 ichan, ictlnum1, imin1, imax1, init1, ifn1,..., ictlnum32, imin32, imax32, init32, ifn32
 k1,...,k32 slider32 ichan, ictlnum1, imin1, imax1, init1, ifn1,..., ictlnum32, imin32, imax32, init32, ifn32" :doc "Creates a bank of 32 different MIDI control message numbers" :html "slider32.html")) csdoc-opcode-database)
(puthash "slider16f" (quote (:opcode "slider16f" :spec "kk slider16f iiiiiiiiiiiii" :out "kk" :in "iiiiiiiiiiiii" :template "k1,...,k16 slider16f ichan, ictlnum1, imin1, imax1, init1, ifn1, icutoff1,..., ictlnum16, imin16, imax16, init16, ifn16, icutoff16" :doc "Creates a bank of 16 different MIDI control message numbers, filtered before output" :html "slider16f.html")) csdoc-opcode-database)
(puthash "slider16" (quote (:opcode "slider16" :spec "xx slider16 iiiiiiiiiii" :out "xx" :in "iiiiiiiiiii" :template "i1,...,i16 slider16 ichan, ictlnum1, imin1, imax1, init1, ifn1,..., ictlnum16, imin16, imax16, init16, ifn16
 k1,...,k16 slider16 ichan, ictlnum1, imin1, imax1, init1, ifn1,..., ictlnum16, imin16, imax16, init16, ifn16" :doc "Creates a bank of 16 different MIDI control message numbers" :html "slider16.html")) csdoc-opcode-database)
(puthash "sleighbells" (quote (:opcode "sleighbells" :spec "a sleighbells kiiiiiii" :out "a" :in "kiiiiiii" :template "ares sleighbells kamp, idettack [, inum] [, idamp] [, imaxshake] [, ifreq] [, ifreq1] [, ifreq2]" :doc "sleighbells is a semi-physical model of a sleighbell sound" :html "sleighbells.html")) csdoc-opcode-database)
(puthash "sinsyn" (quote (:opcode "sinsyn" :spec "a sinsyn fkki" :out "a" :in "fkki" :template "asig sinsyn fin, kscal, kmaxtracks, ifn" :doc "The sinsyn opcode takes an input containg a TRACKS pv streaming signal (as generated, for instance by the partials opcode)" :html "sinsyn.html")) csdoc-opcode-database)
(puthash "sininv" (quote (:function "sininv" :html "sininv.html")) csdoc-opcode-database)
(puthash "sinh" (quote (:function "sinh" :html "sinh.html")) csdoc-opcode-database)
(puthash "sin" (quote (:function "sin" :html "sin.html")) csdoc-opcode-database)
(puthash "shaker" (quote (:opcode "shaker" :spec "a shaker kkkkki" :out "a" :in "kkkkki" :template "ares shaker kamp, kfreq, kbeans, kdamp, ktimes [, idecay]" :doc "Audio output is a tone related to the shaking of a maraca or similar gourd instrument" :html "shaker.html")) csdoc-opcode-database)
(puthash "sfpreset" (quote (:opcode "sfpreset" :spec "i sfpreset iiii" :out "i" :in "iiii" :template "ir sfpreset iprog, ibank, ifilhandle, ipreindex" :doc "Assigns an existing preset of a previously loaded SoundFont2 (SF2) sample file to an index number" :html "sfpreset.html")) csdoc-opcode-database)
(puthash "sfplist" (quote (:opcode "sfplist" :spec " sfplist i" :out nil :in "i" :template "sfplist ifilhandle" :doc "Prints a list of all presets of a previously loaded SoundFont2 (SF2) sample file" :html "sfplist.html")) csdoc-opcode-database)
(puthash "sfplaym" (quote (:opcode "sfplaym" :spec "a sfplaym iixxiiii" :out "a" :in "iixxiiii" :template "ares sfplaym ivel, inotenum, xamp, xfreq, ipreindex [, iflag] [, ioffset] [, ienv]" :doc "Plays a SoundFont2 (SF2) sample preset, generating a mono sound" :html "sfplaym.html")) csdoc-opcode-database)
(puthash "sfplay3m" (quote (:opcode "sfplay3m" :spec "a sfplay3m iixxiiii" :out "a" :in "iixxiiii" :template "ares sfplay3m ivel, inotenum, xamp, xfreq, ipreindex [, iflag] [, ioffset] [, ienv]" :doc "Plays a SoundFont2 (SF2) sample preset, generating a mono sound with cubic interpolation" :html "sfplay3m.html")) csdoc-opcode-database)
(puthash "sfplay3" (quote (:opcode "sfplay3" :spec "aa sfplay3 iixxiiii" :out "aa" :in "iixxiiii" :template "ar1, ar2 sfplay3 ivel, inotenum, xamp, xfreq, ipreindex [, iflag] [, ioffset] [, ienv]" :doc "Plays a SoundFont2 (SF2) sample preset, generating a stereo sound with cubic interpolation" :html "sfplay3.html")) csdoc-opcode-database)
(puthash "sfplay" (quote (:opcode "sfplay" :spec "aa sfplay iixxiiii" :out "aa" :in "iixxiiii" :template "ar1, ar2 sfplay ivel, inotenum, xamp, xfreq, ipreindex [, iflag] [, ioffset] [, ienv]" :doc "Plays a SoundFont2 (SF2) sample preset, generating a stereo sound" :html "sfplay.html")) csdoc-opcode-database)
(puthash "sfpassign" (quote (:opcode "sfpassign" :spec " sfpassign iii" :out nil :in "iii" :template "sfpassign istartindex, ifilhandle[, imsgs]" :doc "Assigns all presets of a previously loaded SoundFont2 (SF2) sample file to a sequence of progressive index numbers" :html "sfpassign.html")) csdoc-opcode-database)
(puthash "sflooper" (quote (:opcode "sflooper" :spec "aa sflooper iikkikkkiiiii" :out "aa" :in "iikkikkkiiiii" :template "ar1, ar2 sflooper ivel, inotenum, kamp, kpitch, ipreindex, kloopstart, kloopend, kcrossfade, ifn [, istart, imode, ifenv, iskip]" :doc "Plays a SoundFont2 (SF2) sample preset, generating a stereo sound, similarly to sfplay" :html "sflooper.html")) csdoc-opcode-database)
(puthash "sfload" (quote (:opcode "sfload" :spec "i sfload \"" :out "i" :in "\"" :template "ir sfload \"filename\"" :doc "Loads an entire SoundFont2 (SF2) sample file into memory" :html "sfload.html")) csdoc-opcode-database)
(puthash "sfinstrm" (quote (:opcode "sfinstrm" :spec "a sfinstrm iixxiiii" :out "a" :in "iixxiiii" :template "ares sfinstrm ivel, inotenum, xamp, xfreq, instrnum, ifilhandle [, iflag] [, ioffset]" :doc "Plays a SoundFont2 (SF2) sample instrument, generating a mono sound" :html "sfinstrm.html")) csdoc-opcode-database)
(puthash "sfinstr3m" (quote (:opcode "sfinstr3m" :spec "a sfinstr3m iixxiiii" :out "a" :in "iixxiiii" :template "ares sfinstr3m ivel, inotenum, xamp, xfreq, instrnum, ifilhandle [, iflag] [, ioffset]" :doc "Plays a SoundFont2 (SF2) sample instrument, generating a mono sound with cubic interpolation" :html "sfinstr3m.html")) csdoc-opcode-database)
(puthash "sfinstr3" (quote (:opcode "sfinstr3" :spec "aa sfinstr3 iixxiiii" :out "aa" :in "iixxiiii" :template "ar1, ar2 sfinstr3 ivel, inotenum, xamp, xfreq, instrnum, ifilhandle [, iflag] [, ioffset]" :doc "Plays a SoundFont2 (SF2) sample instrument, generating a stereo sound with cubic interpolation" :html "sfinstr3.html")) csdoc-opcode-database)
(puthash "sfinstr" (quote (:opcode "sfinstr" :spec "aa sfinstr iixxiiii" :out "aa" :in "iixxiiii" :template "ar1, ar2 sfinstr ivel, inotenum, xamp, xfreq, instrnum, ifilhandle [, iflag] [, ioffset]" :doc "Plays a SoundFont2 (SF2) sample instrument, generating a stereo sound" :html "sfinstr.html")) csdoc-opcode-database)
(puthash "sfilist" (quote (:opcode "sfilist" :spec " sfilist i" :out nil :in "i" :template "sfilist ifilhandle" :doc "Prints a list of all instruments of a previously loaded SoundFont2 (SF2) sample file" :html "sfilist.html")) csdoc-opcode-database)
(puthash "setscorepos" (quote (:opcode "setscorepos" :spec " setscorepos i" :out nil :in "i" :template "setscorepos ipos" :doc "Sets the playback position of the current score performance to a given position" :html "setscorepos.html")) csdoc-opcode-database)
(puthash "setksmps" (quote (:opcode "setksmps" :spec " setksmps i" :out nil :in "i" :template "setksmps iksmps" :doc "Sets the local ksmps value in a user-defined opcode block" :html "setksmps.html")) csdoc-opcode-database)
(puthash "setctrl" (quote (:opcode "setctrl" :spec " setctrl iii" :out nil :in "iii" :template "setctrl inum, ival, itype" :doc "Configurable slider controls for realtime user input" :html "setctrl.html")) csdoc-opcode-database)
(puthash "seqtime2" (quote (:opcode "seqtime2" :spec "k seqtime2 kkkkkk" :out "k" :in "kkkkkk" :template "ktrig_out seqtime2 ktrig_in, ktime_unit, kstart, kloop, kinitndx, kfn_times" :doc "Generates a trigger signal according to the values stored in a table" :html "seqtime2.html")) csdoc-opcode-database)
(puthash "seqtime" (quote (:opcode "seqtime" :spec "k seqtime kkkkk" :out "k" :in "kkkkk" :template "ktrig_out seqtime ktime_unit, kstart, kloop, kinitndx, kfn_times" :doc "Generates a trigger signal according to the values stored in a table" :html "seqtime.html")) csdoc-opcode-database)
(puthash "sensekey" (quote (:opcode "sensekey" :spec "kk sensekey " :out "kk" :in nil :template "kres[, kkeydown] sensekey" :doc "Returns the ASCII code of a key that has been pressed, or -1 if no key has been pressed" :html "sensekey.html")) csdoc-opcode-database)
(puthash "semitone" (quote (:function "semitone" :html "semitone.html")) csdoc-opcode-database)
(puthash "sekere" (quote (:opcode "sekere" :spec "a sekere iiiii" :out "a" :in "iiiii" :template "ares sekere iamp, idettack [, inum] [, idamp] [, imaxshake]" :doc "sekere is a semi-physical model of a sekere sound" :html "sekere.html")) csdoc-opcode-database)
(puthash "seed" (quote (:opcode "seed" :spec " seed i" :out nil :in "i" :template "seed ival" :doc "Sets the global seed value for all x-class noise generators, as well as other opcodes that use a random call, such as grain" :html "seed.html")) csdoc-opcode-database)
(puthash "schedwhen" (quote (:opcode "schedwhen" :spec " schedwhen kxkkii" :out nil :in "kxkkii" :template "schedwhen ktrigger, kinsnum, kwhen, kdur [, ip4] [, ip5] [...]
 schedwhen ktrigger, \"insname\", kwhen, kdur [, ip4] [, ip5] [...]" :doc "Adds a new score event" :html "schedwhen.html")) csdoc-opcode-database)
(puthash "schedule" (quote (:opcode "schedule" :spec " schedule Xiiii" :out nil :in "Xiiii" :template "schedule insnum, iwhen, idur [, ip4] [, ip5] [...]
 schedule \"insname\", iwhen, idur [, ip4] [, ip5] [...]" :doc "Adds a new score event" :html "schedule.html")) csdoc-opcode-database)
(puthash "schedkwhennamed" (quote (:opcode "schedkwhennamed" :spec " schedkwhennamed kkk\"kkii" :out nil :in "kkk\"kkii" :template "schedkwhennamed ktrigger, kmintim, kmaxnum, \"name\", kwhen, kdur [, ip4] [, ip5] [...]" :doc "Similar to schedkwhen but uses a named instrument at init-time" :html "schedkwhennamed.html")) csdoc-opcode-database)
(puthash "schedkwhen" (quote (:opcode "schedkwhen" :spec " schedkwhen kkkxkkii" :out nil :in "kkkxkkii" :template "schedkwhen ktrigger, kmintim, kmaxnum, kinsnum, kwhen, kdur [, ip4] [, ip5] [...]
 schedkwhen ktrigger, kmintim, kmaxnum, \"insname\", kwhen, kdur [, ip4] [, ip5] [...]" :doc "Adds a new score event generated by a k-rate trigger" :html "schedkwhen.html")) csdoc-opcode-database)
(puthash "scoreline_i" (quote (:opcode "scoreline_i" :spec " scoreline_i S" :out nil :in "S" :template "scoreline_i Sin" :doc "scoreline_i will issue score events at i-time" :html "scoreline_i.html")) csdoc-opcode-database)
(puthash "scoreline" (quote (:opcode "scoreline" :spec " scoreline Sk" :out nil :in "Sk" :template "scoreline Sin, ktrig" :doc "Scoreline will issue one or more score events, if ktrig is 1 every k-period" :html "scoreline.html")) csdoc-opcode-database)
(puthash "scanu" (quote (:opcode "scanu" :spec " scanu iiiiiiikkkkiikkaii" :out nil :in "iiiiiiikkkkiikkaii" :template "scanu init, irate, ifnvel, ifnmass, ifnstif, ifncentr, ifndamp, kmass, kstif, kcentr, kdamp, ileft, iright, kpos, kstrngth, ain, idisp, id" :doc "Compute the waveform and the wavetable for use in scanned synthesis" :html "scanu.html")) csdoc-opcode-database)
(puthash "scantable" (quote (:opcode "scantable" :spec "a scantable kkiiiii" :out "a" :in "kkiiiii" :template "aout scantable kamp, kpch, ipos, imass, istiff, idamp, ivel" :doc "A simpler scanned synthesis implementation" :html "scantable.html")) csdoc-opcode-database)
(puthash "scans" (quote (:opcode "scans" :spec "a scans kkiii" :out "a" :in "kkiii" :template "ares scans kamp, kfreq, ifn, id [, iorder]" :doc "Generate audio output using scanned synthesis" :html "scans.html")) csdoc-opcode-database)
(puthash "scanhammer" (quote (:opcode "scanhammer" :spec " scanhammer iiii" :out nil :in "iiii" :template "scanhammer isrc, idst, ipos, imult" :doc "This is is a variant of tablecopy, copying from one table to another, starting at ipos, and with a gain control" :html "scanhammer.html")) csdoc-opcode-database)
(puthash "sandpaper" (quote (:opcode "sandpaper" :spec "a sandpaper iiiii" :out "a" :in "iiiii" :template "ares sandpaper iamp, idettack [, inum] [, idamp] [, imaxshake]" :doc "sandpaper is a semi-physical model of a sandpaper sound" :html "sandpaper.html")) csdoc-opcode-database)
(puthash "samphold" (quote (:opcode "samphold" :spec "x samphold xxii" :out "x" :in "xxii" :template "ares samphold asig, agate [, ival] [, ivstor]
 kres samphold ksig, kgate [, ival] [, ivstor]" :doc "Performs a sample-and-hold operation on its input" :html "samphold.html")) csdoc-opcode-database)
(puthash "scale" (quote (:opcode "scale" :spec "k scale kkk" :out "k" :in "kkk" :template "kscl scale kinput, kmax, kmin" :doc "Scales incoming value to user-definable range" :html "scale.html")) csdoc-opcode-database)
(puthash "s32b14" (quote (:opcode "s32b14" :spec "xx s32b14 iiiiiiiiiiiii" :out "xx" :in "iiiiiiiiiiiii" :template "i1,...,i32 s32b14 ichan, ictlno_msb1, ictlno_lsb1, imin1, imax1, initvalue1, ifn1,..., ictlno_msb32, ictlno_lsb32, imin32, imax32, initvalue32, ifn32
 k1,...,k32 s32b14 ichan, ictlno_msb1, ictlno_lsb1, imin1, imax1, initvalue1, ifn1,..., ictlno_msb32, ictlno_lsb32, imin32, imax32, initvalue32, ifn32" :doc "Creates a bank of 32 different 14-bit MIDI control message numbers" :html "s32b14.html")) csdoc-opcode-database)
(puthash "s16b14" (quote (:opcode "s16b14" :spec "xx s16b14 iiiiiiiiiiiii" :out "xx" :in "iiiiiiiiiiiii" :template "i1,...,i16 s16b14 ichan, ictlno_msb1, ictlno_lsb1, imin1, imax1, initvalue1, ifn1,..., ictlno_msb16, ictlno_lsb16, imin16, imax16, initvalue16, ifn16
 k1,...,k16 s16b14 ichan, ictlno_msb1, ictlno_lsb1, imin1, imax1, initvalue1, ifn1,..., ictlno_msb16, ictlno_lsb16, imin16, imax16, initvalue16, ifn16" :doc "Creates a bank of 16 different 14-bit MIDI control message numbers" :html "s16b14.html")) csdoc-opcode-database)
(puthash "rtclock" (quote (:opcode "rtclock" :spec "x rtclock " :out "x" :in nil :template "ires rtclock
 kres rtclock" :doc "Read the real-time clock from the operating system" :html "rtclock.html")) csdoc-opcode-database)
(puthash "rspline" (quote (:opcode "rspline" :spec "x rspline xxkk" :out "x" :in "xxkk" :template "ares rspline xrangeMin, xrangeMax, kcpsMin, kcpsMax
 kres rspline krangeMin, krangeMax, kcpsMin, kcpsMax" :doc "Generate random spline curves" :html "rspline.html")) csdoc-opcode-database)
(puthash "round" (quote (:function "round" :html "round.html")) csdoc-opcode-database)
(puthash "rnd31" (quote (:opcode "rnd31" :spec "x rnd31 xxi" :out "x" :in "xxi" :template "ax rnd31 kscl, krpow [, iseed]
 ix rnd31 iscl, irpow [, iseed]
 kx rnd31 kscl, krpow [, iseed]" :doc "31-bit bipolar random opcodes with controllable distribution" :html "rnd31.html")) csdoc-opcode-database)
(puthash "rnd" (quote (:function "rnd" :html "rnd.html")) csdoc-opcode-database)
(puthash "rms" (quote (:opcode "rms" :spec "k rms aii" :out "k" :in "aii" :template "kres rms asig [, ihp] [, iskip]" :doc "Determines the root-mean-square amplitude of an audio signal" :html "rms.html")) csdoc-opcode-database)
(puthash "rireturn" (quote (:opcode "rireturn" :spec " rireturn " :out nil :in nil :template "rireturn" :doc "Terminates a reinit pass (i" :html "rireturn.html")) csdoc-opcode-database)
(puthash "rigoto" (quote (:opcode "rigoto" :spec " rigoto l" :out nil :in "l" :template "rigoto label" :doc "Similar to igoto, but effective only during a reinit pass (i" :html "rigoto.html")) csdoc-opcode-database)
(puthash "rezzy" (quote (:opcode "rezzy" :spec "a rezzy axxii" :out "a" :in "axxii" :template "ares rezzy asig, xfco, xres [, imode, iskip]" :doc "A resonant low-pass filter" :html "rezzy.html")) csdoc-opcode-database)
(puthash "rewindscore" (quote (:opcode "rewindscore" :spec " rewindscore " :out nil :in nil :template "rewindscore" :doc "Rewinds the playback position of the current score performance" :html "rewindscore.html")) csdoc-opcode-database)
(puthash "reverbsc" (quote (:opcode "reverbsc" :spec "aa reverbsc aakkiii" :out "aa" :in "aakkiii" :template "aoutL, aoutR reverbsc ainL, ainR, kfblvl, kfco[, israte[, ipitchm[, iskip]]]" :doc "8 delay line stereo FDN reverb, with feedback matrix based upon physical modeling scattering junction of 8 lossless waveguides of equal characteristic impedance" :html "reverbsc.html")) csdoc-opcode-database)
(puthash "reverb2" (quote (:opcode "reverb2" :spec "a reverb2 akkiiiii" :out "a" :in "akkiiiii" :template "ares reverb2 asig, ktime, khdif [, iskip] [,inumCombs] [, ifnCombs] [, inumAlpas] [, ifnAlpas]" :doc "Same as the nreverb opcode" :html "reverb2.html")) csdoc-opcode-database)
(puthash "reverb" (quote (:opcode "reverb" :spec "a reverb aki" :out "a" :in "aki" :template "ares reverb asig, krvt [, iskip]" :doc "Reverberates an input signal with a “natural room” frequency response" :html "reverb.html")) csdoc-opcode-database)
(puthash "resyn" (quote (:opcode "resyn" :spec "a resyn fkkki" :out "a" :in "fkkki" :template "asig resyn fin, kscal, kpitch, kmaxtracks, ifn" :doc "The resyn opcode takes an input containg a TRACKS pv streaming signal (as generated, for instance by partials)" :html "resyn.html")) csdoc-opcode-database)
(puthash "resonz" (quote (:opcode "resonz" :spec "a resonz akkii" :out "a" :in "akkii" :template "ares resonz asig, kcf, kbw [, iscl] [, iskip]" :doc "Implementations of a second-order, two-pole two-zero bandpass filter with variable frequency response" :html "resonz.html")) csdoc-opcode-database)
(puthash "resony" (quote (:opcode "resony" :spec "a resony akkikiii" :out "a" :in "akkikiii" :template "ares resony asig, kbf, kbw, inum, ksep [, isepmode] [, iscl] [, iskip]" :doc "A bank of second-order bandpass filters, connected in parallel" :html "resony.html")) csdoc-opcode-database)
(puthash "resonxk" (quote (:opcode "resonxk" :spec "k resonxk kkkiii" :out "k" :in "kkkiii" :template "kres resonxk ksig, kcf, kbw[, inumlayer, iscl, istor]" :doc "resonxk is equivalent to a group of resonk filters, with the same arguments, serially connected" :html "resonxk.html")) csdoc-opcode-database)
(puthash "resonx" (quote (:opcode "resonx" :spec "a resonx akkiii" :out "a" :in "akkiii" :template "ares resonx asig, kcf, kbw [, inumlayer] [, iscl] [, iskip]" :doc "resonx is equivalent to a filters consisting of more layers of reson with the same arguments, serially connected" :html "resonx.html")) csdoc-opcode-database)
(puthash "resonr" (quote (:opcode "resonr" :spec "a resonr akkii" :out "a" :in "akkii" :template "ares resonr asig, kcf, kbw [, iscl] [, iskip]" :doc "Implementations of a second-order, two-pole two-zero bandpass filter with variable frequency response" :html "resonr.html")) csdoc-opcode-database)
(puthash "resonk" (quote (:opcode "resonk" :spec "k resonk kkkii" :out "k" :in "kkkii" :template "kres resonk ksig, kcf, kbw [, iscl] [, iskip]" :doc "A second-order resonant filter" :html "resonk.html")) csdoc-opcode-database)
(puthash "reson" (quote (:opcode "reson" :spec "a reson akkii" :out "a" :in "akkii" :template "ares reson asig, kcf, kbw [, iscl] [, iskip]" :doc "A second-order resonant filter" :html "reson.html")) csdoc-opcode-database)
(puthash "repluck" (quote (:opcode "repluck" :spec "a repluck ikikka" :out "a" :in "ikikka" :template "ares repluck iplk, kamp, icps, kpick, krefl, axcite" :doc "repluck is an implementation of the physical model of the plucked string" :html "repluck.html")) csdoc-opcode-database)
(puthash "remove" (quote (:opcode "remove" :spec " remove i" :out nil :in "i" :template "remove insnum" :doc "Removes the definition of an instrument as long as it is not in use" :html "remove.html")) csdoc-opcode-database)
(puthash "remoteport" (quote (:opcode "remoteport" :spec " remoteport i" :out nil :in "i" :template "remoteport iportnum" :doc "Defines the port for use with the insremot, midremot, insglobal and midglobal opcodes" :html "remoteport.html")) csdoc-opcode-database)
(puthash "release" (quote (:opcode "release" :spec "k release " :out "k" :in nil :template "kflag release" :doc "Provides a way of knowing when a note off message for the current note is received" :html "release.html")) csdoc-opcode-database)
(puthash "reinit" (quote (:opcode "reinit" :spec " reinit l" :out nil :in "l" :template "reinit label" :doc "Suspends a performance while a special initialization pass is executed" :html "reinit.html")) csdoc-opcode-database)
(puthash "readk4" (quote (:opcode "readk4" :spec "kkkk readk4 iii" :out "kkkk" :in "iii" :template "kr1, kr2, kr3, kr4 readk4 ifilname, iformat, iprd" :doc "Periodically reads four orchestra control-signal values from an external file" :html "readk4.html")) csdoc-opcode-database)
(puthash "readk3" (quote (:opcode "readk3" :spec "kkk readk3 iii" :out "kkk" :in "iii" :template "kr1, kr2, kr3 readk3 ifilname, iformat, iprd" :doc "Periodically reads three orchestra control-signal values from an external file" :html "readk3.html")) csdoc-opcode-database)
(puthash "readk2" (quote (:opcode "readk2" :spec "kk readk2 iii" :out "kk" :in "iii" :template "kr1, kr2 readk2 ifilname, iformat, iprd" :doc "Periodically reads two orchestra control-signal values from an external file" :html "readk2.html")) csdoc-opcode-database)
(puthash "readk" (quote (:opcode "readk" :spec "k readk iii" :out "k" :in "iii" :template "kres readk ifilname, iformat, iprd" :doc "Periodically reads an orchestra control-signal value from a named external file in a specific format" :html "readk.html")) csdoc-opcode-database)
(puthash "readclock" (quote (:opcode "readclock" :spec "i readclock i" :out "i" :in "i" :template "ir readclock inum" :doc "Reads the value of an internal clock" :html "readclock.html")) csdoc-opcode-database)
(puthash "rbjeq" (quote (:opcode "rbjeq" :spec "a rbjeq akkkki" :out "a" :in "akkkki" :template "ar rbjeq asig, kfco, klvl, kQ, kS[, imode]" :doc "Parametric equalizer and filter opcode with 7 filter types, based on algorithm by Robert Bristow-Johnson" :html "rbjeq.html")) csdoc-opcode-database)
(puthash "randomi" (quote (:opcode "randomi" :spec "x randomi kkx" :out "x" :in "kkx" :template "ares randomi kmin, kmax, acps
 kres randomi kmin, kmax, kcps" :doc "Generates a user-controlled random number series with interpolation between each new number" :html "randomi.html")) csdoc-opcode-database)
(puthash "randomh" (quote (:opcode "randomh" :spec "x randomh kkx" :out "x" :in "kkx" :template "ares randomh kmin, kmax, acps
 kres randomh kmin, kmax, kcps" :doc "Generates random numbers with a user-defined limit and holds them for a period of time" :html "randomh.html")) csdoc-opcode-database)
(puthash "random" (quote (:opcode "random" :spec "x random xx" :out "x" :in "xx" :template "ares random kmin, kmax
 ires random imin, imax
 kres random kmin, kmax" :doc "Generates is a controlled pseudo-random number series between min and max values" :html "random.html")) csdoc-opcode-database)
(puthash "randi" (quote (:opcode "randi" :spec "x randi xxiii" :out "x" :in "xxiii" :template "ares randi xamp, xcps [, iseed] [, isize] [, ioffset]
 kres randi kamp, kcps [, iseed] [, isize] [, ioffset]" :doc "Generates a controlled random number series with interpolation between each new number" :html "randi.html")) csdoc-opcode-database)
(puthash "randh" (quote (:opcode "randh" :spec "x randh xxiii" :out "x" :in "xxiii" :template "ares randh xamp, xcps [, iseed] [, isize] [, ioffset]
 kres randh kamp, kcps [, iseed] [, isize] [, ioffset]" :doc "Generates random numbers and holds them for a period of time" :html "randh.html")) csdoc-opcode-database)
(puthash "rand" (quote (:opcode "rand" :spec "x rand xiii" :out "x" :in "xiii" :template "ares rand xamp [, iseed] [, isel] [, ioffset]
 kres rand xamp [, iseed] [, isel] [, ioffset]" :doc "Output is a controlled random number series between -amp and +amp" :html "rand.html")) csdoc-opcode-database)
(puthash "pvsynth" (quote (:opcode "pvsynth" :spec "a pvsynth fi" :out "a" :in "fi" :template "ares pvsynth fsrc, [iinit]" :doc "Resynthesise phase vocoder data (f-signal) using a FFT overlap-add" :html "pvsynth.html")) csdoc-opcode-database)
(puthash "pvsvoc" (quote (:opcode "pvsvoc" :spec "f pvsvoc ffkk" :out "f" :in "ffkk" :template "fsig pvsvoc famp, fexc, kdepth, kgain" :doc "This opcode provides support for cross-synthesis of amplitudes and frequencies" :html "pvsvoc.html")) csdoc-opcode-database)
(puthash "pvstencil" (quote (:opcode "pvstencil" :spec "f pvstencil fkki" :out "f" :in "fkki" :template "fsig pvstencil fsigin, kgain, klevel, iftable" :doc "Transforms a pvoc stream according to a masking function table; if the pvoc stream amplitude falls below the value of the function for a specific pvoc channel, it applies a gain to that channel" :html "pvstencil.html")) csdoc-opcode-database)
(puthash "pvspitch" (quote (:opcode "pvspitch" :spec "kk pvspitch fk" :out "kk" :in "fk" :template "kfr, kamp pvspitch fsig, kthresh" :doc "Track the pitch and amplitude of a PVS signal as k-rate variables" :html "pvspitch.html")) csdoc-opcode-database)
(puthash "pvsosc" (quote (:opcode "pvsosc" :spec "f pvsosc kkkiiiii" :out "f" :in "kkkiiiii" :template "fsig pvsosc kamp, kfreq, ktype, isize [,ioverlap] [, iwinsize] [, iwintype] [, iformat]" :doc "Generates periodic signal spectra in AMP-FREQ format, with the option of four wave types: 
 sawtooth-like (harmonic weight 1/n, where n is partial number) square-like (similar to 1" :html "pvsosc.html")) csdoc-opcode-database)
(puthash "pvsout" (quote (:opcode "pvsout" :spec " pvsout fk" :out nil :in "fk" :template "pvsout fsig, kchan" :doc "This opcode writes a fsig to a channel of the pvs output bus" :html "pvsout.html")) csdoc-opcode-database)
(puthash "pvsmooth" (quote (:opcode "pvsmooth" :spec "f pvsmooth fkk" :out "f" :in "fkk" :template "fsig pvsmooth fsigin, kacf, kfcf" :doc "Smooth the amplitude and frequency time functions of a pv stream using a 1st order lowpass IIR with time-varying cutoff frequency" :html "pvsmooth.html")) csdoc-opcode-database)
(puthash "pvsmorph" (quote (:opcode "pvsmorph" :spec "f pvsmorph ffkk" :out "f" :in "ffkk" :template "fsig pvsmorph fsig1, fsig2, kampint, kfrqint" :doc "Performs morphing (or interpolation) between two source fsigs" :html "pvsmorph.html")) csdoc-opcode-database)
(puthash "pvsmix" (quote (:opcode "pvsmix" :spec "f pvsmix ff" :out "f" :in "ff" :template "fsig pvsmix fsigin1, fsigin2" :doc "Mix seamlessly two pv signals" :html "pvsmix.html")) csdoc-opcode-database)
(puthash "pvsmaska" (quote (:opcode "pvsmaska" :spec "f pvsmaska fik" :out "f" :in "fik" :template "fsig pvsmaska fsrc, ifn, kdepth" :doc "Modify amplitudes of fsrc using function table, with dynamic scaling" :html "pvsmaska.html")) csdoc-opcode-database)
(puthash "pvsin" (quote (:opcode "pvsin" :spec "f pvsin kiiiii" :out "f" :in "kiiiii" :template "fsig pvsin kchan[,isize,iolap,iwinsize,iwintype,iformat]" :doc "This opcode retrieves an f-sig from the pvs in software bus, which can be used to get data from an external source, using the Csound 5 API" :html "pvsin.html")) csdoc-opcode-database)
(puthash "pvsinit" (quote (:opcode "pvsinit" :spec "f pvsinit iiiii" :out "f" :in "iiiii" :template "fsig pvsinit isize[,iolap,iwinsize,iwintype, iformat]" :doc "Fermorms the equavent to an init operation on an f-variable" :html "pvsinit.html")) csdoc-opcode-database)
(puthash "pvsinfo" (quote (:opcode "pvsinfo" :spec "iiii pvsinfo f" :out "iiii" :in "f" :template "ioverlap, inumbins, iwinsize, iformat pvsinfo fsrc" :doc "Get format information about fsrc, whether created by an opcode such as pvsanal, or obtained from a PVOCEX file by pvsfread" :html "pvsinfo.html")) csdoc-opcode-database)
(puthash "pvsifd" (quote (:opcode "pvsifd" :spec "ff pvsifd aiiii" :out "ff" :in "aiiii" :template "ffr,fphs pvsifd ain, ifftsize, ihopsize, iwintype[,iscal]" :doc "The pvsifd opcode takes an input a-rate signal and performs an Instantaneous Frequency, magnitude and phase analysis, using the STFT and pvsifd (Instantaneous Frequency Distribution), as described in Lazzarini et al, \"Time-stretching using the Instantaneous Frequency Distribution and Partial Tracking\", Proc" :html "pvsifd.html")) csdoc-opcode-database)
(puthash "pvshift" (quote (:opcode "pvshift" :spec "f pvshift fkkii" :out "f" :in "fkkii" :template "fsig pvshift fsigin, kshift, klowest[, ikeepform, igain]" :doc "Shift the frequency components of a pv stream, stretching/compressingits spectrum" :html "pvshift.html")) csdoc-opcode-database)
(puthash "pvsfwrite" (quote (:opcode "pvsfwrite" :spec " pvsfwrite fi" :out nil :in "fi" :template "pvsfwrite fsig, ifile" :doc "This opcode writes a fsig to a PVOCEX file (which in turn can be read by pvsfread or other programs that support PVOCEX file input)" :html "pvsfwrite.html")) csdoc-opcode-database)
(puthash "pvsftw" (quote (:opcode "pvsftw" :spec "k pvsftw fii" :out "k" :in "fii" :template "kflag pvsftw fsrc, ifna [, ifnf]" :doc "Writes amplitude and/or frequency data to function tables" :html "pvsftw.html")) csdoc-opcode-database)
(puthash "pvsftr" (quote (:opcode "pvsftr" :spec " pvsftr fii" :out nil :in "fii" :template "pvsftr fsrc, ifna [, ifnf]" :doc "Reads amplitude and/or frequency data from function tables" :html "pvsftr.html")) csdoc-opcode-database)
(puthash "pvsfreeze" (quote (:opcode "pvsfreeze" :spec "f pvsfreeze fkk" :out "f" :in "fkk" :template "fsig pvsfreeze fsigin, kfreeza, kfreezf" :doc "This opcodes freezes the evolution of pvs stream by locking into steady amplitude and/or frequency values for each bin" :html "pvsfreeze.html")) csdoc-opcode-database)
(puthash "pvsfread" (quote (:opcode "pvsfread" :spec "f pvsfread kii" :out "f" :in "kii" :template "fsig pvsfread ktimpt, ifn [, ichan]" :doc "Create an fsig stream by reading a selected channel from a PVOC-EX analysis file loaded into memory, with frame interpolation" :html "pvsfread.html")) csdoc-opcode-database)
(puthash "pvsfilter" (quote (:opcode "pvsfilter" :spec "f pvsfilter ffki" :out "f" :in "ffki" :template "fsig pvsfilter fsigin, fsigfil, kdepth[, igain]" :doc "Multiply amplitudes of a pvoc stream by those of a secondpvoc stream, with dynamic scaling" :html "pvsfilter.html")) csdoc-opcode-database)
(puthash "pvsdisp" (quote (:opcode "pvsdisp" :spec " pvsdisp fii" :out nil :in "fii" :template "pvsdisp fsig[, ibins, iwtflg]" :doc "This opcode will display a PVS signal fsig" :html "pvsdisp.html")) csdoc-opcode-database)
(puthash "pvsdemix" (quote (:opcode "pvsdemix" :spec "f pvsdemix ffkki" :out "f" :in "ffkki" :template "fsig pvsdemix fleft, fright, kpos, kwidth, ipoints" :doc "Spectral azimuth-based de-mixing of stereo sources, with a reverse-panning result" :html "pvsdemix.html")) csdoc-opcode-database)
(puthash "pvscross" (quote (:opcode "pvscross" :spec "f pvscross ffkk" :out "f" :in "ffkk" :template "fsig pvscross fsrc, fdest, kamp1, kamp2" :doc "Performs cross-synthesis between two source fsigs" :html "pvscross.html")) csdoc-opcode-database)
(puthash "pvscent" (quote (:opcode "pvscent" :spec "k pvscent f" :out "k" :in "f" :template "kcent pvscent fsig" :doc "Calculate the spectral centroid of a signal from its discrete Fourier transform" :html "pvscent.html")) csdoc-opcode-database)
(puthash "pvscale" (quote (:opcode "pvscale" :spec "f pvscale fkii" :out "f" :in "fkii" :template "fsig pvscale fsigin, kscal[, ikeepform, igain]]" :doc "Scale the frequency components of a pv stream, resultingin pitch shift" :html "pvscale.html")) csdoc-opcode-database)
(puthash "pvsbufread" (quote (:opcode "pvsbufread" :spec "f pvsbufread kkii" :out "f" :in "kkii" :template "fsig pvsbufread ktime, khandle[, ilo, ihi]" :doc "This opcode sets up and writes to a circular buffer of length ilen (secs), giving a handle for the buffer and a time pointer, which holds the current write position (also in seconds)" :html "pvsbufread.html")) csdoc-opcode-database)
(puthash "pvsbuffer" (quote (:opcode "pvsbuffer" :spec "ik pvsbuffer fi" :out "ik" :in "fi" :template "ihandle, ktime pvsbuffer fsig, ilen" :doc "This opcode sets up and writes to a circular buffer of length ilen (secs), giving a handle for the buffer and a time pointer, which holds the current write position (also in seconds)" :html "pvsbuffer.html")) csdoc-opcode-database)
(puthash "pvsblur" (quote (:opcode "pvsblur" :spec "f pvsblur fki" :out "f" :in "fki" :template "fsig pvsblur fsigin, kblurtime, imaxdel" :doc "Average the amp/freq time functions of each analysis channel for a specified time (truncated to number of frames)" :html "pvsblur.html")) csdoc-opcode-database)
(puthash "pvsbin" (quote (:opcode "pvsbin" :spec "kk pvsbin fk" :out "kk" :in "fk" :template "kamp, kfr pvsbin fsig, kbin" :doc "Obtain the amp and freq values off a PVS signal bin as k-rate variables" :html "pvsbin.html")) csdoc-opcode-database)
(puthash "pvsbandr" (quote (:opcode "pvsbandr" :spec "f pvsbandr fxxxxk" :out "f" :in "fxxxxk" :template "fsig pvsbandr fsigin, xlowcut, xlowfull, xhighfull, xhighcut[, ktype]" :doc "Filter the pvoc frames, rejecting bins whose frequency is within a band, and with linear interpolation for transitional bands" :html "pvsbandr.html")) csdoc-opcode-database)
(puthash "pvsbandp" (quote (:opcode "pvsbandp" :spec "f pvsbandp fxxxxk" :out "f" :in "fxxxxk" :template "fsig pvsbandp fsigin, xlowcut, xlowfull, xhighfull, xhighcut[, ktype]" :doc "Filter the pvoc frames, passing bins whose frequency is within a band, and with linear interpolation for transitional bands" :html "pvsbandp.html")) csdoc-opcode-database)
(puthash "pvsarp" (quote (:opcode "pvsarp" :spec "f pvsarp fkkk" :out "f" :in "fkkk" :template "fsig pvsarp fsigin, kbin, kdepth, kgain" :doc "This opcode arpeggiates spectral components, by amplifying one bin and attenuating all the others around it" :html "pvsarp.html")) csdoc-opcode-database)
(puthash "pvsanal" (quote (:opcode "pvsanal" :spec "f pvsanal aiiiiii" :out "f" :in "aiiiiii" :template "fsig pvsanal ain, ifftsize, ioverlap, iwinsize, iwintype [, iformat] [, iinit]" :doc "Generate an fsig from a mono audio source ain, using phase vocoder overlap-add analysis" :html "pvsanal.html")) csdoc-opcode-database)
(puthash "pvsadsyn" (quote (:opcode "pvsadsyn" :spec "a pvsadsyn fikiii" :out "a" :in "fikiii" :template "ares pvsadsyn fsrc, inoscs, kfmod [, ibinoffset] [, ibinincr] [, iinit]" :doc "Resynthesize using a fast oscillator-bank" :html "pvsadsyn.html")) csdoc-opcode-database)
(puthash "pvread" (quote (:opcode "pvread" :spec "kk pvread kii" :out "kk" :in "kii" :template "kfreq, kamp pvread ktimpnt, ifile, ibin" :doc "pvread reads from a pvoc file and returns the frequency and amplitude from a single analysis channel or bin" :html "pvread.html")) csdoc-opcode-database)
(puthash "pvoc" (quote (:opcode "pvoc" :spec "a pvoc kkiiiii" :out "a" :in "kkiiiii" :template "ares pvoc ktimpnt, kfmod, ifilcod [, ispecwp] [, iextractmode] [, ifreqlim] [, igatefn]" :doc "Implements signal reconstruction using an fft-based phase vocoder" :html "pvoc.html")) csdoc-opcode-database)
(puthash "pvinterp" (quote (:opcode "pvinterp" :spec "a pvinterp kkikkkkkk" :out "a" :in "kkikkkkkk" :template "ares pvinterp ktimpnt, kfmod, ifile, kfreqscale1, kfreqscale2, kampscale1, kampscale2, kfreqinterp, kampinterp" :doc "pvinterp interpolates between the amplitudes and frequencies, on a bin by bin basis, of two phase vocoder analysis files (one from a previously called pvbufread unit and the other from within its own argument list), allowing for user defined transitions between analyzed sounds" :html "pvinterp.html")) csdoc-opcode-database)
(puthash "pvcross" (quote (:opcode "pvcross" :spec "a pvcross kkikki" :out "a" :in "kkikki" :template "ares pvcross ktimpnt, kfmod, ifile, kampscale1, kampscale2 [, ispecwp]" :doc "pvcross applies the amplitudes from one phase vocoder analysis file to the data from a second file and then performs the resynthesis" :html "pvcross.html")) csdoc-opcode-database)
(puthash "pvbufread" (quote (:opcode "pvbufread" :spec " pvbufread ki" :out nil :in "ki" :template "pvbufread ktimpnt, ifile" :doc "pvbufread reads from a pvoc file and makes the retrieved data available to any following pvinterp and pvcross units that appear in an instrument before a subsequent pvbufread (just as lpread and lpreson work together)" :html "pvbufread.html")) csdoc-opcode-database)
(puthash "pvadd" (quote (:opcode "pvadd" :spec "a pvadd kkiiiiiiii" :out "a" :in "kkiiiiiiii" :template "ares pvadd ktimpnt, kfmod, ifilcod, ifn, ibins [, ibinoffset] [, ibinincr] [, iextractmode] [, ifreqlim] [, igatefn]" :doc "pvadd reads from a pvoc file and uses the data to perform additive synthesis using an internal array of interpolating oscillators" :html "pvadd.html")) csdoc-opcode-database)
(puthash "push_f" (quote (:opcode "push_f" :spec " push_f f" :out nil :in "f" :template "push_f fsig" :doc "Pushes an f-sig frame into the global stack" :html "push_f.html")) csdoc-opcode-database)
(puthash "push" (quote (:opcode "push" :spec " push xxx" :out nil :in "xxx" :template "push xval1, [xval2, ... , xval31]
 push ival1, [ival2, ... , ival31]" :doc "Pushes a value into the global stack" :html "push.html")) csdoc-opcode-database)
(puthash "puts" (quote (:opcode "puts" :spec " puts Ski" :out nil :in "Ski" :template "puts Sstr, ktrig[, inonl]" :doc "puts prints a string with an optional newline at the end whenever the trigger signal is positive and changes" :html "puts.html")) csdoc-opcode-database)
(puthash "ptrack" (quote (:opcode "ptrack" :spec "kk ptrack aii" :out "kk" :in "aii" :template "kcps, kamp ptrack asig, ihopsize[,ipeaks]" :doc "ptrack takes an input signal, splits it into ihopsize blocks and using a STFT method, extracts an estimated pitch for its fundamental frequency as well as estimating the total amplitude of the signal in dB, relative to full-scale (0dB)" :html "ptrack.html")) csdoc-opcode-database)
(puthash "pset" (quote (:opcode "pset" :spec " pset ii" :out nil :in "ii" :template "pset icon1 [, icon2] [...]" :doc "Defines and initializes numeric arrays at orchestra load time" :html "pset.html")) csdoc-opcode-database)
(puthash "product" (quote (:opcode "product" :spec "a product aaa" :out "a" :in "aaa" :template "ares product asig1, asig2 [, asig3] [...]" :doc "Multiplies any number of a-rate signals" :html "product.html")) csdoc-opcode-database)
(puthash "prints" (quote (:opcode "prints" :spec " prints \"kk" :out nil :in "\"kk" :template "prints \"string\" [, kval1] [, kval2] [...]" :doc "Prints at init-time using a printf() style syntax" :html "prints.html")) csdoc-opcode-database)
(puthash "printks" (quote (:opcode "printks" :spec " printks \"ikk" :out nil :in "\"ikk" :template "printks \"string\", itime [, kval1] [, kval2] [...]" :doc "Prints at k-rate using a printf() style syntax" :html "printks.html")) csdoc-opcode-database)
(puthash "printk2" (quote (:opcode "printk2" :spec " printk2 ki" :out nil :in "ki" :template "printk2 kvar [, inumspaces]" :doc "Prints a new value every time a control variable changes" :html "printk2.html")) csdoc-opcode-database)
(puthash "printk" (quote (:opcode "printk" :spec " printk iki" :out nil :in "iki" :template "printk itime, kval [, ispace]" :doc "Prints one k-rate value at specified intervals" :html "printk.html")) csdoc-opcode-database)
(puthash "print" (quote (:opcode "print" :spec " print iii" :out nil :in "iii" :template "print iarg [, iarg1] [, iarg2] [...]" :doc "These units will print orchestra init-values" :html "print.html")) csdoc-opcode-database)
(puthash "prepiano" (quote (:opcode "prepiano" :spec "a prepiano iiiiiikkiiiiiiiii" :out "a" :in "iiiiiikkiiiiiiiii" :template "ares prepiano ifreq, iNS, iD, iK, iT30,iB, kbcl, kbcr, imass, ifreq, iinit, ipos, ivel, isfreq, isspread[, irattles, irubbers]
 al,ar prepiano ifreq, iNS, iD, iK, iT30,iB, kbcl, kbcr, imass, ifreq, iinit, ipos, ivel, isfreq, isspread[, irattles, irubbers]" :doc "Audio output is a tone similar to a piano string, prepared with a number of rubbers and rattles" :html "prepiano.html")) csdoc-opcode-database)
(puthash "prealloc" (quote (:opcode "prealloc" :spec " prealloc Xi" :out nil :in "Xi" :template "prealloc insnum, icount
 prealloc \"insname\", icount" :doc "Creates space for instruments but does not run them" :html "prealloc.html")) csdoc-opcode-database)
(puthash "powoftwo" (quote (:function "powoftwo" :html "powoftwo.html")) csdoc-opcode-database)
(puthash "powershape" (quote (:opcode "powershape" :spec "a powershape aki" :out "a" :in "aki" :template "aout powershape ain, kShapeAmount [, ifullscale]" :doc "The powershape opcode raises an input signal to a power with pre- and post-scaling of the signal so that the output will be in a predictable range" :html "powershape.html")) csdoc-opcode-database)
(puthash "pow" (quote (:opcode "pow" :spec "x pow xxi" :out "x" :in "xxi" :template "ares pow aarg, kpow [, inorm]
 ires pow iarg, ipow [, inorm]
 kres pow karg, kpow [, inorm]" :doc "Computes xarg to the power of kpow (or ipow) and scales the result by inorm" :html "pow.html")) csdoc-opcode-database)
(puthash "poscil3" (quote (:opcode "poscil3" :spec "x poscil3 kkii" :out "x" :in "kkii" :template "ares poscil3 kamp, kcps, ifn [, iphs]
 kres poscil3 kamp, kcps, ifn [, iphs]" :doc "High precision oscillator with cubic interpolation" :html "poscil3.html")) csdoc-opcode-database)
(puthash "poscil" (quote (:opcode "poscil" :spec "x poscil xxii" :out "x" :in "xxii" :template "ares poscil aamp, acps, ifn [, iphs]
 ares poscil aamp, kcps, ifn [, iphs]
 ares poscil kamp, acps, ifn [, iphs]
 ares poscil kamp, kcps, ifn [, iphs]
 ires poscil kamp, kcps, ifn [, iphs]
 kres poscil kamp, kcps, ifn [, iphs]" :doc "High precision oscillator" :html "poscil.html")) csdoc-opcode-database)
(puthash "portk" (quote (:opcode "portk" :spec "k portk kki" :out "k" :in "kki" :template "kres portk ksig, khtim [, isig]" :doc "Applies portamento to a step-valued control signal" :html "portk.html")) csdoc-opcode-database)
(puthash "port" (quote (:opcode "port" :spec "k port kii" :out "k" :in "kii" :template "kres port ksig, ihtim [, isig]" :doc "Applies portamento to a step-valued control signal" :html "port.html")) csdoc-opcode-database)
(puthash "pop_f" (quote (:opcode "pop_f" :spec "f pop_f " :out "f" :in nil :template "fsig pop_f" :doc "Pops an f-sig frame from the global stack" :html "pop_f.html")) csdoc-opcode-database)
(puthash "pop" (quote (:opcode "pop" :spec "xxx pop " :out "xxx" :in nil :template "xval1, [xval2, ... , xval31] pop
 ival1, [ival2, ... , ival31] pop" :doc "Pops values from the global stack" :html "pop.html")) csdoc-opcode-database)
(puthash "polynomial" (quote (:opcode "polynomial" :spec "a polynomial akkk" :out "a" :in "akkk" :template "aout polynomial ain, k0 [, k1 [, k2 [...]]]" :doc "The polynomial opcode calculates a polynomial with a single a-rate input variable" :html "polynomial.html")) csdoc-opcode-database)
(puthash "polyaft" (quote (:opcode "polyaft" :spec "x polyaft iii" :out "x" :in "iii" :template "ires polyaft inote [, ilow] [, ihigh]
 kres polyaft inote [, ilow] [, ihigh]" :doc "polyaft returns the polyphonic pressure of the selected note number, optionally mapped to an user-specified range" :html "polyaft.html")) csdoc-opcode-database)
(puthash "poisson" (quote (:opcode "poisson" :spec "x poisson k" :out "x" :in "k" :template "ares poisson klambda
 ires poisson klambda
 kres poisson klambda" :doc "Poisson distribution random number generator (positive values only)" :html "poisson.html")) csdoc-opcode-database)
(puthash "pluck" (quote (:opcode "pluck" :spec "a pluck kkiiiii" :out "a" :in "kkiiiii" :template "ares pluck kamp, kcps, icps, ifn, imeth [, iparm1] [, iparm2]" :doc "Audio output is a naturally decaying plucked string or drum sound based on the Karplus-Strong algorithms" :html "pluck.html")) csdoc-opcode-database)
(puthash "planet" (quote (:opcode "planet" :spec "aaa planet kkkiiiiiiiii" :out "aaa" :in "kkkiiiiiiiii" :template "ax, ay, az planet kmass1, kmass2, ksep, ix, iy, iz, ivx, ivy, ivz, idelta [, ifriction] [, iskip]" :doc "planet simulates a planet orbiting in a binary star system" :html "planet.html")) csdoc-opcode-database)
(puthash "pitchamdf" (quote (:opcode "pitchamdf" :spec "kk pitchamdf aiiiiiii" :out "kk" :in "aiiiiiii" :template "kcps, krms pitchamdf asig, imincps, imaxcps [, icps] [, imedi] [, idowns] [, iexcps] [, irmsmedi]" :doc "Follows the pitch of a signal based on the AMDF method (Average Magnitude Difference Function)" :html "pitchamdf.html")) csdoc-opcode-database)
(puthash "pitch" (quote (:opcode "pitch" :spec "kk pitch aiiiiiiiiiiii" :out "kk" :in "aiiiiiiiiiiii" :template "koct, kamp pitch asig, iupdte, ilo, ihi, idbthresh [, ifrqs] [, iconf] [, istrt] [, iocts] [, iq] [, inptls] [, irolloff] [, iskip]" :doc "Using the same techniques as spectrum and specptrk, pitch tracks the pitch of the signal in octave point decimal form, and amplitude in dB" :html "pitch.html")) csdoc-opcode-database)
(puthash "pinkish" (quote (:opcode "pinkish" :spec "a pinkish xiiii" :out "a" :in "xiiii" :template "ares pinkish xin [, imethod] [, inumbands] [, iseed] [, iskip]" :doc "Generates approximate pink noise (-3dB/oct response) by one of two different methods: 
 a multirate noise generator after Moore, coded by Martin Gardner
 a filter bank designed by Paul Kellet" :html "pinkish.html")) csdoc-opcode-database)
(puthash "pindex" (quote (:opcode "pindex" :spec "i pindex i" :out "i" :in "i" :template "ivalue pindex ipfieldIndex" :doc "pindex returns the value of a specified pfield" :html "pindex.html")) csdoc-opcode-database)
(puthash "phasorbnk" (quote (:opcode "phasorbnk" :spec "x phasorbnk xkii" :out "x" :in "xkii" :template "ares phasorbnk xcps, kndx, icnt [, iphs]
 kres phasorbnk kcps, kndx, icnt [, iphs]" :doc "Produce an arbitrary number of normalized moving phase values, accessable by an index" :html "phasorbnk.html")) csdoc-opcode-database)
(puthash "phasor" (quote (:opcode "phasor" :spec "x phasor xi" :out "x" :in "xi" :template "ares phasor xcps [, iphs]
 kres phasor kcps [, iphs]" :doc "Produce a normalized moving phase value" :html "phasor.html")) csdoc-opcode-database)
(puthash "phaser2" (quote (:opcode "phaser2" :spec "a phaser2 akkkkkk" :out "a" :in "akkkkkk" :template "ares phaser2 asig, kfreq, kq, kord, kmode, ksep, kfeedback" :doc "An implementation of iord number of second-order allpass filters in series" :html "phaser2.html")) csdoc-opcode-database)
(puthash "phaser1" (quote (:opcode "phaser1" :spec "a phaser1 akkki" :out "a" :in "akkki" :template "ares phaser1 asig, kfreq, kord, kfeedback [, iskip]" :doc "An implementation of iord number of first-order allpass filters in series" :html "phaser1.html")) csdoc-opcode-database)
(puthash "pgmassign" (quote (:opcode "pgmassign" :spec " pgmassign iXi" :out nil :in "iXi" :template "pgmassign ipgm, inst[, ichn]
 pgmassign ipgm, \"insname\"[, ichn]" :doc "Assigns an instrument number to a specified (or all) MIDI program(s)" :html "pgmassign.html")) csdoc-opcode-database)
(puthash "peak" (quote (:opcode "peak" :spec "k peak x" :out "k" :in "x" :template "kres peak asig
 kres peak ksig" :doc "These opcodes maintain the output k-rate variable as the peak absolute level so far received" :html "peak.html")) csdoc-opcode-database)
(puthash "pdhalfy" (quote (:opcode "pdhalfy" :spec "a pdhalfy akii" :out "a" :in "akii" :template "aout pdhalfy ain, kShapeAmount [, ibipolar [, ifullscale]]" :doc "The pdhalfy opcode is a variation on the phase distortion synthesis method of the pdhalf opcode" :html "pdhalfy.html")) csdoc-opcode-database)
(puthash "pdhalf" (quote (:opcode "pdhalf" :spec "a pdhalf akii" :out "a" :in "akii" :template "aout pdhalf ain, kShapeAmount [, ibipolar [, ifullscale]]" :doc "The pdhalf opcode is designed to emulate the \"classic\" phase distortion synthesis method of the Casio CZ-series of synthesizers from the mid-1980s" :html "pdhalf.html")) csdoc-opcode-database)
(puthash "pdclip" (quote (:opcode "pdclip" :spec "a pdclip akkii" :out "a" :in "akkii" :template "aout pdclip ain, kWidth, kCenter [, ibipolar [, ifullscale]]" :doc "The pdclip opcode allows a percentage of the input range of a signal to be clipped to fullscale" :html "pdclip.html")) csdoc-opcode-database)
(puthash "pcount" (quote (:opcode "pcount" :spec "i pcount " :out "i" :in nil :template "icount pcount" :doc "pcount returns the number of pfields belonging to a note event" :html "pcount.html")) csdoc-opcode-database)
(puthash "pconvolve" (quote (:opcode "pconvolve" :spec "aaaa pconvolve aiii" :out "aaaa" :in "aiii" :template "ar1 [, ar2] [, ar3] [, ar4] pconvolve ain, ifilcod [, ipartitionsize, ichannel]" :doc "Convolution based on a uniformly partitioned overlap-save algorithm" :html "pconvolve.html")) csdoc-opcode-database)
(puthash "pchoct" (quote (:function "pchoct" :html "pchoct.html")) csdoc-opcode-database)
(puthash "pchmidinn" (quote (:function "pchmidinn" :html "pchmidinn.html")) csdoc-opcode-database)
(puthash "pchmidib" (quote (:opcode "pchmidib" :spec "x pchmidib i" :out "x" :in "i" :template "ipch pchmidib [irange]
 kpch pchmidib [irange]" :doc "Get the note number of the current MIDI event and modify it by the current pitch-bend value, express it in pitch-class units" :html "pchmidib.html")) csdoc-opcode-database)
(puthash "pchmidi" (quote (:opcode "pchmidi" :spec "i pchmidi " :out "i" :in nil :template "ipch pchmidi" :doc "Get the note number of the current MIDI event, expressed in pitch-class units" :html "pchmidi.html")) csdoc-opcode-database)
(puthash "pchbend" (quote (:opcode "pchbend" :spec "x pchbend ii" :out "x" :in "ii" :template "ibend pchbend [imin] [, imax]
 kbend pchbend [imin] [, imax]" :doc "Get the current pitch-bend value for this channel" :html "pchbend.html")) csdoc-opcode-database)
(puthash "pcauchy" (quote (:opcode "pcauchy" :spec "x pcauchy k" :out "x" :in "k" :template "ares pcauchy kalpha
 ires pcauchy kalpha
 kres pcauchy kalpha" :doc "Cauchy distribution random number generator (positive values only)" :html "pcauchy.html")) csdoc-opcode-database)
(puthash "partikkelsync" (quote (:opcode "partikkelsync" :spec "aa partikkelsync i" :out "aa" :in "i" :template "async [,aphase] partikkelsync iopcode_id" :doc "partikkelsync is an opcode for outputting partikkels grain scheduler clock pulse and phase" :html "partikkelsync.html")) csdoc-opcode-database)
(puthash "partikkel" (quote (:opcode "partikkel" :spec "aaaaaaaa partikkel akiakiiikkkkikkiiaikikkkikkkkkiaaaakkkkii" :out "aaaaaaaa" :in "akiakiiikkkkikkiiaikikkkikkkkkiaaaakkkkii" :template "a1 [, a2, a3, a4, a5, a6, a7, a8] partikkel agrainfreq, kdistribution, idisttab, async, kenv2amt, ienv2tab, ienv_attack, ienv_decay, ksustain_amount, ka_d_ratio, kduration, kamp, igainmasks, kwavfreq, ksweepshape, iwavfreqstarttab, iwavfreqendtab, awavfm, ifmamptab, kfmenv, icosine, ktraincps, knumpartials, kchroma, ichannelmasks, krandommask, kwaveform1, kwaveform2, kwaveform3, kwaveform4, iwaveamptab, asamplepos1, asamplepos2, asamplepos3, asamplepos4, kwavekey1, kwavekey2, kwavekey3, kwavekey4, imax_grains [, iopcode_id]" :doc "partikkel was conceived after reading Curtis Roads book \"Microsound\", and the goal was to create an opcode that was capable of all time-domain varieties of granular synthesis described in this book" :html "partikkel.html")) csdoc-opcode-database)
(puthash "partials" (quote (:opcode "partials" :spec "f partials ffkkki" :out "f" :in "ffkkki" :template "ftrks partials ffr, fphs, kthresh, kminpts, kmaxgap, imaxtracks" :doc "The partials opcode takes two input PV streaming signals containg AMP_FREQ and AMP_PHASE signals (as generated for instance by pvsifd or in the first case, by pvsanal) and performs partial track analysis, as described in Lazzarini et al, \"Time-stretching using the Instantaneous Frequency Distribution and Partial Tracking\", Proc" :html "partials.html")) csdoc-opcode-database)
(puthash "pareq" (quote (:opcode "pareq" :spec "a pareq akkkii" :out "a" :in "akkkii" :template "ares pareq asig, kc, kv, kq [, imode] [, iskip]" :doc "Implementation of Zoelzers parametric equalizer filters, with some modifications by the author" :html "pareq.html")) csdoc-opcode-database)
(puthash "pan2" (quote (:opcode "pan2" :spec "aa pan2 axi" :out "aa" :in "axi" :template "a1, a2 pan2 asig, xp [, imode]" :doc "Distribute an audio signal across two channels with a choice of methods" :html "pan2.html")) csdoc-opcode-database)
(puthash "pan" (quote (:opcode "pan" :spec "aaaa pan akkiii" :out "aaaa" :in "akkiii" :template "a1, a2, a3, a4 pan asig, kx, ky, ifn [, imode] [, ioffset]" :doc "Distribute an audio signal amongst four channels with localization control" :html "pan.html")) csdoc-opcode-database)
(puthash "p" (quote (:function "p" :html "p.html")) csdoc-opcode-database)
(puthash "outz" (quote (:opcode "outz" :spec " outz k" :out nil :in "k" :template "outz ksig1" :doc "Writes multi-channel audio data from a ZAK array to an external device or stream" :html "outz.html")) csdoc-opcode-database)
(puthash "outx" (quote (:opcode "outx" :spec " outx aaaaaaaaaaaaaaaa" :out nil :in "aaaaaaaaaaaaaaaa" :template "outx asig1, asig2, asig3, asig4, asig5, asig6, asig7, asig8, asig9, asig10, asig11, asig12, asig13, asig14, asig15, asig16" :doc "Writes 16-channel audio data to an external device or stream" :html "outx.html")) csdoc-opcode-database)
(puthash "outvalue" (quote (:opcode "outvalue" :spec " outvalue \"k" :out nil :in "\"k" :template "outvalue \"channel name\", kvalue
 outvalue \"channel name\", \"string\"" :doc "Sends a k-rate signal or string to a user-defined channel" :html "outvalue.html")) csdoc-opcode-database)
(puthash "outs2" (quote (:opcode "outs2" :spec " outs2 a" :out nil :in "a" :template "outs2 asig" :doc "Writes samples to stereo channel 2 of an external device or stream" :html "outs2.html")) csdoc-opcode-database)
(puthash "outs1" (quote (:opcode "outs1" :spec " outs1 a" :out nil :in "a" :template "outs1 asig" :doc "Writes samples to stereo channel 1 of an external device or stream" :html "outs1.html")) csdoc-opcode-database)
(puthash "outs" (quote (:opcode "outs" :spec " outs aa" :out nil :in "aa" :template "outs asig1, asig2" :doc "Writes stereo audio data to an external device or stream" :html "outs.html")) csdoc-opcode-database)
(puthash "outrg" (quote (:opcode "outrg" :spec " outrg kaaaa" :out nil :in "kaaaa" :template "outrg kstart, aout1 [,aout2, aout3, ..., aoutN]" :doc "outrg outputs audio to a range of adjacent audio channels on the audio output device" :html "outrg.html")) csdoc-opcode-database)
(puthash "outq4" (quote (:opcode "outq4" :spec " outq4 a" :out nil :in "a" :template "outq4 asig" :doc "Writes samples to quad channel 4 of an external device or stream" :html "outq4.html")) csdoc-opcode-database)
(puthash "outq3" (quote (:opcode "outq3" :spec " outq3 a" :out nil :in "a" :template "outq3 asig" :doc "Writes samples to quad channel 3 of an external device or stream" :html "outq3.html")) csdoc-opcode-database)
(puthash "outq2" (quote (:opcode "outq2" :spec " outq2 a" :out nil :in "a" :template "outq2 asig" :doc "Writes samples to quad channel 2 of an external device or stream" :html "outq2.html")) csdoc-opcode-database)
(puthash "outq1" (quote (:opcode "outq1" :spec " outq1 a" :out nil :in "a" :template "outq1 asig" :doc "Writes samples to quad channel 1 of an external device or stream" :html "outq1.html")) csdoc-opcode-database)
(puthash "outq" (quote (:opcode "outq" :spec " outq aaaa" :out nil :in "aaaa" :template "outq asig1, asig2, asig3, asig4" :doc "Writes 4-channel audio data to an external device or stream" :html "outq.html")) csdoc-opcode-database)
(puthash "outo" (quote (:opcode "outo" :spec " outo aaaaaaaa" :out nil :in "aaaaaaaa" :template "outo asig1, asig2, asig3, asig4, asig5, asig6, asig7, asig8" :doc "Writes 8-channel audio data to an external device or stream" :html "outo.html")) csdoc-opcode-database)
(puthash "outletf" (quote (:opcode "outletf" :spec " outletf Sf" :out nil :in "Sf" :template "outletf Sname, fsignal" :doc "Sends a frate signal (fsig) out from an instrument to a named port" :html "outletf.html")) csdoc-opcode-database)
(puthash "outletk" (quote (:opcode "outletk" :spec " outletk Sk" :out nil :in "Sk" :template "outletk Sname, ksignal" :doc "Sends a krate signal out from an instrument to a named port" :html "outletk.html")) csdoc-opcode-database)
(puthash "outleta" (quote (:opcode "outleta" :spec " outleta Sa" :out nil :in "Sa" :template "outleta Sname, asignal" :doc "Sends an arate signal out from an instrument to a named port" :html "outleta.html")) csdoc-opcode-database)
(puthash "outkpc" (quote (:opcode "outkpc" :spec " outkpc kkkk" :out nil :in "kkkk" :template "outkpc kchn, kprog, kmin, kmax" :doc "Sends MIDI program change messages at k-rate" :html "outkpc.html")) csdoc-opcode-database)
(puthash "outkpb" (quote (:opcode "outkpb" :spec " outkpb kkkk" :out nil :in "kkkk" :template "outkpb kchn, kvalue, kmin, kmax" :doc "Sends MIDI pitch-bend messages at k-rate" :html "outkpb.html")) csdoc-opcode-database)
(puthash "outkpat" (quote (:opcode "outkpat" :spec " outkpat kkkkk" :out nil :in "kkkkk" :template "outkpat kchn, knotenum, kvalue, kmin, kmax" :doc "Sends polyphonic MIDI aftertouch messages at k-rate" :html "outkpat.html")) csdoc-opcode-database)
(puthash "outkc14" (quote (:opcode "outkc14" :spec " outkc14 kkkkkk" :out nil :in "kkkkkk" :template "outkc14 kchn, kmsb, klsb, kvalue, kmin, kmax" :doc "Sends 14-bit MIDI controller output at k-rate" :html "outkc14.html")) csdoc-opcode-database)
(puthash "outkc" (quote (:opcode "outkc" :spec " outkc kkkkk" :out nil :in "kkkkk" :template "outkc kchn, knum, kvalue, kmin, kmax" :doc "Sends MIDI controller messages at k-rate" :html "outkc.html")) csdoc-opcode-database)
(puthash "outkat" (quote (:opcode "outkat" :spec " outkat kkkk" :out nil :in "kkkk" :template "outkat kchn, kvalue, kmin, kmax" :doc "Sends MIDI aftertouch messages at k-rate" :html "outkat.html")) csdoc-opcode-database)
(puthash "outipc" (quote (:opcode "outipc" :spec " outipc iiii" :out nil :in "iiii" :template "outipc ichn, iprog, imin, imax" :doc "Sends MIDI program change messages at i-rate" :html "outipc.html")) csdoc-opcode-database)
(puthash "outipb" (quote (:opcode "outipb" :spec " outipb iiii" :out nil :in "iiii" :template "outipb ichn, ivalue, imin, imax" :doc "Sends MIDI pitch-bend messages at i-rate" :html "outipb.html")) csdoc-opcode-database)
(puthash "outipat" (quote (:opcode "outipat" :spec " outipat iiiii" :out nil :in "iiiii" :template "outipat ichn, inotenum, ivalue, imin, imax" :doc "Sends polyphonic MIDI aftertouch messages at i-rate" :html "outipat.html")) csdoc-opcode-database)
(puthash "outic14" (quote (:opcode "outic14" :spec " outic14 iiiiii" :out nil :in "iiiiii" :template "outic14 ichn, imsb, ilsb, ivalue, imin, imax" :doc "Sends 14-bit MIDI controller output at i-rate" :html "outic14.html")) csdoc-opcode-database)
(puthash "outic" (quote (:opcode "outic" :spec " outic iiiii" :out nil :in "iiiii" :template "outic ichn, inum, ivalue, imin, imax" :doc "Sends MIDI controller output at i-rate" :html "outic.html")) csdoc-opcode-database)
(puthash "outiat" (quote (:opcode "outiat" :spec " outiat iiii" :out nil :in "iiii" :template "outiat ichn, ivalue, imin, imax" :doc "Sends MIDI aftertouch messages at i-rate" :html "outiat.html")) csdoc-opcode-database)
(puthash "outh" (quote (:opcode "outh" :spec " outh aaaaaa" :out nil :in "aaaaaa" :template "outh asig1, asig2, asig3, asig4, asig5, asig6" :doc "Writes 6-channel audio data to an external device or stream" :html "outh.html")) csdoc-opcode-database)
(puthash "outch" (quote (:opcode "outch" :spec " outch kaka" :out nil :in "kaka" :template "outch kchan1, asig1 [, kchan2] [, asig2] [...]" :doc "Writes multi-channel audio data, with user-controllable channels, to an external device or stream" :html "outch.html")) csdoc-opcode-database)
(puthash "outc" (quote (:opcode "outc" :spec " outc aa" :out nil :in "aa" :template "outc asig1 [, asig2] [...]" :doc "Writes audio data with an arbitrary number of channels to an external device or stream" :html "outc.html")) csdoc-opcode-database)
(puthash "out32" (quote (:opcode "out32" :spec " out32 aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" :out nil :in "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" :template "out32 asig1, asig2, asig3, asig4, asig5, asig6, asig7, asig8, asig10, asig11, asig12, asig13, asig14, asig15, asig16, asig17, asig18, asig19, asig20, asig21, asig22, asig23, asig24, asig25, asig26, asig27, asig28, asig29, asig30, asig31, asig32" :doc "Writes 32-channel audio data to an external device or stream" :html "out32.html")) csdoc-opcode-database)
(puthash "out" (quote (:opcode "out" :spec " out a" :out nil :in "a" :template "out asig" :doc "Writes mono audio data to an external device or stream" :html "out.html")) csdoc-opcode-database)
(puthash "oscils" (quote (:opcode "oscils" :spec "a oscils iiii" :out "a" :in "iiii" :template "ares oscils iamp, icps, iphs [, iflg]" :doc "Simple, fast sine oscillator, that uses only one multiply, and two add operations to generate one sample of output, and does not require a function table" :html "oscils.html")) csdoc-opcode-database)
(puthash "osciln" (quote (:opcode "osciln" :spec "a osciln kiii" :out "a" :in "kiii" :template "ares osciln kamp, ifrq, ifn, itimes" :doc "Accesses table values at a user-defined frequency" :html "osciln.html")) csdoc-opcode-database)
(puthash "oscilikts" (quote (:opcode "oscilikts" :spec "a oscilikts xxkaki" :out "a" :in "xxkaki" :template "ares oscilikts xamp, xcps, kfn, async, kphs [, istor]" :doc "oscilikts is the same as oscilikt" :html "oscilikts.html")) csdoc-opcode-database)
(puthash "osciliktp" (quote (:opcode "osciliktp" :spec "a osciliktp kkki" :out "a" :in "kkki" :template "ares osciliktp kcps, kfn, kphs [, istor]" :doc "osciliktp allows phase modulation (which is actually implemented as k-rate frequency modulation, by differentiating phase input)" :html "osciliktp.html")) csdoc-opcode-database)
(puthash "oscilikt" (quote (:opcode "oscilikt" :spec "x oscilikt xxkii" :out "x" :in "xxkii" :template "ares oscilikt xamp, xcps, kfn [, iphs] [, istor]
 kres oscilikt kamp, kcps, kfn [, iphs] [, istor]" :doc "oscilikt is very similar to oscili, but allows changing the table number at k-rate" :html "oscilikt.html")) csdoc-opcode-database)
(puthash "oscili" (quote (:opcode "oscili" :spec "x oscili xxii" :out "x" :in "xxii" :template "ares oscili xamp, xcps, ifn [, iphs]
 kres oscili kamp, kcps, ifn [, iphs]" :doc "oscili reads table ifn sequentially and repeatedly at a frequency xcps" :html "oscili.html")) csdoc-opcode-database)
(puthash "oscil3" (quote (:opcode "oscil3" :spec "x oscil3 xxii" :out "x" :in "xxii" :template "ares oscil3 xamp, xcps, ifn [, iphs]
 kres oscil3 kamp, kcps, ifn [, iphs]" :doc "oscil3 reads table ifn sequentially and repeatedly at a frequency xcps" :html "oscil3.html")) csdoc-opcode-database)
(puthash "oscil1i" (quote (:opcode "oscil1i" :spec "k oscil1i ikii" :out "k" :in "ikii" :template "kres oscil1i idel, kamp, idur, ifn" :doc "Accesses table values by incremental sampling with linear interpolation" :html "oscil1i.html")) csdoc-opcode-database)
(puthash "oscil1" (quote (:opcode "oscil1" :spec "k oscil1 ikii" :out "k" :in "ikii" :template "kres oscil1 idel, kamp, idur, ifn" :doc "Accesses table values by incremental sampling" :html "oscil1.html")) csdoc-opcode-database)
(puthash "oscil" (quote (:opcode "oscil" :spec "x oscil xxii" :out "x" :in "xxii" :template "ares oscil xamp, xcps, ifn [, iphs]
 kres oscil kamp, kcps, ifn [, iphs]" :doc "oscil reads table ifn sequentially and repeatedly at a frequency xcps" :html "oscil.html")) csdoc-opcode-database)
(puthash "oscbnk" (quote (:opcode "oscbnk" :spec "a oscbnk kkkkiikkkkikkkkkkikiiiiiii" :out "a" :in "kkkkiikkkkikkkkkkikiiiiiii" :template "ares oscbnk kcps, kamd, kfmd, kpmd, iovrlap, iseed, kl1minf, kl1maxf, kl2minf, kl2maxf, ilfomode, keqminf, keqmaxf, keqminl, keqmaxl, keqminq, keqmaxq, ieqmode, kfn [, il1fn] [, il2fn] [, ieqffn] [, ieqlfn] [, ieqqfn] [, itabl] [, ioutfn]" :doc "This unit generator mixes the output of any number of oscillators" :html "oscbnk.html")) csdoc-opcode-database)
(puthash "OSClisten" (quote (:opcode "OSClisten" :spec "k OSClisten iiixx" :out "k" :in "iiixx" :template "kans OSClisten ihandle, idest, itype [, xdata1, xdata2, ...]" :doc "On each k-cycle looks to see if an OSC message has been send to a given path of a given type" :html "OSClisten.html")) csdoc-opcode-database)
(puthash "OSCinit" (quote (:opcode "OSCinit" :spec "i OSCinit i" :out "i" :in "i" :template "ihandle OSCinit iport" :doc "Starts a listening process, which can be used by OSClisten" :html "OSCinit.html")) csdoc-opcode-database)
(puthash "OSCsend" (quote (:opcode "OSCsend" :spec " OSCsend kiiiikk" :out nil :in "kiiiikk" :template "OSCsend kwhen, ihost, iport, idestination, itype [, kdata1, kdata2, ...]" :doc "Uses the OSC protocol to send message to other OSC listening processes" :html "OSCsend.html")) csdoc-opcode-database)
(puthash "octpch" (quote (:function "octpch" :html "octpch.html")) csdoc-opcode-database)
(puthash "octmidinn" (quote (:function "octmidinn" :html "octmidinn.html")) csdoc-opcode-database)
(puthash "octmidib" (quote (:opcode "octmidib" :spec "x octmidib i" :out "x" :in "i" :template "ioct octmidib [irange]
 koct octmidib [irange]" :doc "Get the note number of the current MIDI event and modify it by the current pitch-bend value, express it in octave-point-decimal" :html "octmidib.html")) csdoc-opcode-database)
(puthash "octmidi" (quote (:opcode "octmidi" :spec "i octmidi " :out "i" :in nil :template "ioct octmidi" :doc "Get the note number, in octave-point-decimal units, of the current MIDI event" :html "octmidi.html")) csdoc-opcode-database)
(puthash "octcps" (quote (:function "octcps" :html "octcps.html")) csdoc-opcode-database)
(puthash "octave" (quote (:function "octave" :html "octave.html")) csdoc-opcode-database)
(puthash "ntrpol" (quote (:opcode "ntrpol" :spec "x ntrpol xxxii" :out "x" :in "xxxii" :template "ares ntrpol asig1, asig2, kpoint [, imin] [, imax]
 ires ntrpol isig1, isig2, ipoint [, imin] [, imax]
 kres ntrpol ksig1, ksig2, kpoint [, imin] [, imax]" :doc "Calculates the weighted mean value (i" :html "ntrpol.html")) csdoc-opcode-database)
(puthash "nstrnum" (quote (:opcode "nstrnum" :spec "i nstrnum \"" :out "i" :in "\"" :template "insno nstrnum \"name\"" :doc "Returns the number of a named instrument" :html "nstrnum.html")) csdoc-opcode-database)
(puthash "nsamp" (quote (:function "nsamp" :html "nsamp.html")) csdoc-opcode-database)
(puthash "nrpn" (quote (:opcode "nrpn" :spec " nrpn kkk" :out nil :in "kkk" :template "nrpn kchan, kparmnum, kparmvalue" :doc "Sends a NPRN (Non-Registered Parameter Number) message to the MIDI OUT port each time one of the input arguments changes" :html "nrpn.html")) csdoc-opcode-database)
(puthash "nreverb" (quote (:opcode "nreverb" :spec "a nreverb akkiiiii" :out "a" :in "akkiiiii" :template "ares nreverb asig, ktime, khdif [, iskip] [,inumCombs] [, ifnCombs] [, inumAlpas] [, ifnAlpas]" :doc "This is a reverberator consisting of 6 parallel comb-lowpass filters being fed into a series of 5 allpass filters" :html "nreverb.html")) csdoc-opcode-database)
(puthash "notnum" (quote (:opcode "notnum" :spec "i notnum " :out "i" :in nil :template "ival notnum" :doc "Get a note number from a MIDI event" :html "notnum.html")) csdoc-opcode-database)
(puthash "noteondur2" (quote (:opcode "noteondur2" :spec " noteondur2 iiii" :out nil :in "iiii" :template "noteondur2 ichn, inum, ivel, idur" :doc "Sends a noteon and a noteoff MIDI message both with the same channel, number and velocity" :html "noteondur2.html")) csdoc-opcode-database)
(puthash "noteondur" (quote (:opcode "noteondur" :spec " noteondur iiii" :out nil :in "iiii" :template "noteondur ichn, inum, ivel, idur" :doc "Sends a noteon and a noteoff MIDI message both with the same channel, number and velocity" :html "noteondur.html")) csdoc-opcode-database)
(puthash "noteon" (quote (:opcode "noteon" :spec " noteon iii" :out nil :in "iii" :template "noteon ichn, inum, ivel" :doc "Send a noteon message to the MIDI OUT port" :html "noteon.html")) csdoc-opcode-database)
(puthash "noteoff" (quote (:opcode "noteoff" :spec " noteoff iii" :out nil :in "iii" :template "noteoff ichn, inum, ivel" :doc "Send a noteoff message to the MIDI OUT port" :html "noteoff.html")) csdoc-opcode-database)
(puthash "noise" (quote (:opcode "noise" :spec "a noise xk" :out "a" :in "xk" :template "ares noise xamp, kbeta" :doc "A white noise generator with an IIR lowpass filter" :html "noise.html")) csdoc-opcode-database)
(puthash "nlfilt" (quote (:opcode "nlfilt" :spec "a nlfilt akkkkk" :out "a" :in "akkkkk" :template "ares nlfilt ain, ka, kb, kd, kC, kL" :doc "Implements the filter: 
 Y{n} =a Y{n-1} + b Y{n-2} + d Y^2{n-L} + X{n} - C       " :html "nlfilt.html")) csdoc-opcode-database)
(puthash "nestedap" (quote (:opcode "nestedap" :spec "a nestedap aiiiiiiiii" :out "a" :in "aiiiiiiiii" :template "ares nestedap asig, imode, imaxdel, idel1, igain1 [, idel2] [, igain2] [, idel3] [, igain3] [, istor]" :doc "Three different nested all-pass filters, useful for implementing reverbs" :html "nestedap.html")) csdoc-opcode-database)
(puthash "mxadsr" (quote (:opcode "mxadsr" :spec "x mxadsr iiiiii" :out "x" :in "iiiiii" :template "ares mxadsr iatt, idec, islev, irel [, idel] [, ireltim]
 kres mxadsr iatt, idec, islev, irel [, idel] [, ireltim]" :doc "Calculates the classical ADSR envelope using the expsegr mechanism" :html "mxadsr.html")) csdoc-opcode-database)
(puthash "mute" (quote (:opcode "mute" :spec " mute Xi" :out nil :in "Xi" :template "mute insnum [, iswitch]
 mute \"insname\" [, iswitch]" :doc "Mutes/unmutes new instances of a given instrument" :html "mute.html")) csdoc-opcode-database)
(puthash "multitap" (quote (:opcode "multitap" :spec "a multitap aiiii" :out "a" :in "aiiii" :template "ares multitap asig [, itime1] [, igain1] [, itime2] [, igain2] [...]" :doc "Multitap delay line implementation" :html "multitap.html")) csdoc-opcode-database)
(puthash "mrtmsg" (quote (:opcode "mrtmsg" :spec " mrtmsg i" :out nil :in "i" :template "mrtmsg imsgtype" :doc "Send system real-time messages to the MIDI OUT port" :html "mrtmsg.html")) csdoc-opcode-database)
(puthash "mpulse" (quote (:opcode "mpulse" :spec "a mpulse kki" :out "a" :in "kki" :template "ares mpulse kamp, kintvl [, ioffset]" :doc "Generates a set of impulses of amplitude kamp separated by kintvl seconds (or samples if kintvl is negative)" :html "mpulse.html")) csdoc-opcode-database)
(puthash "mp3in" (quote (:opcode "mp3in" :spec "aa mp3in iiiii" :out "aa" :in "iiiii" :template "ar1, ar2 mp3in ifilcod, iskptim, iformat, iskipinit, ibufsize" :doc "Reads stereo audio data from an external MP3 file" :html "mp3in.html")) csdoc-opcode-database)
(puthash "moscil" (quote (:opcode "moscil" :spec " moscil kkkkk" :out nil :in "kkkkk" :template "moscil kchn, knum, kvel, kdur, kpause" :doc "Sends a stream of the MIDI notes" :html "moscil.html")) csdoc-opcode-database)
(puthash "moogvcf2" (quote (:opcode "moogvcf2" :spec "a moogvcf2 axxii" :out "a" :in "axxii" :template "ares moogvcf2 asig, xfco, xres [,iscale, iskip]" :doc "A digital emulation of the Moog diode ladder filter configuration" :html "moogvcf2.html")) csdoc-opcode-database)
(puthash "moogvcf" (quote (:opcode "moogvcf" :spec "a moogvcf axxii" :out "a" :in "axxii" :template "ares moogvcf asig, xfco, xres [,iscale, iskip]" :doc "A digital emulation of the Moog diode ladder filter configuration" :html "moogvcf.html")) csdoc-opcode-database)
(puthash "moogladder" (quote (:opcode "moogladder" :spec "a moogladder akki" :out "a" :in "akki" :template "asig moogladder ain, kcf, kres[, istor]" :doc "Moogladder is an new digital implementation of the Moog ladder filter based on the work of Antti Huovilainen, described in the paper \"Non-Linear Digital Implementation of the Moog Ladder Filter\" (Proceedings of DaFX04, Univ of Napoli)" :html "moogladder.html")) csdoc-opcode-database)
(puthash "moog" (quote (:opcode "moog" :spec "a moog kkkkkkiii" :out "a" :in "kkkkkkiii" :template "ares moog kamp, kfreq, kfiltq, kfiltrate, kvibf, kvamp, iafn, iwfn, ivfn" :doc "An emulation of a mini-Moog synthesizer" :html "moog.html")) csdoc-opcode-database)
(puthash "monitor" (quote (:opcode "monitor" :spec "aaa monitor " :out "aaa" :in nil :template "aout1 [,aout2 ... aoutX] monitor" :doc "Returns the audio spout frame (if active), otherwise it returns zero" :html "monitor.html")) csdoc-opcode-database)
(puthash "mode" (quote (:opcode "mode" :spec "a mode akki" :out "a" :in "akki" :template "aout mode ain, kfreq, kQ [, iskip]" :doc "Filters the incoming signal with the specified resonance frequency and quality factor" :html "mode.html")) csdoc-opcode-database)
(puthash "MixerClear" (quote (:opcode "MixerClear" :spec " MixerClear " :out nil :in nil :template "MixerClear" :doc "Resets all channels of a buss to 0" :html "MixerClear.html")) csdoc-opcode-database)
(puthash "MixerReceive" (quote (:opcode "MixerReceive" :spec "a MixerReceive ii" :out "a" :in "ii" :template "asignal MixerReceive ibuss, ichannel" :doc "Receives an arate signal that has been mixed onto a channel of a buss" :html "MixerReceive.html")) csdoc-opcode-database)
(puthash "MixerSend" (quote (:opcode "MixerSend" :spec " MixerSend aiii" :out nil :in "aiii" :template "MixerSend asignal, isend, ibuss, ichannel" :doc "Mixes an arate signal into a channel of a buss" :html "MixerSend.html")) csdoc-opcode-database)
(puthash "MixerGetLevel" (quote (:opcode "MixerGetLevel" :spec "k MixerGetLevel ii" :out "k" :in "ii" :template "kgain MixerGetLevel isend, ibuss" :doc "Gets the level at which signals from the send are being added to the buss" :html "MixerGetLevel.html")) csdoc-opcode-database)
(puthash "MixerSetLevel_i" (quote (:opcode "MixerSetLevel_i" :spec " MixerSetLevel_i iii" :out nil :in "iii" :template "MixerSetLevel_i isend, ibuss, igain" :doc "Sets the level at which signals from the send are added to the buss" :html "MixerSetLevel_i.html")) csdoc-opcode-database)
(puthash "MixerSetLevel" (quote (:opcode "MixerSetLevel" :spec " MixerSetLevel iik" :out nil :in "iik" :template "MixerSetLevel isend, ibuss, kgain" :doc "Sets the level at which signals from the send are added to the buss" :html "MixerSetLevel.html")) csdoc-opcode-database)
(puthash "mirror" (quote (:opcode "mirror" :spec "x mirror xxx" :out "x" :in "xxx" :template "ares mirror asig, klow, khigh
 ires mirror isig, ilow, ihigh
 kres mirror ksig, klow, khigh" :doc "Reflects the signal that exceeds the low and high thresholds" :html "mirror.html")) csdoc-opcode-database)
(puthash "minaccum" (quote (:opcode "minaccum" :spec " minaccum aa" :out nil :in "aa" :template "minaccum aAccumulator, aInput" :doc "minaccum compares two audio-rate variables and stores the minimum value between them into the first" :html "minaccum.html")) csdoc-opcode-database)
(puthash "minabsaccum" (quote (:opcode "minabsaccum" :spec " minabsaccum aa" :out nil :in "aa" :template "minabsaccum aAccumulator, aInput" :doc "minabsaccum compares two audio-rate variables and stores the minimum of their absolute values into the first" :html "minabsaccum.html")) csdoc-opcode-database)
(puthash "minabs" (quote (:opcode "minabs" :spec "x minabs xxxx" :out "x" :in "xxxx" :template "amin minabs ain1 [, ain2] [, ain3] [, ain4] [...]
 kmin minabs kin1 [, kin2] [, kin3] [, kin4] [...]" :doc "The minabs opcode takes any number of a-rate or k-rate signals as input (all of the same rate), and outputs a signal at the same rate that is the minimum of all of the inputs" :html "minabs.html")) csdoc-opcode-database)
(puthash "min" (quote (:opcode "min" :spec "x min xxxx" :out "x" :in "xxxx" :template "amin min ain1 [, ain2] [, ain3] [, ain4] [...]
 kmin min kin1 [, kin2] [, kin3] [, kin4] [...]" :doc "The min opcode takes any number of a-rate or k-rate signals as input (all of the same rate), and outputs a signal at the same rate that is the minimum of all of the inputs" :html "min.html")) csdoc-opcode-database)
(puthash "miditempo" (quote (:opcode "miditempo" :spec "k miditempo " :out "k" :in nil :template "ksig miditempo" :doc "Returns the current tempo at k-rate, of either the MIDI file (if available) or the score" :html "miditempo.html")) csdoc-opcode-database)
(puthash "midiprogramchange" (quote (:opcode "midiprogramchange" :spec " midiprogramchange x" :out nil :in "x" :template "midiprogramchange xprogram" :doc "midiprogramchange is designed to simplify writing instruments that can be used interchangeably for either score or MIDI input, and to make it easier to adapt instruments originally written for score input to work with MIDI input" :html "midiprogramchange.html")) csdoc-opcode-database)
(puthash "midipolyaftertouch" (quote (:opcode "midipolyaftertouch" :spec " midipolyaftertouch xxii" :out nil :in "xxii" :template "midipolyaftertouch xpolyaftertouch, xcontrollervalue [, ilow] [, ihigh]" :doc "midipolyaftertouch is designed to simplify writing instruments that can be used interchangeably for either score or MIDI input, and to make it easier to adapt instruments originally written for score input to work with MIDI input" :html "midipolyaftertouch.html")) csdoc-opcode-database)
(puthash "midipitchbend" (quote (:opcode "midipitchbend" :spec " midipitchbend xii" :out nil :in "xii" :template "midipitchbend xpitchbend [, ilow] [, ihigh]" :doc "midipitchbend is designed to simplify writing instruments that can be used interchangeably for either score or MIDI input, and to make it easier to adapt instruments originally written for score input to work with MIDI input" :html "midipitchbend.html")) csdoc-opcode-database)
(puthash "midiout" (quote (:opcode "midiout" :spec " midiout kkkk" :out nil :in "kkkk" :template "midiout kstatus, kchan, kdata1, kdata2" :doc "Sends a generic MIDI message to the MIDI OUT port" :html "midiout.html")) csdoc-opcode-database)
(puthash "midion2" (quote (:opcode "midion2" :spec " midion2 kkkk" :out nil :in "kkkk" :template "midion2 kchn, knum, kvel, ktrig" :doc "Sends noteon and noteoff messages to the MIDI OUT port when triggered by a value different than zero" :html "midion2.html")) csdoc-opcode-database)
(puthash "midion" (quote (:opcode "midion" :spec " midion kkk" :out nil :in "kkk" :template "midion kchn, knum, kvel" :doc "Generates MIDI note messages at k-rate" :html "midion.html")) csdoc-opcode-database)
(puthash "midinoteonpch" (quote (:opcode "midinoteonpch" :spec " midinoteonpch xx" :out nil :in "xx" :template "midinoteonpch xpch, xvelocity" :doc "midinoteonpch is designed to simplify writing instruments that can be used interchangeably for either score or MIDI input, and to make it easier to adapt instruments originally written for score input to work with MIDI input" :html "midinoteonpch.html")) csdoc-opcode-database)
(puthash "midinoteonoct" (quote (:opcode "midinoteonoct" :spec " midinoteonoct xx" :out nil :in "xx" :template "midinoteonoct xoct, xvelocity" :doc "midinoteonoct is designed to simplify writing instruments that can be used interchangeably for either score or MIDI input, and to make it easier to adapt instruments originally written for score input to work with MIDI input" :html "midinoteonoct.html")) csdoc-opcode-database)
(puthash "midinoteonkey" (quote (:opcode "midinoteonkey" :spec " midinoteonkey xx" :out nil :in "xx" :template "midinoteonkey xkey, xvelocity" :doc "midinoteonkey is designed to simplify writing instruments that can be used interchangeably for either score or MIDI input, and to make it easier to adapt instruments originally written for score input to work with MIDI input" :html "midinoteonkey.html")) csdoc-opcode-database)
(puthash "midinoteoncps" (quote (:opcode "midinoteoncps" :spec " midinoteoncps xx" :out nil :in "xx" :template "midinoteoncps xcps, xvelocity" :doc "midinoteoncps is designed to simplify writing instruments that can be used interchangeably for either score or MIDI input, and to make it easier to adapt instruments originally written for score input to work with MIDI input" :html "midinoteoncps.html")) csdoc-opcode-database)
(puthash "midinoteoff" (quote (:opcode "midinoteoff" :spec " midinoteoff xx" :out nil :in "xx" :template "midinoteoff xkey, xvelocity" :doc "midinoteoff is designed to simplify writing instruments that can be used interchangeably for either score or MIDI input, and to make it easier to adapt instruments originally written for score input to work with MIDI input" :html "midinoteoff.html")) csdoc-opcode-database)
(puthash "midiin" (quote (:opcode "midiin" :spec "kkkk midiin " :out "kkkk" :in nil :template "kstatus, kchan, kdata1, kdata2 midiin" :doc "Returns a generic MIDI message received by the MIDI IN port" :html "midiin.html")) csdoc-opcode-database)
(puthash "mididefault" (quote (:opcode "mididefault" :spec " mididefault xx" :out nil :in "xx" :template "mididefault xdefault, xvalue" :doc "mididefault is designed to simplify writing instruments that can be used interchangeably for either score or MIDI input, and to make it easier to adapt instruments originally written for score input to work with MIDI input" :html "mididefault.html")) csdoc-opcode-database)
(puthash "midictrl" (quote (:opcode "midictrl" :spec "x midictrl iii" :out "x" :in "iii" :template "ival midictrl inum [, imin] [, imax]
 kval midictrl inum [, imin] [, imax]" :doc "Get the current value (0-127) of a specified MIDI controller" :html "midictrl.html")) csdoc-opcode-database)
(puthash "midicontrolchange" (quote (:opcode "midicontrolchange" :spec " midicontrolchange xxii" :out nil :in "xxii" :template "midicontrolchange xcontroller, xcontrollervalue [, ilow] [, ihigh]" :doc "midicontrolchange is designed to simplify writing instruments that can be used interchangeably for either score or MIDI input, and to make it easier to adapt instruments originally written for score input to work with MIDI input" :html "midicontrolchange.html")) csdoc-opcode-database)
(puthash "midichn" (quote (:opcode "midichn" :spec "i midichn " :out "i" :in nil :template "ichn midichn" :doc "midichn returns the MIDI channel number (1 - 16) from which the note was activated" :html "midichn.html")) csdoc-opcode-database)
(puthash "midichannelaftertouch" (quote (:opcode "midichannelaftertouch" :spec " midichannelaftertouch xii" :out nil :in "xii" :template "midichannelaftertouch xchannelaftertouch [, ilow] [, ihigh]" :doc "midichannelaftertouch is designed to simplify writing instruments that can be used interchangeably for either score or MIDI input, and to make it easier to adapt instruments originally written for score input to work with MIDI input" :html "midichannelaftertouch.html")) csdoc-opcode-database)
(puthash "midic7" (quote (:opcode "midic7" :spec "x midic7 ixxi" :out "x" :in "ixxi" :template "idest midic7 ictlno, imin, imax [, ifn]
 kdest midic7 ictlno, kmin, kmax [, ifn]" :doc "Allows a floating-point 7-bit MIDI signal scaled with a minimum and a maximum range" :html "midic7.html")) csdoc-opcode-database)
(puthash "midic21" (quote (:opcode "midic21" :spec "x midic21 iiixxi" :out "x" :in "iiixxi" :template "idest midic21 ictlno1, ictlno2, ictlno3, imin, imax [, ifn]
 kdest midic21 ictlno1, ictlno2, ictlno3, kmin, kmax [, ifn]" :doc "Allows a floating-point 21-bit MIDI signal scaled with a minimum and a maximum range" :html "midic21.html")) csdoc-opcode-database)
(puthash "midic14" (quote (:opcode "midic14" :spec "x midic14 iixxi" :out "x" :in "iixxi" :template "idest midic14 ictlno1, ictlno2, imin, imax [, ifn]
 kdest midic14 ictlno1, ictlno2, kmin, kmax [, ifn]" :doc "Allows a floating-point 14-bit MIDI signal scaled with a minimum and a maximum range" :html "midic14.html")) csdoc-opcode-database)
(puthash "metro" (quote (:opcode "metro" :spec "k metro ki" :out "k" :in "ki" :template "ktrig metro kfreq [, initphase]" :doc "Generate a metronomic signal to be used in any circumstance an isochronous trigger is needed" :html "metro.html")) csdoc-opcode-database)
(puthash "mdelay" (quote (:opcode "mdelay" :spec " mdelay kkkkk" :out nil :in "kkkkk" :template "mdelay kstatus, kchan, kd1, kd2, kdelay" :doc "A MIDI delay opcode" :html "mdelay.html")) csdoc-opcode-database)
(puthash "mclock" (quote (:opcode "mclock" :spec " mclock i" :out nil :in "i" :template "mclock ifreq" :doc "Sends a MIDI CLOCK message" :html "mclock.html")) csdoc-opcode-database)
(puthash "max_k" (quote (:opcode "max_k" :spec "k max_k aki" :out "k" :in "aki" :template "knumkout max_k asig, ktrig, itype" :doc "max_k outputs the local maximum (or minimum) value of the incoming asig signal, checked in the time interval between ktrig has become true twice" :html "max_k.html")) csdoc-opcode-database)
(puthash "maxalloc" (quote (:opcode "maxalloc" :spec " maxalloc ii" :out nil :in "ii" :template "maxalloc insnum, icount" :doc "Limits the number of allocations of an instrument" :html "maxalloc.html")) csdoc-opcode-database)
(puthash "maxaccum" (quote (:opcode "maxaccum" :spec " maxaccum aa" :out nil :in "aa" :template "maxaccum aAccumulator, aInput" :doc "maxaccum compares two audio-rate variables and stores the maximum value between them into the first" :html "maxaccum.html")) csdoc-opcode-database)
(puthash "maxabsaccum" (quote (:opcode "maxabsaccum" :spec " maxabsaccum aa" :out nil :in "aa" :template "maxabsaccum aAccumulator, aInput" :doc "maxabsaccum compares two audio-rate variables and stores the maximum of their absolute values into the first" :html "maxabsaccum.html")) csdoc-opcode-database)
(puthash "maxabs" (quote (:opcode "maxabs" :spec "x maxabs xxxx" :out "x" :in "xxxx" :template "amax maxabs ain1 [, ain2] [, ain3] [, ain4] [...]
 kmax maxabs kin1 [, kin2] [, kin3] [, kin4] [...]" :doc "The maxabs opcode takes any number of a-rate or k-rate signals as input (all of the same rate), and outputs a signal at the same rate that is the maximum of all of the inputs" :html "maxabs.html")) csdoc-opcode-database)
(puthash "max" (quote (:opcode "max" :spec "x max xxxx" :out "x" :in "xxxx" :template "amax max ain1 [, ain2] [, ain3] [, ain4] [...]
 kmax max kin1 [, kin2] [, kin3] [, kin4] [...]" :doc "The max opcode takes any number of a-rate or k-rate signals as input (all of the same rate), and outputs a signal at the same rate that is the maximum of all of the inputs" :html "max.html")) csdoc-opcode-database)
(puthash "massign" (quote (:opcode "massign" :spec " massign iXi" :out nil :in "iXi" :template "massign ichnl, insnum[, ireset]
 massign ichnl, \"insname\"[, ireset]" :doc "Assigns a MIDI channel number to a Csound instrument" :html "massign.html")) csdoc-opcode-database)
(puthash "marimba" (quote (:opcode "marimba" :spec "a marimba kkiiikkiiii" :out "a" :in "kkiiikkiiii" :template "ares marimba kamp, kfreq, ihrd, ipos, imp, kvibf, kvamp, ivibfn, idec [, idoubles] [, itriples]" :doc "Audio output is a tone related to the striking of a wooden block as found in a marimba" :html "marimba.html")) csdoc-opcode-database)
(puthash "mandol" (quote (:opcode "mandol" :spec "a mandol kkkkkkii" :out "a" :in "kkkkkkii" :template "ares mandol kamp, kfreq, kpluck, kdetune, kgain, ksize, ifn [, iminfreq]" :doc "An emulation of a mandolin" :html "mandol.html")) csdoc-opcode-database)
(puthash "mandel" (quote (:opcode "mandel" :spec "kk mandel kkkk" :out "kk" :in "kkkk" :template "kiter, koutrig mandel ktrig, kx, ky, kmaxIter" :doc "Returns the number of iterations corresponding to a given point of complex plane by applying the Mandelbrot set formula" :html "mandel.html")) csdoc-opcode-database)
(puthash "madsr" (quote (:opcode "madsr" :spec "x madsr iiiiii" :out "x" :in "iiiiii" :template "ares madsr iatt, idec, islev, irel [, idel] [, ireltim]
 kres madsr iatt, idec, islev, irel [, idel] [, ireltim]" :doc "Calculates the classical ADSR envelope using the linsegr mechanism" :html "madsr.html")) csdoc-opcode-database)
(puthash "maca" (quote (:opcode "maca" :spec "a maca aaaaa" :out "a" :in "aaaaa" :template "ares maca asig1 , asig2 [, asig3] [, asig4] [, asig5] [...]" :doc "Multiply and accumulate a-rate signals only" :html "maca.html")) csdoc-opcode-database)
(puthash "mac" (quote (:opcode "mac" :spec "a mac akakak" :out "a" :in "akakak" :template "ares mac asig1, ksig1 [, asig2] [, ksig2] [, asig3] [, ksig3] [...]" :doc "Multiplies and accumulates a- and k-rate signals" :html "mac.html")) csdoc-opcode-database)
(puthash "lpslot" (quote (:opcode "lpslot" :spec " lpslot i" :out nil :in "i" :template "lpslot islot" :doc "Selects the slot to be use by further lp opcodes" :html "lpslot.html")) csdoc-opcode-database)
(puthash "lpsholdp" (quote (:opcode "lpsholdp" :spec "k lpsholdp kkkkkkkk" :out "k" :in "kkkkkkkk" :template "ksig lpsholdp kphase, ktrig, ktime0, kvalue0 [, ktime1] [, kvalue1] [, ktime2] [, kvalue2] [...]" :doc "Generate control signal consisiting of held segments delimited by two or more specified points" :html "lpsholdp.html")) csdoc-opcode-database)
(puthash "lpshold" (quote (:opcode "lpshold" :spec "k lpshold kkkkkkkk" :out "k" :in "kkkkkkkk" :template "ksig lpshold kfreq, ktrig, ktime0, kvalue0 [, ktime1] [, kvalue1] [, ktime2] [, kvalue2] [...]" :doc "Generate control signal consisting of held segments delimited by two or more specified points" :html "lpshold.html")) csdoc-opcode-database)
(puthash "lpreson" (quote (:opcode "lpreson" :spec "a lpreson a" :out "a" :in "a" :template "ares lpreson asig" :doc "Resynthesises a signal from the data passed internally by a previous lpread" :html "lpreson.html")) csdoc-opcode-database)
(puthash "lpread" (quote (:opcode "lpread" :spec "kkkk lpread kiii" :out "kkkk" :in "kiii" :template "krmsr, krmso, kerr, kcps lpread ktimpnt, ifilcod [, inpoles] [, ifrmrate]" :doc "Reads a control file of time-ordered information frames" :html "lpread.html")) csdoc-opcode-database)
(puthash "lposcilsa2" (quote (:opcode "lposcilsa2" :spec "aa lposcilsa2 akkkii" :out "aa" :in "akkkii" :template "ar1, ar2 lposcilsa2 aamp, kfreqratio, kloop, kend, ift [,iphs]" :doc "lposcilsa2 reads stereo sampled sound from a table with optional looping and high precision" :html "lposcilsa2.html")) csdoc-opcode-database)
(puthash "lposcilsa" (quote (:opcode "lposcilsa" :spec "aa lposcilsa akkkii" :out "aa" :in "akkkii" :template "ar1, ar2 lposcilsa aamp, kfreqratio, kloop, kend, ift [,iphs]" :doc "lposcilsa reads stereo sampled sound from a table with optional looping and high precision" :html "lposcilsa.html")) csdoc-opcode-database)
(puthash "lposcila" (quote (:opcode "lposcila" :spec "a lposcila akkkii" :out "a" :in "akkkii" :template "ar lposcila aamp, kfreqratio, kloop, kend, ift [,iphs]" :doc "lposcila reads sampled sound from a table with optional looping and high precision" :html "lposcila.html")) csdoc-opcode-database)
(puthash "lposcil3" (quote (:opcode "lposcil3" :spec "a lposcil3 kkkkii" :out "a" :in "kkkkii" :template "ares lposcil3 kamp, kfreqratio, kloop, kend, ifn [, iphs]" :doc "Read sampled sound (mono or stereo) from a table, with optional sustain and release looping, and high precision" :html "lposcil3.html")) csdoc-opcode-database)
(puthash "lposcil" (quote (:opcode "lposcil" :spec "a lposcil kkkkii" :out "a" :in "kkkkii" :template "ares lposcil kamp, kfreqratio, kloop, kend, ifn [, iphs]" :doc "Read sampled sound (mono or stereo) from a table, with optional sustain and release looping, and high precision" :html "lposcil.html")) csdoc-opcode-database)
(puthash "lpinterp" (quote (:opcode "lpinterp" :spec " lpinterp iik" :out nil :in "iik" :template "lpinterp islot1, islot2, kmix" :doc "Computes a new set of poles from the interpolation between two analysis" :html "lpinterp.html")) csdoc-opcode-database)
(puthash "lphasor" (quote (:opcode "lphasor" :spec "a lphasor xiiiii" :out "a" :in "xiiiii" :template "ares lphasor xtrns [, ilps] [, ilpe] [, imode] [, istrt] [, istor]" :doc "This opcode can be used to generate table index for sample playback (e" :html "lphasor.html")) csdoc-opcode-database)
(puthash "lpfreson" (quote (:opcode "lpfreson" :spec "a lpfreson ak" :out "a" :in "ak" :template "ares lpfreson asig, kfrqratio" :doc "Resynthesises a signal from the data passed internally by a previous lpread, applying formant shifting" :html "lpfreson.html")) csdoc-opcode-database)
(puthash "lpf18" (quote (:opcode "lpf18" :spec "a lpf18 akkk" :out "a" :in "akkk" :template "ares lpf18 asig, kfco, kres, kdist" :doc "Implementation of a 3 pole sweepable resonant lowpass filter" :html "lpf18.html")) csdoc-opcode-database)
(puthash "lowresx" (quote (:opcode "lowresx" :spec "a lowresx akkii" :out "a" :in "akkii" :template "ares lowresx asig, kcutoff, kresonance [, inumlayer] [, iskip]" :doc "lowresx is equivalent to more layers of lowres with the same arguments serially connected" :html "lowresx.html")) csdoc-opcode-database)
(puthash "lowres" (quote (:opcode "lowres" :spec "a lowres akki" :out "a" :in "akki" :template "ares lowres asig, kcutoff, kresonance [, iskip]" :doc "lowres is a resonant lowpass filter" :html "lowres.html")) csdoc-opcode-database)
(puthash "lowpass2" (quote (:opcode "lowpass2" :spec "a lowpass2 akki" :out "a" :in "akki" :template "ares lowpass2 asig, kcf, kq [, iskip]" :doc "Implementation of a resonant second-order lowpass filter" :html "lowpass2.html")) csdoc-opcode-database)
(puthash "loscilx" (quote (:opcode "loscilx" :spec "aaaaaaaaaaaaaaaa loscilx xkiiiiiii" :out "aaaaaaaaaaaaaaaa" :in "xkiiiiiii" :template "ar1 [, ar2, ar3, ar4, ar5, ar6, ar7, ar8, ar9, ar10, ar11, ar12, ar13, ar14, ar15, ar16] loscilx xamp, kcps, ifn [, iwsize, ibas, istrt, imod1, ibeg1, iend1]" :doc "This file is currently a stub, but the syntax should be correct" :html "loscilx.html")) csdoc-opcode-database)
(puthash "loscil3" (quote (:opcode "loscil3" :spec "aa loscil3 xkiiiiiiii" :out "aa" :in "xkiiiiiiii" :template "ar1 [,ar2] loscil3 xamp, kcps, ifn [, ibas] [, imod1] [, ibeg1] [, iend1] [, imod2] [, ibeg2] [, iend2]" :doc "Read sampled sound (mono or stereo) from a table, with optional sustain and release looping, using cubic interpolation" :html "loscil3.html")) csdoc-opcode-database)
(puthash "loscil" (quote (:opcode "loscil" :spec "aa loscil xkiiiiiiii" :out "aa" :in "xkiiiiiiii" :template "ar1 [,ar2] loscil xamp, kcps, ifn [, ibas] [, imod1] [, ibeg1] [, iend1] [, imod2] [, ibeg2] [, iend2]" :doc "Read sampled sound (mono or stereo) from a table, with optional sustain and release looping" :html "loscil.html")) csdoc-opcode-database)
(puthash "lorisplay" (quote (:opcode "lorisplay" :spec "a lorisplay ikkk" :out "a" :in "ikkk" :template "ar lorisplay ireadidx, kfreqenv, kampenv, kbwenv" :doc "lorisplay renders a stored set of bandwidth-enhanced partials using the method of Bandwidth-Enhanced Additive Synthesis implemented in the Loris software, applying control-rate frequency, amplitude, and bandwidth scaling envelopes" :html "lorisplay.html")) csdoc-opcode-database)
(puthash "lorismorph" (quote (:opcode "lorismorph" :spec " lorismorph iiikkk" :out nil :in "iiikkk" :template "lorismorph isrcidx, itgtidx, istoreidx, kfreqmorphenv, kampmorphenv, kbwmorphenv" :doc "lorismorph morphs two stored sets of bandwidth-enhanced partials and stores a new set of partials representing the morphed sound" :html "lorismorph.html")) csdoc-opcode-database)
(puthash "lorisread" (quote (:opcode "lorisread" :spec " lorisread kiikkki" :out nil :in "kiikkki" :template "lorisread ktimpnt, ifilcod, istoreidx, kfreqenv, kampenv, kbwenv[, ifadetime]" :doc "lorisread imports a set of bandwidth-enhanced partials from a SDIF-format data file, applying control-rate frequency, amplitude, and bandwidth scaling envelopes, and stores the modified partials in memory" :html "lorisread.html")) csdoc-opcode-database)
(puthash "lorenz" (quote (:opcode "lorenz" :spec "aaa lorenz kkkkiiiii" :out "aaa" :in "kkkkiiiii" :template "ax, ay, az lorenz ksv, krv, kbv, kh, ix, iy, iz, iskip [, iskipinit]" :doc "Implements the Lorenz system of equations" :html "lorenz.html")) csdoc-opcode-database)
(puthash "loopsegp" (quote (:opcode "loopsegp" :spec "k loopsegp kkkkkkk" :out "k" :in "kkkkkkk" :template "ksig loopsegp kphase, kvalue0, kdur0, kvalue1 [, kdur1, ... , kdurN-1, kvalueN]" :doc "Generate control signal consisiting of linear segments delimited by two or more specified points" :html "loopsegp.html")) csdoc-opcode-database)
(puthash "loopseg" (quote (:opcode "loopseg" :spec "k loopseg kkkkkkkk" :out "k" :in "kkkkkkkk" :template "ksig loopseg kfreq, ktrig, ktime0, kvalue0 [, ktime1] [, kvalue1] [, ktime2] [, kvalue2] [...]" :doc "Generate control signal consisting of linear segments delimited by two or more specified points" :html "loopseg.html")) csdoc-opcode-database)
(puthash "loop_lt" (quote (:opcode "loop_lt" :spec " loop_lt xxxl" :out nil :in "xxxl" :template "loop_lt indx, incr, imax, label
 loop_lt kndx, kncr, kmax, label" :doc "Construction of looping operations" :html "loop_lt.html")) csdoc-opcode-database)
(puthash "loop_le" (quote (:opcode "loop_le" :spec " loop_le xxxl" :out nil :in "xxxl" :template "loop_le indx, incr, imax, label
 loop_le kndx, kncr, kmax, label" :doc "Construction of looping operations" :html "loop_le.html")) csdoc-opcode-database)
(puthash "loop_gt" (quote (:opcode "loop_gt" :spec " loop_gt xxxl" :out nil :in "xxxl" :template "loop_gt indx, idecr, imin, label
 loop_gt kndx, kdecr, kmin, label" :doc "Construction of looping operations" :html "loop_gt.html")) csdoc-opcode-database)
(puthash "loop_ge" (quote (:opcode "loop_ge" :spec " loop_ge xxxl" :out nil :in "xxxl" :template "loop_ge indx, idecr, imin, label
 loop_ge kndx, kdecr, kmin, label" :doc "Construction of looping operations" :html "loop_ge.html")) csdoc-opcode-database)
(puthash "logcurve" (quote (:opcode "logcurve" :spec "k logcurve kk" :out "k" :in "kk" :template "kout logcurve kindex, ksteepness" :doc "Generates a logarithmic curve in range 0 to 1 of arbitrary steepness" :html "logcurve.html")) csdoc-opcode-database)
(puthash "logbtwo" (quote (:function "logbtwo" :html "logbtwo.html")) csdoc-opcode-database)
(puthash "log10" (quote (:function "log10" :html "log10.html")) csdoc-opcode-database)
(puthash "log" (quote (:function "log" :html "log.html")) csdoc-opcode-database)
(puthash "locsig" (quote (:opcode "locsig" :spec "aa locsig akkk" :out "aa" :in "akkk" :template "a1, a2 locsig asig, kdegree, kdistance, kreverbsend
 a1, a2, a3, a4 locsig asig, kdegree, kdistance, kreverbsend" :doc "locsig takes an input signal and distributes it among 2 or 4 channels using values in degrees to calculate the balance between adjacent channels" :html "locsig.html")) csdoc-opcode-database)
(puthash "locsend" (quote (:opcode "locsend" :spec "aa locsend " :out "aa" :in nil :template "a1, a2 locsend
 a1, a2, a3, a4 locsend" :doc "locsend depends upon the existence of a previously defined locsig" :html "locsend.html")) csdoc-opcode-database)
(puthash "linsegr" (quote (:opcode "linsegr" :spec "x linsegr iiiiiii" :out "x" :in "iiiiiii" :template "ares linsegr ia, idur1, ib [, idur2] [, ic] [...], irel, iz
 kres linsegr ia, idur1, ib [, idur2] [, ic] [...], irel, iz" :doc "Trace a series of line segments between specified points including a release segment" :html "linsegr.html")) csdoc-opcode-database)
(puthash "linseg" (quote (:opcode "linseg" :spec "x linseg iiiii" :out "x" :in "iiiii" :template "ares linseg ia, idur1, ib [, idur2] [, ic] [...]
 kres linseg ia, idur1, ib [, idur2] [, ic] [...]" :doc "Trace a series of line segments between specified points" :html "linseg.html")) csdoc-opcode-database)
(puthash "linrand" (quote (:opcode "linrand" :spec "x linrand k" :out "x" :in "k" :template "ares linrand krange
 ires linrand krange
 kres linrand krange" :doc "Linear distribution random number generator (positive values only)" :html "linrand.html")) csdoc-opcode-database)
(puthash "lineto" (quote (:opcode "lineto" :spec "k lineto kk" :out "k" :in "kk" :template "kres lineto ksig, ktime" :doc "Generate glissandos starting from a control signal" :html "lineto.html")) csdoc-opcode-database)
(puthash "linenr" (quote (:opcode "linenr" :spec "x linenr xiii" :out "x" :in "xiii" :template "ares linenr xamp, irise, idec, iatdec
 kres linenr kamp, irise, idec, iatdec" :doc "linenr -- same as linen except that the final segment is entered only on sensing a MIDI note release" :html "linenr.html")) csdoc-opcode-database)
(puthash "linen" (quote (:opcode "linen" :spec "x linen xiii" :out "x" :in "xiii" :template "ares linen xamp, irise, idur, idec
 kres linen kamp, irise, idur, idec" :doc "linen -- apply a straight line rise and decay pattern to an input amp signal" :html "linen.html")) csdoc-opcode-database)
(puthash "line" (quote (:opcode "line" :spec "x line iii" :out "x" :in "iii" :template "ares line ia, idur, ib
 kres line ia, idur, ib" :doc "Trace a straight line between specified points" :html "line.html")) csdoc-opcode-database)
(puthash "limit" (quote (:opcode "limit" :spec "x limit xxx" :out "x" :in "xxx" :template "ares limit asig, klow, khigh
 ires limit isig, ilow, ihigh
 kres limit ksig, klow, khigh" :doc "Sets the lower and upper limits of the value it processes" :html "limit.html")) csdoc-opcode-database)
(puthash "lfo" (quote (:opcode "lfo" :spec "x lfo kki" :out "x" :in "kki" :template "kres lfo kamp, kcps [, itype]
 ares lfo kamp, kcps [, itype]" :doc "A low frequency oscillator of various shapes" :html "lfo.html")) csdoc-opcode-database)
(puthash "ktableseg" (quote (:opcode "ktableseg" :spec " ktableseg iiiii" :out nil :in "iiiii" :template "ktableseg ifn1, idur1, ifn2 [, idur2] [, ifn3] [...]" :doc "Deprecated" :html "ktableseg.html")) csdoc-opcode-database)
(puthash "kgoto" (quote (:opcode "kgoto" :spec " kgoto l" :out nil :in "l" :template "kgoto label" :doc "During the p-time passes only, unconditionally transfer control to the statement labeled by label" :html "kgoto.html")) csdoc-opcode-database)
(puthash "k" (quote (:function "k" :html "opk.html")) csdoc-opcode-database)
(puthash "jspline" (quote (:opcode "jspline" :spec "x jspline xkk" :out "x" :in "xkk" :template "ares jspline xamp, kcpsMin, kcpsMax
 kres jspline kamp, kcpsMin, kcpsMax" :doc "A jitter-spline generator" :html "jspline.html")) csdoc-opcode-database)
(puthash "jitter2" (quote (:opcode "jitter2" :spec "k jitter2 kkkkkkk" :out "k" :in "kkkkkkk" :template "kout jitter2 ktotamp, kamp1, kcps1, kamp2, kcps2, kamp3, kcps3" :doc "Generates a segmented line with user-controllable random segments" :html "jitter2.html")) csdoc-opcode-database)
(puthash "jitter" (quote (:opcode "jitter" :spec "k jitter kkk" :out "k" :in "kkk" :template "kout jitter kamp, kcpsMin, kcpsMax" :doc "Generates a segmented line whose segments are randomly generated" :html "jitter.html")) csdoc-opcode-database)
(puthash "jacktransport" (quote (:opcode "jacktransport" :spec " jacktransport ii" :out nil :in "ii" :template "jacktransport icommand [, ilocation]" :doc "Start/stop jack_transport and can optionally relocate the playback head" :html "jacktransport.html")) csdoc-opcode-database)
(puthash "inz" (quote (:opcode "inz" :spec " inz k" :out nil :in "k" :template "inz ksig1" :doc "Reads multi-channel audio samples into a ZAK array from an external device or stream" :html "inz.html")) csdoc-opcode-database)
(puthash "inx" (quote (:opcode "inx" :spec "aaaaaaaaaaaaaaaa inx " :out "aaaaaaaaaaaaaaaa" :in nil :template "ar1, ar2, ar3, ar4, ar5, ar6, ar7, ar8, ar9, ar10, ar11, ar12, ar13, ar14, ar15, ar16 inx" :doc "Reads a 16-channel audio signal from an external device or stream" :html "inx.html")) csdoc-opcode-database)
(puthash "invalue" (quote (:opcode "invalue" :spec "x invalue \"" :out "x" :in "\"" :template "kvalue invalue \"channel name\"
 Sname invalue \"channel name\"" :doc "Reads a k-rate signal or string from a user-defined channel" :html "invalue.html")) csdoc-opcode-database)
(puthash "interp" (quote (:opcode "interp" :spec "a interp kii" :out "a" :in "kii" :template "ares interp ksig [, iskip] [, imode]" :doc "Converts a control signal to an audio signal using linear interpolation" :html "interp.html")) csdoc-opcode-database)
(puthash "integ" (quote (:opcode "integ" :spec "x integ xi" :out "x" :in "xi" :template "ares integ asig [, iskip]
 kres integ ksig [, iskip]" :doc "Modify a signal by integration" :html "integ.html")) csdoc-opcode-database)
(puthash "int" (quote (:function "int" :html "int.html")) csdoc-opcode-database)
(puthash "insglobal" (quote (:opcode "insglobal" :spec "iii" :out "iii" :in "iii" :template "insglobalisource, instrnum [,instrnum...]" :doc "With the insremot and insglobal opcodes you are able to perform instruments on remote machines and control them from a master machine" :html "insglobal.html")) csdoc-opcode-database)
(puthash "insremot" (quote (:opcode "insremot" :spec "iiii" :out "iiii" :in "iiii" :template "insremotidestination, isource, instrnum [,instrnum...]" :doc "With the insremot and insglobal opcodes you are able to perform instruments on remote machines and control them from a master machine" :html "insremot.html")) csdoc-opcode-database)
(puthash "ins" (quote (:opcode "ins" :spec "aa ins " :out "aa" :in nil :template "ar1, ar2 ins" :doc "Reads stereo audio data from an external device or stream" :html "ins.html")) csdoc-opcode-database)
(puthash "inrg" (quote (:opcode "inrg" :spec " inrg kaaaa" :out nil :in "kaaaa" :template "inrg kstart, ain1 [,ain2, ain3, ..., ainN]" :doc "inrg reads audio from a range of adjacent audio channels from the audio input device" :html "inrg.html")) csdoc-opcode-database)
(puthash "inq" (quote (:opcode "inq" :spec "aaaa inq " :out "aaaa" :in nil :template "ar1, ar2, ar3, a4 inq" :doc "Reads quad audio data from an external device or stream" :html "inq.html")) csdoc-opcode-database)
(puthash "ino" (quote (:opcode "ino" :spec "aaaaaaaa ino " :out "aaaaaaaa" :in nil :template "ar1, ar2, ar3, ar4, ar5, ar6, ar7, ar8 ino" :doc "Reads eight-channel audio data from an external device or stream" :html "ino.html")) csdoc-opcode-database)
(puthash "inletf" (quote (:opcode "inletf" :spec "f inletf S" :out "f" :in "S" :template "fsignal inletf Sname" :doc "Receives an frate signal (fsig) into an instrument from a named port" :html "inletf.html")) csdoc-opcode-database)
(puthash "inletk" (quote (:opcode "inletk" :spec "k inletk S" :out "k" :in "S" :template "ksignal inletk Sname" :doc "Receives a krate signal into an instrument from a named port" :html "inletk.html")) csdoc-opcode-database)
(puthash "inleta" (quote (:opcode "inleta" :spec "a inleta S" :out "a" :in "S" :template "asignal inleta Sname" :doc "Receives an arate signal into an instrument through a named port" :html "inleta.html")) csdoc-opcode-database)
(puthash "initc7" (quote (:opcode "initc7" :spec " initc7 iii" :out nil :in "iii" :template "initc7 ichan, ictlno, ivalue" :doc "Initializes MIDI controller ictlno with ivalue" :html "initc7.html")) csdoc-opcode-database)
(puthash "initc21" (quote (:opcode "initc21" :spec " initc21 iiiii" :out nil :in "iiiii" :template "initc21 ichan, ictlno1, ictlno2, ictlno3, ivalue" :doc "Initializes the controllers used to create a 21-bit MIDI value" :html "initc21.html")) csdoc-opcode-database)
(puthash "initc14" (quote (:opcode "initc14" :spec " initc14 iiii" :out nil :in "iiii" :template "initc14 ichan, ictlno1, ictlno2, ivalue" :doc "Initializes the controllers used to create a 14-bit MIDI value" :html "initc14.html")) csdoc-opcode-database)
(puthash "init" (quote (:opcode "init" :spec "x init i" :out "x" :in "i" :template "ares init iarg
 ires init iarg
 kres init iarg" :doc "Put the value of the i-time expression into a k- or a-rate variable" :html "init.html")) csdoc-opcode-database)
(puthash "inh" (quote (:opcode "inh" :spec "aaaaaa inh " :out "aaaaaa" :in nil :template "ar1, ar2, ar3, ar4, ar5, ar6 inh" :doc "Reads six-channel audio data from an external device or stream" :html "inh.html")) csdoc-opcode-database)
(puthash "inch" (quote (:opcode "inch" :spec "a inch k" :out "a" :in "k" :template "ain inch kchan" :doc "Reads from a numbered channel in an external audio signal or stream" :html "inch.html")) csdoc-opcode-database)
(puthash "in32" (quote (:opcode "in32" :spec "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa in32 " :out "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" :in nil :template "ar1, ar2, ar3, ar4, ar5, ar6, ar7, ar8, ar9, ar10, ar11, ar12, ar13, ar14, ar15, ar16, ar17, ar18, ar19, ar20, ar21, ar22, ar23, ar24, ar25, ar26, ar27, ar28, ar29, ar30, ar31, ar32 in32" :doc "Reads a 32-channel audio signal from an external device or stream" :html "in32.html")) csdoc-opcode-database)
(puthash "in" (quote (:opcode "in" :spec "a in " :out "a" :in nil :template "ar1 in" :doc "Reads mono audio data from an external device or stream" :html "in.html")) csdoc-opcode-database)
(puthash "imagesize" (quote (:opcode "imagesize" :spec "ii imagesize i" :out "ii" :in "i" :template "iwidth iheight imagesize iimagenum" :doc "Return the width and height of a previously opened or created image" :html "imagesize.html")) csdoc-opcode-database)
(puthash "imagesave" (quote (:opcode "imagesave" :spec " imagesave if" :out nil :in "if" :template "imagesave iimagenum, filename" :doc "Save a previously created image" :html "imagesave.html")) csdoc-opcode-database)
(puthash "imageload" (quote (:opcode "imageload" :spec "i imageload f" :out "i" :in "f" :template "iimagenum imageload filename" :doc "Load an image and return a reference to it" :html "imageload.html")) csdoc-opcode-database)
(puthash "imagegetpixel" (quote (:opcode "imagegetpixel" :spec "xxx imagegetpixel ixx" :out "xxx" :in "ixx" :template "ared agreen ablue imagegetpixel iimagenum, ax, ay
 kred kgreen kblue imagegetpixel iimagenum, kx, ky" :doc "Return the RGB pixel values of a previously opened or created image" :html "imagegetpixel.html")) csdoc-opcode-database)
(puthash "imagefree" (quote (:opcode "imagefree" :spec " imagefree i" :out nil :in "i" :template "imagefree iimagenum" :doc "Frees memory allocated for a previously loaded or created image" :html "imagefree.html")) csdoc-opcode-database)
(puthash "imagecreate" (quote (:opcode "imagecreate" :spec "i imagecreate ii" :out "i" :in "ii" :template "iimagenum imagecreate iwidth, iheight" :doc "Create an empty image of a given size" :html "imagecreate.html")) csdoc-opcode-database)
(puthash "ihold" (quote (:opcode "ihold" :spec " ihold " :out nil :in nil :template "ihold" :doc "Causes a finite-duration note to become a “held” note" :html "ihold.html")) csdoc-opcode-database)
(puthash "igoto" (quote (:opcode "igoto" :spec " igoto l" :out nil :in "l" :template "igoto label" :doc "During the i-time pass only, unconditionally transfer control to the statement labeled by label" :html "igoto.html")) csdoc-opcode-database)
(puthash "i" (quote (:function "i" :html "opi.html")) csdoc-opcode-database)
(puthash "hvs3" (quote (:opcode "hvs3" :spec " hvs3 kkkiiiiii" :out nil :in "kkkiiiiii" :template "hvs3 kx, ky, kz, inumParms, inumPointsX, iOutTab, iPositionsTab, iSnapTab [, iConfigTab]" :doc "hvs3 allows three-dimensional Hyper Vectorial Synthesis (HVS) controlled by externally-updated k-variables" :html "hvs3.html")) csdoc-opcode-database)
(puthash "hvs2" (quote (:opcode "hvs2" :spec " hvs2 kkiiiiii" :out nil :in "kkiiiiii" :template "hvs2 kx, ky, inumParms, inumPointsX, iOutTab, iPositionsTab, iSnapTab [, iConfigTab]" :doc "hvs2 allows two-dimensional Hyper Vectorial Synthesis (HVS) controlled by externally-updated k-variables" :html "hvs2.html")) csdoc-opcode-database)
(puthash "hvs1" (quote (:opcode "hvs1" :spec " hvs1 kiiiiii" :out nil :in "kiiiiii" :template "hvs1 kx, inumParms, inumPointsX, iOutTab, iPositionsTab, iSnapTab [, iConfigTab]" :doc "hvs1 allows one-dimensional Hyper Vectorial Synthesis (HVS) controlled by externally-updated k-variables" :html "hvs1.html")) csdoc-opcode-database)
(puthash "hsboscil" (quote (:opcode "hsboscil" :spec "a hsboscil kkkiiiii" :out "a" :in "kkkiiiii" :template "ares hsboscil kamp, ktone, kbrite, ibasfreq, iwfn, ioctfn [, ioctcnt] [, iphs]" :doc "An oscillator which takes tonality and brightness as arguments, relative to a base frequency" :html "hsboscil.html")) csdoc-opcode-database)
(puthash "hrtfstat" (quote (:opcode "hrtfstat" :spec "aa hrtfstat aiiiiii" :out "aa" :in "aiiiiii" :template "aleft, aright hrtfstat asrc, iAz, iElev, ifilel, ifiler [,iradius, isr]" :doc "This opcode takes a source signal and spatialises it in the 3 dimensional space around a listener using head related transfer function (HRTF) based filters" :html "hrtfstat.html")) csdoc-opcode-database)
(puthash "hrtfmove2" (quote (:opcode "hrtfmove2" :spec "aa hrtfmove2 akkiiiii" :out "aa" :in "akkiiiii" :template "aleft, aright hrtfmove2 asrc, kAz, kElev, ifilel, ifiler [,ioverlap, iradius, isr]" :doc "This opcode takes a source signal and spatialises it in the 3 dimensional space around a listener using head related transfer function (HRTF) based filters" :html "hrtfmove2.html")) csdoc-opcode-database)
(puthash "hrtfmove" (quote (:opcode "hrtfmove" :spec "aa hrtfmove akkiiiii" :out "aa" :in "akkiiiii" :template "aleft, aright hrtfmove asrc, kAz, kElev, ifilel, ifiler [, imode, ifade, isr]" :doc "This opcode takes a source signal and spatialises it in the 3 dimensional space around a listener by convolving the source with stored head related transfer function (HRTF) based filters" :html "hrtfmove.html")) csdoc-opcode-database)
(puthash "hilbert" (quote (:opcode "hilbert" :spec "aa hilbert a" :out "aa" :in "a" :template "ar1, ar2 hilbert asig" :doc "An IIR implementation of a Hilbert transformer" :html "hilbert.html")) csdoc-opcode-database)
(puthash "harmon2" (quote (:opcode "harmon2" :spec "a harmon2 akkkiii" :out "a" :in "akkkiii" :template "ares harmon2 asig, koct, kfrq1, kfrq2, icpsmode, ilowest[, ipolarity]" :doc "Generate harmonizing voices with formants preserved" :html "harmon2.html")) csdoc-opcode-database)
(puthash "harmon" (quote (:opcode "harmon" :spec "a harmon akkkkiii" :out "a" :in "akkkkiii" :template "ares harmon asig, kestfrq, kmaxvar, kgenfreq1, kgenfreq2, imode, iminfrq, iprd" :doc "Analyze an audio input and generate harmonizing voices in synchrony" :html "harmon.html")) csdoc-opcode-database)
(puthash "guiro" (quote (:opcode "guiro" :spec "a guiro kiiiiii" :out "a" :in "kiiiiii" :template "ares guiro kamp, idettack [, inum] [, idamp] [, imaxshake] [, ifreq] [, ifreq1]" :doc "guiro is a semi-physical model of a guiro sound" :html "guiro.html")) csdoc-opcode-database)
(puthash "granule" (quote (:opcode "granule" :spec "a granule xiiiiiiiiikikiiiiiiiii" :out "a" :in "xiiiiiiiiikikiiiiiiiii" :template "ares granule xamp, ivoice, iratio, imode, ithd, ifn, ipshift, igskip, igskip_os, ilength, kgap, igap_os, kgsize, igsize_os, iatt, idec [, iseed] [, ipitch1] [, ipitch2] [, ipitch3] [, ipitch4] [, ifnenv]" :doc "The granule unit generator is more complex than grain, but does add new possibilities" :html "granule.html")) csdoc-opcode-database)
(puthash "grain3" (quote (:opcode "grain3" :spec "a grain3 kkkkkkikikkii" :out "a" :in "kkkkkkikikkii" :template "ares grain3 kcps, kphs, kfmd, kpmd, kgdur, kdens, imaxovr, kfn, iwfn, kfrpow, kprpow [, iseed] [, imode]" :doc "Generate granular synthesis textures" :html "grain3.html")) csdoc-opcode-database)
(puthash "grain2" (quote (:opcode "grain2" :spec "a grain2 kkkikiiii" :out "a" :in "kkkikiiii" :template "ares grain2 kcps, kfmd, kgdur, iovrlp, kfn, iwfn [, irpow] [, iseed] [, imode]" :doc "Generate granular synthesis textures" :html "grain2.html")) csdoc-opcode-database)
(puthash "grain" (quote (:opcode "grain" :spec "a grain xxxkkkiiii" :out "a" :in "xxxkkkiiii" :template "ares grain xamp, xpitch, xdens, kampoff, kpitchoff, kgdur, igfn, iwfn, imgdur [, igrnd]" :doc "Generates granular synthesis textures" :html "grain.html")) csdoc-opcode-database)
(puthash "goto" (quote (:opcode "goto" :spec " goto l" :out nil :in "l" :template "goto label" :doc "Transfer control to label on every pass" :html "goto.html")) csdoc-opcode-database)
(puthash "gogobel" (quote (:opcode "gogobel" :spec "a gogobel kkiiikki" :out "a" :in "kkiiikki" :template "ares gogobel kamp, kfreq, ihrd, ipos, imp, kvibf, kvamp, ivfn" :doc "Audio output is a tone related to the striking of a cow bell or similar" :html "gogobel.html")) csdoc-opcode-database)
(puthash "getcfg" (quote (:opcode "getcfg" :spec "S getcfg i" :out "S" :in "i" :template "Svalue getcfg iopt" :doc "Return various configuration settings in Svalue as a string at init time" :html "getcfg.html")) csdoc-opcode-database)
(puthash "gbuzz" (quote (:opcode "gbuzz" :spec "a gbuzz xxkkkii" :out "a" :in "xxkkkii" :template "ares gbuzz xamp, xcps, knh, klh, kmul, ifn [, iphs]" :doc "Output is a set of harmonically related cosine partials" :html "gbuzz.html")) csdoc-opcode-database)
(puthash "gauss" (quote (:opcode "gauss" :spec "x gauss k" :out "x" :in "k" :template "ares gauss krange
 ires gauss krange
 kres gauss krange" :doc "Gaussian distribution random number generator" :html "gauss.html")) csdoc-opcode-database)
(puthash "gainslider" (quote (:opcode "gainslider" :spec "k gainslider k" :out "k" :in "k" :template "kout gainslider kindex" :doc "This opcode is intended for use to multiply by an audio signal to give a console mixer like feel" :html "gainslider.html")) csdoc-opcode-database)
(puthash "gain" (quote (:opcode "gain" :spec "a gain akii" :out "a" :in "akii" :template "ares gain asig, krms [, ihp] [, iskip]" :doc "Adjusts the amplitude audio signal according to a root-mean-square value" :html "gain.html")) csdoc-opcode-database)
(puthash "ftsr" (quote (:function "ftsr" :html "ftsr.html")) csdoc-opcode-database)
(puthash "ftsavek" (quote (:opcode "ftsavek" :spec " ftsavek \"kiii" :out nil :in "\"kiii" :template "ftsavek \"filename\", ktrig, iflag, ifn1 [, ifn2] [...]" :doc "Save a set of previously-allocated tables to a file" :html "ftsavek.html")) csdoc-opcode-database)
(puthash "ftsave" (quote (:opcode "ftsave" :spec " ftsave \"iii" :out nil :in "\"iii" :template "ftsave \"filename\", iflag, ifn1 [, ifn2] [...]" :doc "Save a set of previously-allocated tables to a file" :html "ftsave.html")) csdoc-opcode-database)
(puthash "ftmorf" (quote (:opcode "ftmorf" :spec " ftmorf kii" :out nil :in "kii" :template "ftmorf kftndx, iftfn, iresfn" :doc "Uses an index into a table of ftable numbers to morph between adjacent tables in the list" :html "ftmorf.html")) csdoc-opcode-database)
(puthash "ftlptim" (quote (:function "ftlptim" :html "ftlptim.html")) csdoc-opcode-database)
(puthash "ftloadk" (quote (:opcode "ftloadk" :spec " ftloadk \"kiii" :out nil :in "\"kiii" :template "ftloadk \"filename\", ktrig, iflag, ifn1 [, ifn2] [...]" :doc "Load a set of previously-allocated tables from a file" :html "ftloadk.html")) csdoc-opcode-database)
(puthash "ftload" (quote (:opcode "ftload" :spec " ftload \"iii" :out nil :in "\"iii" :template "ftload \"filename\", iflag, ifn1 [, ifn2] [...]" :doc "Load a set of previously-allocated tables from a file" :html "ftload.html")) csdoc-opcode-database)
(puthash "ftlen" (quote (:function "ftlen" :html "ftlen.html")) csdoc-opcode-database)
(puthash "ftgentmp" (quote (:opcode "ftgentmp" :spec "i ftgentmp iiiiii" :out "i" :in "iiiiii" :template "ifno ftgentmp ip1, ip2dummy, isize, igen, iarga, iargb, ..." :doc "Generate a score function table from within the orchestra, which is optionally deleted at the end of the note" :html "ftgentmp.html")) csdoc-opcode-database)
(puthash "ftgenonce" (quote (:opcode "ftgenonce" :spec "i ftgenonce iiiiii" :out "i" :in "iiiiii" :template "ifno ftgenonce ip1dummy, ip2dummy, isize, igen, iarga, iargb, ..." :doc "Generate a function table from within an instrument definition, without duplication of data" :html "ftgenonce.html")) csdoc-opcode-database)
(puthash "ftgen" (quote (:opcode "ftgen" :spec "x ftgen iiiiii" :out "x" :in "iiiiii" :template "gir ftgen ifn, itime, isize, igen, iarga [, iargb ] [...]" :doc "Generate a score function table from within the orchestra" :html "ftgen.html")) csdoc-opcode-database)
(puthash "ftfree" (quote (:opcode "ftfree" :spec " ftfree ii" :out nil :in "ii" :template "ftfree ifno, iwhen" :doc "Deletes function table" :html "ftfree.html")) csdoc-opcode-database)
(puthash "ftconv" (quote (:opcode "ftconv" :spec "aaaa ftconv aiiiii" :out "aaaa" :in "aiiiii" :template "a1[, a2[, a3[, ... a8]]] ftconv ain, ift, iplen[, iskipsamples [, iirlen[, iskipinit]]]" :doc "Low latency multichannel convolution, using a function table as impulse response source" :html "ftconv.html")) csdoc-opcode-database)
(puthash "ftchnls" (quote (:function "ftchnls" :html "ftchnls.html")) csdoc-opcode-database)
(puthash "freeverb" (quote (:opcode "freeverb" :spec "aa freeverb aakkii" :out "aa" :in "aakkii" :template "aoutL, aoutR freeverb ainL, ainR, kRoomSize, kHFDamp[, iSRate[, iSkip]]" :doc "freeverb is a stereo reverb unit based on Jezars public domain C++ sources, composed of eight parallel comb filters on both channels, followed by four allpass units in series" :html "freeverb.html")) csdoc-opcode-database)
(puthash "frac" (quote (:function "frac" :html "frac.html")) csdoc-opcode-database)
(puthash "fprints" (quote (:opcode "fprints" :spec " fprints \"ii" :out nil :in "\"ii" :template "fprints \"filename\", \"string\" [, ival1] [, ival2] [...]" :doc "Similar to prints but prints to a file" :html "fprints.html")) csdoc-opcode-database)
(puthash "fprintks" (quote (:opcode "fprintks" :spec " fprintks \"kk" :out nil :in "\"kk" :template "fprintks \"filename\", \"string\", [, kval1] [, kval2] [...]" :doc "Similar to printks but prints to a file" :html "fprintks.html")) csdoc-opcode-database)
(puthash "foutk" (quote (:opcode "foutk" :spec " foutk iikkkk" :out nil :in "iikkkk" :template "foutk ifilename, iformat, kout1 [, kout2, kout3,....,koutN]" :doc "foutk outputs N k-rate signals to a specified file of N channels" :html "foutk.html")) csdoc-opcode-database)
(puthash "foutir" (quote (:opcode "foutir" :spec " foutir iiiiiii" :out nil :in "iiiiiii" :template "foutir ihandle, iformat, iflag, iout1 [, iout2, iout3,....,ioutN]" :doc "foutir output N i-rate signals to a specified file of N channels" :html "foutir.html")) csdoc-opcode-database)
(puthash "fouti" (quote (:opcode "fouti" :spec " fouti iiiiiii" :out nil :in "iiiiiii" :template "fouti ihandle, iformat, iflag, iout1 [, iout2, iout3,....,ioutN]" :doc "fouti output N i-rate signals to a specified file of N channels" :html "fouti.html")) csdoc-opcode-database)
(puthash "fout" (quote (:opcode "fout" :spec " fout iiaaaa" :out nil :in "iiaaaa" :template "fout ifilename, iformat, aout1 [, aout2, aout3,...,aoutN]" :doc "fout outputs N a-rate signals to a specified file of N channels" :html "fout.html")) csdoc-opcode-database)
(puthash "foscili" (quote (:opcode "foscili" :spec "a foscili xkxxkii" :out "a" :in "xkxxkii" :template "ares foscili xamp, kcps, xcar, xmod, kndx, ifn [, iphs]" :doc "Basic frequency modulated oscillator with linear interpolation" :html "foscili.html")) csdoc-opcode-database)
(puthash "foscil" (quote (:opcode "foscil" :spec "a foscil xkxxkii" :out "a" :in "xkxxkii" :template "ares foscil xamp, kcps, xcar, xmod, kndx, ifn [, iphs]" :doc "A basic frequency modulated oscillator" :html "foscil.html")) csdoc-opcode-database)
(puthash "follow2" (quote (:opcode "follow2" :spec "a follow2 akk" :out "a" :in "akk" :template "ares follow2 asig, katt, krel" :doc "A controllable envelope extractor using the algorithm attributed to Jean-Marc Jot" :html "follow2.html")) csdoc-opcode-database)
(puthash "follow" (quote (:opcode "follow" :spec "a follow ai" :out "a" :in "ai" :template "ares follow asig, idt" :doc "Envelope follower unit generator" :html "follow.html")) csdoc-opcode-database)
(puthash "fold" (quote (:opcode "fold" :spec "a fold ak" :out "a" :in "ak" :template "ares fold asig, kincr" :doc "Adds artificial foldover to an audio signal" :html "fold.html")) csdoc-opcode-database)
(puthash "fog" (quote (:opcode "fog" :spec "a fog xxxakkkkkiiiiiii" :out "a" :in "xxxakkkkkiiiiiii" :template "ares fog xamp, xdens, xtrans, aspd, koct, kband, kris, kdur, kdec, iolaps, ifna, ifnb, itotdur [, iphs] [, itmode] [, iskip]" :doc "Audio output is a succession of grains derived from data in a stored function table ifna" :html "fog.html")) csdoc-opcode-database)
(puthash "fofilter" (quote (:opcode "fofilter" :spec "a fofilter akkki" :out "a" :in "akkki" :template "asig fofilter ain, kcf, kris, kdec[, istor]" :doc "Fofilter generates a stream of overlapping sinewave grains, when fed with a pulse train" :html "fofilter.html")) csdoc-opcode-database)
(puthash "fof2" (quote (:opcode "fof2" :spec "a fof2 xxxkkkkkiiiikki" :out "a" :in "xxxkkkkkiiiikki" :template "ares fof2 xamp, xfund, xform, koct, kband, kris, kdur, kdec, iolaps, ifna, ifnb, itotdur, kphs, kgliss [, iskip]" :doc "Audio output is a succession of sinusoid bursts initiated at frequency xfund with a spectral peak at xform" :html "fof2.html")) csdoc-opcode-database)
(puthash "fof" (quote (:opcode "fof" :spec "a fof xxxkkkkkiiiiiii" :out "a" :in "xxxkkkkkiiiiiii" :template "ares fof xamp, xfund, xform, koct, kband, kris, kdur, kdec, iolaps, ifna, ifnb, itotdur [, iphs] [, ifmode] [, iskip]" :doc "Audio output is a succession of sinusoid bursts initiated at frequency xfund with a spectral peak at xform" :html "fof.html")) csdoc-opcode-database)
(puthash "fmwurlie" (quote (:opcode "fmwurlie" :spec "a fmwurlie kkkkkkiiiii" :out "a" :in "kkkkkkiiiii" :template "ares fmwurlie kamp, kfreq, kc1, kc2, kvdepth, kvrate, ifn1, ifn2, ifn3, ifn4, ivfn" :doc "Uses FM synthesis to create a Wurlitzer electric piano sound" :html "fmwurlie.html")) csdoc-opcode-database)
(puthash "fmvoice" (quote (:opcode "fmvoice" :spec "a fmvoice kkkkkkiiiii" :out "a" :in "kkkkkkiiiii" :template "ares fmvoice kamp, kfreq, kvowel, ktilt, kvibamt, kvibrate, ifn1, ifn2, ifn3, ifn4, ivibfn" :doc "FM Singing Voice Synthesis" :html "fmvoice.html")) csdoc-opcode-database)
(puthash "fmrhode" (quote (:opcode "fmrhode" :spec "a fmrhode kkkkkkiiiii" :out "a" :in "kkkkkkiiiii" :template "ares fmrhode kamp, kfreq, kc1, kc2, kvdepth, kvrate, ifn1, ifn2, ifn3, ifn4, ivfn" :doc "Uses FM synthesis to create a Fender Rhodes electric piano sound" :html "fmrhode.html")) csdoc-opcode-database)
(puthash "fmpercfl" (quote (:opcode "fmpercfl" :spec "a fmpercfl kkkkkkiiiii" :out "a" :in "kkkkkkiiiii" :template "ares fmpercfl kamp, kfreq, kc1, kc2, kvdepth, kvrate, ifn1, ifn2, ifn3, ifn4, ivfn" :doc "Uses FM synthesis to create a percussive flute sound" :html "fmpercfl.html")) csdoc-opcode-database)
(puthash "fmmetal" (quote (:opcode "fmmetal" :spec "a fmmetal kkkkkkiiiii" :out "a" :in "kkkkkkiiiii" :template "ares fmmetal kamp, kfreq, kc1, kc2, kvdepth, kvrate, ifn1, ifn2, ifn3, ifn4, ivfn" :doc "Uses FM synthesis to create a “Heavy Metal” sound" :html "fmmetal.html")) csdoc-opcode-database)
(puthash "fmbell" (quote (:opcode "fmbell" :spec "a fmbell kkkkkkiiiii" :out "a" :in "kkkkkkiiiii" :template "ares fmbell kamp, kfreq, kc1, kc2, kvdepth, kvrate, ifn1, ifn2, ifn3, ifn4, ivfn" :doc "Uses FM synthesis to create a tublar bell sound" :html "fmbell.html")) csdoc-opcode-database)
(puthash "fmb3" (quote (:opcode "fmb3" :spec "a fmb3 kkkkkkiiiii" :out "a" :in "kkkkkkiiiii" :template "ares fmb3 kamp, kfreq, kc1, kc2, kvdepth, kvrate, ifn1, ifn2, ifn3, ifn4, ivfn" :doc "Uses FM synthesis to create a Hammond B3 organ sound" :html "fmb3.html")) csdoc-opcode-database)
(puthash "FLxyin" (quote (:opcode "FLxyin" :spec "kkk FLxyin iiiiiiiiiiii" :out "kkk" :in "iiiiiiiiiiii" :template "koutx, kouty, kinside FLxyin ioutx_min, ioutx_max, iouty_min, iouty_max, iwindx_min, iwindx_max, iwindy_min, iwindy_max [, iexpx, iexpy, ioutx, iouty]" :doc "Similar to xyin, sense the mouse cursor position in a user-defined area inside an FLpanel" :html "FLxyin.html")) csdoc-opcode-database)
(puthash "FLvslidBnk2" (quote (:opcode "FLvslidBnk2" :spec " FLvslidBnk2 \"iiiiiiii" :out nil :in "\"iiiiiiii" :template "FLvslidBnk2 \"names\", inumsliders, ioutable, iconfigtable [,iwidth, iheight, ix, iy, istart_index]" :doc "FLvslidBnk2 is a widget containing a bank of horizontal sliders" :html "FLvslidBnk2.html")) csdoc-opcode-database)
(puthash "FLvslidBnk" (quote (:opcode "FLvslidBnk" :spec " FLvslidBnk \"iiiiiiiiii" :out nil :in "\"iiiiiiiiii" :template "FLvslidBnk \"names\", inumsliders [, ioutable] [, iwidth] [, iheight] [, ix] [, iy] [, itypetable] [, iexptable] [, istart_index] [, iminmaxtable]" :doc "FLvslidBnk is a widget containing a bank of horizontal sliders" :html "FLvslidBnk.html")) csdoc-opcode-database)
(puthash "FLvkeybd" (quote (:opcode "FLvkeybd" :spec " FLvkeybd \"iiii" :out nil :in "\"iiii" :template "FLvkeybd \"keyboard.map\", iwidth, iheight, ix, iy" :doc "An FLTK widget opcode that creates a virtual keyboard widget" :html "FLvkeybd.html")) csdoc-opcode-database)
(puthash "FLvalue" (quote (:opcode "FLvalue" :spec "i FLvalue \"iiii" :out "i" :in "\"iiii" :template "ihandle FLvalue \"label\", iwidth, iheight, ix, iy" :doc "FLvalue shows current the value of a valuator in a text field" :html "FLvalue.html")) csdoc-opcode-database)
(puthash "fluidSetInterpMethod" (quote (:opcode "fluidSetInterpMethod" :spec " fluidSetInterpMethod iii" :out nil :in "iii" :template "fluidSetInterpMethod ienginenum, ichannelnum, iInterpMethod" :doc "Set interpolation method for channel in Fluid Engine" :html "fluidSetInterpMethod.html")) csdoc-opcode-database)
(puthash "fluidProgramSelect" (quote (:opcode "fluidProgramSelect" :spec " fluidProgramSelect iiiii" :out nil :in "iiiii" :template "fluidProgramSelect ienginenum, ichannelnum, isfnum, ibanknum, ipresetnum" :doc "Assigns a preset from a SoundFont to a channel on a fluidEngine" :html "fluidProgramSelect.html")) csdoc-opcode-database)
(puthash "fluidOut" (quote (:opcode "fluidOut" :spec "aa fluidOut i" :out "aa" :in "i" :template "aleft, aright fluidOut ienginenum" :doc "Outputs the sound from a fluidEngine" :html "fluidOut.html")) csdoc-opcode-database)
(puthash "fluidNote" (quote (:opcode "fluidNote" :spec " fluidNote iiii" :out nil :in "iiii" :template "fluidNote ienginenum, ichannelnum, imidikey, imidivel" :doc "Plays a note at imidikey pitch and imidivel velocity on ichannelnum channel of number ienginenum fluidEngine" :html "fluidNote.html")) csdoc-opcode-database)
(puthash "fluidLoad" (quote (:opcode "fluidLoad" :spec "i fluidLoad Sii" :out "i" :in "Sii" :template "isfnum fluidLoad soundfont, ienginenum[, ilistpresets]" :doc "Loads a SoundFont into an instance of a fluidEngine, optionally listing banks and presets for SoundFont" :html "fluidLoad.html")) csdoc-opcode-database)
(puthash "fluidEngine" (quote (:opcode "fluidEngine" :spec "i fluidEngine iiii" :out "i" :in "iiii" :template "ienginenum fluidEngine [iReverbEnabled] [, iChorusEnabled] [,iNumChannels] [, iPolyphony]" :doc "Instantiates a fluidsynth engine, and returns ienginenum to identify the engine" :html "fluidEngine.html")) csdoc-opcode-database)
(puthash "fluidControl" (quote (:opcode "fluidControl" :spec " fluidControl ikkkk" :out nil :in "ikkkk" :template "fluidControl ienginenum, kstatus, kchannel, kdata1, kdata2" :doc "The fluid opcodes provide a simple Csound opcode wrapper around Peter Hanappes Fluidsynth SoundFont2 synthesizer" :html "fluidControl.html")) csdoc-opcode-database)
(puthash "fluidCCk" (quote (:opcode "fluidCCk" :spec " fluidCCk iiik" :out nil :in "iiik" :template "fluidCCk iEngineNumber, iChannelNumber, iControllerNumber, kValue" :doc "Sends a MIDI controller data (MIDI controller number and value to use) message to a fluid engine by number on the user specified MIDI channel number" :html "fluidCCk.html")) csdoc-opcode-database)
(puthash "fluidCCi" (quote (:opcode "fluidCCi" :spec " fluidCCi iiii" :out nil :in "iiii" :template "fluidCCi iEngineNumber, iChannelNumber, iControllerNumber, iValue" :doc "Sends a MIDI controller data (MIDI controller number and value to use) message to a fluid engine by number on the user specified MIDI channel number" :html "fluidCCi.html")) csdoc-opcode-database)
(puthash "fluidAllOut" (quote (:opcode "fluidAllOut" :spec "aa fluidAllOut " :out "aa" :in nil :template "aleft, aright fluidAllOut" :doc "Collects all audio from all Fluidsynth engines in a performance" :html "fluidAllOut.html")) csdoc-opcode-database)
(puthash "FLupdate" (quote (:opcode "FLupdate" :spec " FLupdate " :out nil :in nil :template "FLupdate" :doc "Same as the FLrun opcode" :html "FLupdate.html")) csdoc-opcode-database)
(puthash "FLtext" (quote (:opcode "FLtext" :spec "ki FLtext \"iiiiiiii" :out "ki" :in "\"iiiiiiii" :template "kout, ihandle FLtext \"label\", imin, imax, istep, itype, iwidth, iheight, ix, iy" :doc "FLtext allows the user to modify a parameter value by directly typing it into a text field" :html "FLtext.html")) csdoc-opcode-database)
(puthash "FLtabsEnd" (quote (:opcode "FLtabsEnd" :spec " FLtabsEnd " :out nil :in nil :template "FLtabsEnd" :doc "Marks the end of a tabbed FLTK interface" :html "FLtabsEnd.html")) csdoc-opcode-database)
(puthash "FLtabs" (quote (:opcode "FLtabs" :spec " FLtabs iiii" :out nil :in "iiii" :template "FLtabs iwidth, iheight, ix, iy" :doc "FLtabs is the “file card tabs” interface that allows useful to display several areas containing widgets in the same windows, alternatively" :html "FLtabs.html")) csdoc-opcode-database)
(puthash "FLslider" (quote (:opcode "FLslider" :spec "ki FLslider \"iiiiiiiii" :out "ki" :in "\"iiiiiiiii" :template "kout, ihandle FLslider \"label\", imin, imax, iexp, itype, idisp, iwidth, iheight, ix, iy" :doc "FLslider puts a slider into the corresponding container" :html "FLslider.html")) csdoc-opcode-database)
(puthash "FLslidBnk2Setk" (quote (:opcode "FLslidBnk2Setk" :spec " FLslidBnk2Setk kiiiii" :out nil :in "kiiiii" :template "FLslidBnk2Setk ktrig, ihandle, ifn [, istartIndex, istartSlid, inumSlid]" :doc "FLslidBnk2Setk modifies the values of a slider bank according to an array of values stored in a table" :html "FLslidBnk2Setk.html")) csdoc-opcode-database)
(puthash "FLslidBnk2Set" (quote (:opcode "FLslidBnk2Set" :spec " FLslidBnk2Set iiiii" :out nil :in "iiiii" :template "FLslidBnk2Set ihandle, ifn [, istartIndex, istartSlid, inumSlid]" :doc "FLslidBnk2Set modifies the values of a slider bank according to an array of values stored in a table" :html "FLslidBnk2Set.html")) csdoc-opcode-database)
(puthash "FLslidBnkSetk" (quote (:opcode "FLslidBnkSetk" :spec " FLslidBnkSetk kiiiii" :out nil :in "kiiiii" :template "FLslidBnkSetk ktrig, ihandle, ifn [, istartIndex, istartSlid, inumSlid]" :doc "FLslidBnkSetk modifies the values of a slider bank according to an array of values stored in a table" :html "FLslidBnkSetk.html")) csdoc-opcode-database)
(puthash "FLslidBnkSet" (quote (:opcode "FLslidBnkSet" :spec " FLslidBnkSet iiiii" :out nil :in "iiiii" :template "FLslidBnkSet ihandle, ifn [, istartIndex, istartSlid, inumSlid]" :doc "FLslidBnkSet modifies the values of a slider bank according to an array of values stored in a table" :html "FLslidBnkSet.html")) csdoc-opcode-database)
(puthash "FLslidBnkGetHandle" (quote (:opcode "FLslidBnkGetHandle" :spec "i FLslidBnkGetHandle " :out "i" :in nil :template "ihandle FLslidBnkGetHandle" :doc "FLslidBnkGetHandle gets the handle of last slider bank created" :html "FLslidBnkGetHandle.html")) csdoc-opcode-database)
(puthash "FLslidBnk2" (quote (:opcode "FLslidBnk2" :spec " FLslidBnk2 \"iiiiiiii" :out nil :in "\"iiiiiiii" :template "FLslidBnk2 \"names\", inumsliders, ioutable, iconfigtable [,iwidth, iheight, ix, iy, istart_index]" :doc "FLslidBnk2 is a widget containing a bank of horizontal sliders" :html "FLslidBnk2.html")) csdoc-opcode-database)
(puthash "FLslidBnk" (quote (:opcode "FLslidBnk" :spec " FLslidBnk \"iiiiiiiiii" :out nil :in "\"iiiiiiiiii" :template "FLslidBnk \"names\", inumsliders [, ioutable] [, iwidth] [, iheight] [, ix] [, iy] [, itypetable] [, iexptable] [, istart_index] [, iminmaxtable]" :doc "FLslidBnk is a widget containing a bank of horizontal sliders" :html "FLslidBnk.html")) csdoc-opcode-database)
(puthash "FLshow" (quote (:opcode "FLshow" :spec " FLshow i" :out nil :in "i" :template "FLshow ihandle" :doc "FLshow restores the visibility of a previously hidden widget" :html "FLshow.html")) csdoc-opcode-database)
(puthash "FLsetVal" (quote (:opcode "FLsetVal" :spec " FLsetVal kki" :out nil :in "kki" :template "FLsetVal ktrig, kvalue, ihandle" :doc "FLsetVal is almost identical to FLsetVal_i" :html "FLsetVal.html")) csdoc-opcode-database)
(puthash "FLsetVal_i" (quote (:opcode "FLsetVal_i" :spec " FLsetVal_i ii" :out nil :in "ii" :template "FLsetVal_i ivalue, ihandle" :doc "FLsetVal_i forces the value of a valuator to a number provided by the user" :html "FLsetVal_i.html")) csdoc-opcode-database)
(puthash "FLsetTextType" (quote (:opcode "FLsetTextType" :spec " FLsetTextType ii" :out nil :in "ii" :template "FLsetTextType itype, ihandle" :doc "FLsetTextType sets some attributes related to the fonts of the text label of the target widget" :html "FLsetTextType.html")) csdoc-opcode-database)
(puthash "FLsetTextSize" (quote (:opcode "FLsetTextSize" :spec " FLsetTextSize ii" :out nil :in "ii" :template "FLsetTextSize isize, ihandle" :doc "FLsetTextSize sets the size of the text label of the target widget" :html "FLsetTextSize.html")) csdoc-opcode-database)
(puthash "FLsetTextColor" (quote (:opcode "FLsetTextColor" :spec " FLsetTextColor iiii" :out nil :in "iiii" :template "FLsetTextColor ired, iblue, igreen, ihandle" :doc "FLsetTextColor sets the color of the text label of the target widget" :html "FLsetTextColor.html")) csdoc-opcode-database)
(puthash "FLsetText" (quote (:opcode "FLsetText" :spec " FLsetText \"i" :out nil :in "\"i" :template "FLsetText \"itext\", ihandle" :doc "FLsetText sets the label of the target widget to the double-quoted text string provided with the itext argument" :html "FLsetText.html")) csdoc-opcode-database)
(puthash "FLsetSnapGroup" (quote (:opcode "FLsetSnapGroup" :spec " FLsetSnapGroup i" :out nil :in "i" :template "FLsetSnapGroup igroup" :doc "FLsetSnapGroup determines the snapshot group of valuators declared after it" :html "FLsetSnapGroup.html")) csdoc-opcode-database)
(puthash "FLsetsnap" (quote (:opcode "FLsetsnap" :spec "ii FLsetsnap iii" :out "ii" :in "iii" :template "inumsnap, inumval FLsetsnap index [, ifn, igroup]" :doc "FLsetsnap stores the current status of all valuators present in the orchestra into a snapshot location (in memory)" :html "FLsetsnap.html")) csdoc-opcode-database)
(puthash "FLsetSize" (quote (:opcode "FLsetSize" :spec " FLsetSize iii" :out nil :in "iii" :template "FLsetSize iwidth, iheight, ihandle" :doc "FLsetSize resizes the target widget (not the size of its text) according to the iwidth and iheight arguments" :html "FLsetSize.html")) csdoc-opcode-database)
(puthash "FLsetPosition" (quote (:opcode "FLsetPosition" :spec " FLsetPosition iii" :out nil :in "iii" :template "FLsetPosition ix, iy, ihandle" :doc "FLsetPosition sets the position of the target widget according to the ix and iy arguments" :html "FLsetPosition.html")) csdoc-opcode-database)
(puthash "FLsetFont" (quote (:opcode "FLsetFont" :spec " FLsetFont ii" :out nil :in "ii" :template "FLsetFont ifont, ihandle" :doc "FLsetFont sets the font type of the target widget" :html "FLsetFont.html")) csdoc-opcode-database)
(puthash "FLsetColor2" (quote (:opcode "FLsetColor2" :spec " FLsetColor2 iiii" :out nil :in "iiii" :template "FLsetColor2 ired, igreen, iblue, ihandle" :doc "FLsetColor2 sets the secondary (or selection) color of the target widget" :html "FLsetColor2.html")) csdoc-opcode-database)
(puthash "FLsetColor" (quote (:opcode "FLsetColor" :spec " FLsetColor iiii" :out nil :in "iiii" :template "FLsetColor ired, igreen, iblue, ihandle" :doc "FLsetColor sets the primary color of the target widget" :html "FLsetColor.html")) csdoc-opcode-database)
(puthash "FLsetBox" (quote (:opcode "FLsetBox" :spec " FLsetBox ii" :out nil :in "ii" :template "FLsetBox itype, ihandle" :doc "FLsetBox sets the appearance of a box surrounding the target widget" :html "FLsetBox.html")) csdoc-opcode-database)
(puthash "FLsetAlign" (quote (:opcode "FLsetAlign" :spec " FLsetAlign ii" :out nil :in "ii" :template "FLsetAlign ialign, ihandle" :doc "FLsetAlign sets the text alignment of the label of the target widget" :html "FLsetAlign.html")) csdoc-opcode-database)
(puthash "FLscrollEnd" (quote (:opcode "FLscrollEnd" :spec " FLscrollEnd " :out nil :in nil :template "FLscrollEnd" :doc "A FLTK opcode that marks the end of an area with scrollbars" :html "FLscrollEnd.html")) csdoc-opcode-database)
(puthash "FLscroll" (quote (:opcode "FLscroll" :spec " FLscroll iiii" :out nil :in "iiii" :template "FLscroll iwidth, iheight [, ix] [, iy]" :doc "FLscroll adds scroll bars to an area" :html "FLscroll.html")) csdoc-opcode-database)
(puthash "FLsavesnap" (quote (:opcode "FLsavesnap" :spec " FLsavesnap \"i" :out nil :in "\"i" :template "FLsavesnap \"filename\" [, igroup]" :doc "FLsavesnap saves all snapshots currently created (i" :html "FLsavesnap.html")) csdoc-opcode-database)
(puthash "FLrun" (quote (:opcode "FLrun" :spec " FLrun " :out nil :in nil :template "FLrun" :doc "Starts the FLTK widget thread" :html "FLrun.html")) csdoc-opcode-database)
(puthash "FLroller" (quote (:opcode "FLroller" :spec "ki FLroller \"iiiiiiiiii" :out "ki" :in "\"iiiiiiiiii" :template "kout, ihandle FLroller \"label\", imin, imax, istep, iexp, itype, idisp, iwidth, iheight, ix, iy" :doc "FLroller is a sort of knob, but put transversally" :html "FLroller.html")) csdoc-opcode-database)
(puthash "FLprintk2" (quote (:opcode "FLprintk2" :spec " FLprintk2 ki" :out nil :in "ki" :template "FLprintk2 kval, idisp" :doc "FLprintk2 is similar to FLprintk but shows a k-rate variables value only when it changes" :html "FLprintk2.html")) csdoc-opcode-database)
(puthash "FLprintk" (quote (:opcode "FLprintk" :spec " FLprintk iki" :out nil :in "iki" :template "FLprintk itime, kval, idisp" :doc "FLprintk is similar to printk but shows values of a k-rate signal in a text field instead of on the console" :html "FLprintk.html")) csdoc-opcode-database)
(puthash "FLpanelEnd" (quote (:opcode "FLpanelEnd" :spec " FLpanelEnd " :out nil :in nil :template "FLpanelEnd" :doc "Marks the end of a group of FLTK widgets contained inside of a window (panel)" :html "FLpanelEnd.html")) csdoc-opcode-database)
(puthash "FLpanel" (quote (:opcode "FLpanel" :spec " FLpanel \"iiiiiii" :out nil :in "\"iiiiiii" :template "FLpanel \"label\", iwidth, iheight [, ix] [, iy] [, iborder] [, ikbdcapture] [, iclose]" :doc "Creates a window that contains FLTK widgets" :html "FLpanel.html")) csdoc-opcode-database)
(puthash "FLpackEnd" (quote (:opcode "FLpackEnd" :spec " FLpackEnd " :out nil :in nil :template "FLpackEnd" :doc "Marks the end of a group of compressed or aligned FLTK widgets" :html "FLpackEnd.html")) csdoc-opcode-database)
(puthash "FLpack" (quote (:opcode "FLpack" :spec " FLpack iiiiiii" :out nil :in "iiiiiii" :template "FLpack iwidth, iheight, ix, iy, itype, ispace, iborder" :doc "FLpack provides the functionality of compressing and aligning widgets" :html "FLpack.html")) csdoc-opcode-database)
(puthash "floor" (quote (:function "floor" :html "floor.html")) csdoc-opcode-database)
(puthash "flooper2" (quote (:opcode "flooper2" :spec "a flooper2 kkkkkiiiii" :out "a" :in "kkkkkiiiii" :template "asig flooper2 kamp, kpitch, kloopstart, kloopend, kcrossfade, ifn [, istart, imode, ifenv, iskip]" :doc "This opcode implements a crossfading looper with variable loop parameters and three looping modes, optionally using a table for its crossfade shape" :html "flooper2.html")) csdoc-opcode-database)
(puthash "flooper" (quote (:opcode "flooper" :spec "a flooper kkiiii" :out "a" :in "kkiiii" :template "asig flooper kamp, kpitch, istart, idur, ifad, ifn" :doc "This opcode reads audio from a function table and plays it back in a loop with user-defined start time, duration and crossfade time" :html "flooper.html")) csdoc-opcode-database)
(puthash "FLmouse" (quote (:opcode "FLmouse" :spec "kkkkk FLmouse i" :out "kkkkk" :in "i" :template "kx, ky, kb1, kb2, kb3 FLmouse [, imode]" :doc "FLmouse returns the coordinates of the mouse position within an FLTK panel and the state of the three mouse buttons" :html "FLmouse.html")) csdoc-opcode-database)
(puthash "FLloadsnap" (quote (:opcode "FLloadsnap" :spec " FLloadsnap \"i" :out nil :in "\"i" :template "FLloadsnap \"filename\" [, igroup]" :doc "FLloadsnap loads all the snapshots contained in a file into the memory bank of the current orchestra" :html "FLloadsnap.html")) csdoc-opcode-database)
(puthash "FLlabel" (quote (:opcode "FLlabel" :spec " FLlabel iiiiii" :out nil :in "iiiiii" :template "FLlabel isize, ifont, ialign, ired, igreen, iblue" :doc "Modifies a set of parameters related to the text label appearence of a widget (i" :html "FLlabel.html")) csdoc-opcode-database)
(puthash "FLknob" (quote (:opcode "FLknob" :spec "ki FLknob \"iiiiiiiii" :out "ki" :in "\"iiiiiiiii" :template "kout, ihandle FLknob \"label\", imin, imax, iexp, itype, idisp, iwidth, ix, iy [, icursorsize]" :doc "A FLTK widget opcode that creates a knob" :html "FLknob.html")) csdoc-opcode-database)
(puthash "FLkeyIn" (quote (:opcode "FLkeyIn" :spec "k FLkeyIn i" :out "k" :in "i" :template "kascii FLkeyIn [ifn]" :doc "FLkeyIn informs about the status of a key pressed by the user on the alphanumeric keyboard when an FLTK panel has got the focus" :html "FLkeyIn.html")) csdoc-opcode-database)
(puthash "FLjoy" (quote (:opcode "FLjoy" :spec "kkii FLjoy \"iiiiiiiiiiii" :out "kkii" :in "\"iiiiiiiiiiii" :template "koutx, kouty, ihandlex, ihandley FLjoy \"label\", iminx, imaxx, iminy, imaxy, iexpx, iexpy, idispx, idispy, iwidth, iheight, ix, iy" :doc "FLjoy is a squared area that allows the user to modify two output values at the same time" :html "FLjoy.html")) csdoc-opcode-database)
(puthash "FLhvsBox" (quote (:opcode "FLhvsBox" :spec "i FLhvsBox iiiiiii" :out "i" :in "iiiiiii" :template "ihandle FLhvsBox inumlinesX, inumlinesY, iwidth, iheight, ix, iy [, image]" :doc "FLhvsBox displays a box with a grid useful for visualizing two-dimensional Hyper Vectorial Synthesis" :html "FLhvsBox.html")) csdoc-opcode-database)
(puthash "FLhide" (quote (:opcode "FLhide" :spec " FLhide i" :out nil :in "i" :template "FLhide ihandle" :doc "Hides the target FLTK widget, making it invisible" :html "FLhide.html")) csdoc-opcode-database)
(puthash "FLgroup" (quote (:opcode "FLgroup" :spec " FLgroup \"iiiiii" :out nil :in "\"iiiiii" :template "FLgroup \"label\", iwidth, iheight, ix, iy [, iborder] [, image]" :doc "A FLTK container opcode that groups child widgets" :html "FLgroup.html")) csdoc-opcode-database)
(puthash "FLgetsnap" (quote (:opcode "FLgetsnap" :spec "i FLgetsnap ii" :out "i" :in "ii" :template "inumsnap FLgetsnap index [, igroup]" :doc "Retrieves a previously stored snapshot (in memory), i" :html "FLgetsnap.html")) csdoc-opcode-database)
(puthash "FLexecButton" (quote (:opcode "FLexecButton" :spec "i FLexecButton \"iiii" :out "i" :in "\"iiii" :template "ihandle FLexecButton \"command\", iwidth, iheight, ix, iy" :doc "A FLTK widget opcode that creates a button that executes a command" :html "FLexecButton.html")) csdoc-opcode-database)
(puthash "FLcount" (quote (:opcode "FLcount" :spec "ki FLcount \"iiiiiiiiiikkkk" :out "ki" :in "\"iiiiiiiiiikkkk" :template "kout, ihandle FLcount \"label\", imin, imax, istep1, istep2, itype, iwidth, iheight, ix, iy, iopcode [, kp1] [, kp2] [, kp3] [...] [, kpN]" :doc "Allows the user to increase/decrease a value with mouse clicks on a corresponding arrow button" :html "FLcount.html")) csdoc-opcode-database)
(puthash "FLcolor2" (quote (:opcode "FLcolor2" :spec " FLcolor2 iii" :out nil :in "iii" :template "FLcolor2 ired, igreen, iblue" :doc "FLcolor2 is the same of FLcolor except it affects the secondary (selection) color" :html "FLcolor2.html")) csdoc-opcode-database)
(puthash "FLcolor" (quote (:opcode "FLcolor" :spec " FLcolor iiiiii" :out nil :in "iiiiii" :template "FLcolor ired, igreen, iblue [, ired2, igreen2, iblue2]" :doc "Sets the primary colors to RGB values given by the user" :html "FLcolor.html")) csdoc-opcode-database)
(puthash "FLcloseButton" (quote (:opcode "FLcloseButton" :spec "i FLcloseButton \"iiii" :out "i" :in "\"iiii" :template "ihandle FLcloseButton \"label\", iwidth, iheight, ix, iy" :doc "A FLTK widget opcode that creates a button that will close the panel window it is a part of" :html "FLcloseButton.html")) csdoc-opcode-database)
(puthash "FLbutton" (quote (:opcode "FLbutton" :spec "ki FLbutton \"iiiiiiiikkkkkk" :out "ki" :in "\"iiiiiiiikkkkkk" :template "kout, ihandle FLbutton \"label\", ion, ioff, itype, iwidth, iheight, ix, iy, iopcode [, kp1] [, kp2] [, kp3] [, kp4] [, kp5] [....] [, kpN]" :doc "A FLTK widget opcode that creates a button" :html "FLbutton.html")) csdoc-opcode-database)
(puthash "FLbutBank" (quote (:opcode "FLbutBank" :spec "ki FLbutBank iiiiiiiikkkkkk" :out "ki" :in "iiiiiiiikkkkkk" :template "kout, ihandle FLbutBank itype, inumx, inumy, iwidth, iheight, ix, iy, iopcode [, kp1] [, kp2] [, kp3] [, kp4] [, kp5] [....] [, kpN]" :doc "A FLTK widget opcode that creates a bank of buttons" :html "FLbutBank.html")) csdoc-opcode-database)
(puthash "FLbox" (quote (:opcode "FLbox" :spec "i FLbox \"iiiiiiii" :out "i" :in "\"iiiiiiii" :template "ihandle FLbox \"label\", itype, ifont, isize, iwidth, iheight, ix, iy [, image]" :doc "A FLTK widget that displays text inside of a box" :html "FLbox.html")) csdoc-opcode-database)
(puthash "flashtxt" (quote (:opcode "flashtxt" :spec " flashtxt iS" :out nil :in "iS" :template "flashtxt iwhich, String" :doc "Allows text to be displayed from instruments like sliders etc" :html "flashtxt.html")) csdoc-opcode-database)
(puthash "flanger" (quote (:opcode "flanger" :spec "a flanger aaki" :out "a" :in "aaki" :template "ares flanger asig, adel, kfeedback [, imaxd]" :doc "A user controlled flanger" :html "flanger.html")) csdoc-opcode-database)
(puthash "fiopen" (quote (:opcode "fiopen" :spec "i fiopen ii" :out "i" :in "ii" :template "ihandle fiopen ifilename, imode" :doc "fiopen can be used to open a file in one of the specified modes" :html "fiopen.html")) csdoc-opcode-database)
(puthash "fink" (quote (:opcode "fink" :spec " fink iiikkk" :out nil :in "iiikkk" :template "fink ifilename, iskipframes, iformat, kin1 [, kin2] [, kin3] [,...]" :doc "Read signals from a file at k-rate" :html "fink.html")) csdoc-opcode-database)
(puthash "fini" (quote (:opcode "fini" :spec " fini iiiiii" :out nil :in "iiiiii" :template "fini ifilename, iskipframes, iformat, in1 [, in2] [, in3] [, ...]" :doc "Read signals from a file at i-rate" :html "fini.html")) csdoc-opcode-database)
(puthash "fin" (quote (:opcode "fin" :spec " fin iiiaaa" :out nil :in "iiiaaa" :template "fin ifilename, iskipframes, iformat, ain1 [, ain2] [, ain3] [,...]" :doc "Read signals from a file at a-rate" :html "fin.html")) csdoc-opcode-database)
(puthash "filter2" (quote (:opcode "filter2" :spec "x filter2 xiiiiiiii" :out "x" :in "xiiiiiiii" :template "ares filter2 asig, iM, iN, ib0, ib1, ..., ibM, ia1, ia2, ..., iaN
 kres filter2 ksig, iM, iN, ib0, ib1, ..., ibM, ia1, ia2, ..., iaN" :doc "General purpose custom filter with time-varying pole control" :html "filter2.html")) csdoc-opcode-database)
(puthash "filesr" (quote (:opcode "filesr" :spec "i filesr ii" :out "i" :in "ii" :template "ir filesr ifilcod [, iallowraw]" :doc "Returns the sample rate of a sound file" :html "filesr.html")) csdoc-opcode-database)
(puthash "filepeak" (quote (:opcode "filepeak" :spec "i filepeak ii" :out "i" :in "ii" :template "ir filepeak ifilcod [, ichnl]" :doc "Returns the peak absolute value of a sound file" :html "filepeak.html")) csdoc-opcode-database)
(puthash "filenchnls" (quote (:opcode "filenchnls" :spec "i filenchnls ii" :out "i" :in "ii" :template "ir filenchnls ifilcod [, iallowraw]" :doc "Returns the number of channels in a sound file" :html "filenchnls.html")) csdoc-opcode-database)
(puthash "filelen" (quote (:opcode "filelen" :spec "i filelen ii" :out "i" :in "ii" :template "ir filelen ifilcod, [iallowraw]" :doc "Returns the length of a sound file" :html "filelen.html")) csdoc-opcode-database)
(puthash "ficlose" (quote (:opcode "ficlose" :spec " ficlose x" :out nil :in "x" :template "ficlose ihandle
 ficlose Sfilename" :doc "ficlose can be used to close a file which was opened with fiopen" :html "ficlose.html")) csdoc-opcode-database)
(puthash "expsegr" (quote (:opcode "expsegr" :spec "x expsegr iiiiiii" :out "x" :in "iiiiiii" :template "ares expsegr ia, idur1, ib [, idur2] [, ic] [...], irel, iz
 kres expsegr ia, idur1, ib [, idur2] [, ic] [...], irel, iz" :doc "Trace a series of exponential segments between specified points including a release segment" :html "expsegr.html")) csdoc-opcode-database)
(puthash "expsega" (quote (:opcode "expsega" :spec "a expsega iiiii" :out "a" :in "iiiii" :template "ares expsega ia, idur1, ib [, idur2] [, ic] [...]" :doc "An exponential segment generator operating at a-rate" :html "expsega.html")) csdoc-opcode-database)
(puthash "expseg" (quote (:opcode "expseg" :spec "x expseg iiiii" :out "x" :in "iiiii" :template "ares expseg ia, idur1, ib [, idur2] [, ic] [...]
 kres expseg ia, idur1, ib [, idur2] [, ic] [...]" :doc "Trace a series of exponential segments between specified points" :html "expseg.html")) csdoc-opcode-database)
(puthash "exprand" (quote (:opcode "exprand" :spec "x exprand k" :out "x" :in "k" :template "ares exprand klambda
 ires exprand klambda
 kres exprand klambda" :doc "Exponential distribution random number generator (positive values only)" :html "exprand.html")) csdoc-opcode-database)
(puthash "expon" (quote (:opcode "expon" :spec "x expon iii" :out "x" :in "iii" :template "ares expon ia, idur, ib
 kres expon ia, idur, ib" :doc "Trace an exponential curve between specified points" :html "expon.html")) csdoc-opcode-database)
(puthash "expcurve" (quote (:opcode "expcurve" :spec "k expcurve kk" :out "k" :in "kk" :template "kout expcurve kindex, ksteepness" :doc "Generates an exponential curve in range 0 to 1 of arbitrary steepness" :html "expcurve.html")) csdoc-opcode-database)
(puthash "exp" (quote (:function "exp" :html "exp.html")) csdoc-opcode-database)
(puthash "exitnow" (quote (:opcode "exitnow" :spec " exitnow " :out nil :in nil :template "exitnow" :doc "In Csound4 calls an exit function to leave Csound as fast as possible" :html "exitnow.html")) csdoc-opcode-database)
(puthash "event_i" (quote (:opcode "event_i" :spec " event_i \"iiiii" :out nil :in "\"iiiii" :template "event_i \"scorechar\", iinsnum, idelay, idur, [, ip4] [, ip5] [, ...]
 event_i \"scorechar\", \"insname\", idelay, idur, [, ip4] [, ip5] [, ...]" :doc "Generates a score event from an instrument" :html "event_i.html")) csdoc-opcode-database)
(puthash "event" (quote (:opcode "event" :spec " event \"kkkkk" :out nil :in "\"kkkkk" :template "event \"scorechar\", kinsnum, kdelay, kdur, [, kp4] [, kp5] [, ...]
 event \"scorechar\", \"insname\", kdelay, kdur, [, kp4] [, kp5] [, ...]" :doc "Generates a score event from an instrument" :html "event.html")) csdoc-opcode-database)
(puthash "eqfil" (quote (:opcode "eqfil" :spec "a eqfil akkki" :out "a" :in "akkki" :template "asig eqfil ain, kcf, kbw, kgain[, istor]" :doc "The opcode eqfil is a 2nd order tunable equalisation filter based on Regalia and Mitra design (\"Tunable Digital Frequency Response Equalization Filters\", IEEE Trans" :html "eqfil.html")) csdoc-opcode-database)
(puthash "envlpxr" (quote (:opcode "envlpxr" :spec "x envlpxr xiiiiiii" :out "x" :in "xiiiiiii" :template "ares envlpxr xamp, irise, idec, ifn, iatss, iatdec [, ixmod] [,irind]
 kres envlpxr kamp, irise, idec, ifn, iatss, iatdec [, ixmod] [,irind]" :doc "envlpxr is the same as envlpx except that the final segment is entered only on sensing a MIDI note release" :html "envlpxr.html")) csdoc-opcode-database)
(puthash "envlpx" (quote (:opcode "envlpx" :spec "x envlpx xiiiiiii" :out "x" :in "xiiiiiii" :template "ares envlpx xamp, irise, idur, idec, ifn, iatss, iatdec [, ixmod]
 kres envlpx kamp, irise, idur, idec, ifn, iatss, iatdec [, ixmod]" :doc "envlpx -- apply an envelope consisting of 3 segments: 
 stored function rise shape
 modified exponential pseudo steady state
 exponential decay" :html "envlpx.html")) csdoc-opcode-database)
(puthash "endop" (quote (:opcode "endop" :spec " endop " :out nil :in nil :template "endop" :doc "Marks the end of an user-defined opcode block" :html "endop.html")) csdoc-opcode-database)
(puthash "endin" (quote (:opcode "endin" :spec " endin " :out nil :in nil :template "endin" :doc "Ends the current instrument block" :html "endin.html")) csdoc-opcode-database)
(puthash "endif" (quote (:opcode "endif" :spec " endif " :out nil :in nil :template "endif" :doc "Closes a block of code that begins with an \"if" :html "endif.html")) csdoc-opcode-database)
(puthash "else" (quote (:opcode "else" :spec " else " :out nil :in nil :template "else" :doc "Executes a block of code when an \"if" :html "else.html")) csdoc-opcode-database)
(puthash "duserrnd" (quote (:opcode "duserrnd" :spec "x duserrnd x" :out "x" :in "x" :template "aout duserrnd ktableNum
 iout duserrnd itableNum
 kout duserrnd ktableNum" :doc "Discrete USER-defined-distribution RaNDom generator" :html "duserrnd.html")) csdoc-opcode-database)
(puthash "dumpk4" (quote (:opcode "dumpk4" :spec " dumpk4 kkkkiii" :out nil :in "kkkkiii" :template "dumpk4 ksig1, ksig2, ksig3, ksig4, ifilname, iformat, iprd" :doc "Periodically writes four orchestra control-signal values to a named external file in a specific format" :html "dumpk4.html")) csdoc-opcode-database)
(puthash "dumpk3" (quote (:opcode "dumpk3" :spec " dumpk3 kkkiii" :out nil :in "kkkiii" :template "dumpk3 ksig1, ksig2, ksig3, ifilname, iformat, iprd" :doc "Periodically writes three orchestra control-signal values to a named external file in a specific format" :html "dumpk3.html")) csdoc-opcode-database)
(puthash "dumpk2" (quote (:opcode "dumpk2" :spec " dumpk2 kkiii" :out nil :in "kkiii" :template "dumpk2 ksig1, ksig2, ifilname, iformat, iprd" :doc "Periodically writes two orchestra control-signal values to a named external file in a specific format" :html "dumpk2.html")) csdoc-opcode-database)
(puthash "dumpk" (quote (:opcode "dumpk" :spec " dumpk kiii" :out nil :in "kiii" :template "dumpk ksig, ifilname, iformat, iprd" :doc "Periodically writes an orchestra control-signal value to a named external file in a specific format" :html "dumpk.html")) csdoc-opcode-database)
(puthash "dssilist" (quote (:opcode "dssilist" :spec " dssilist " :out nil :in nil :template "dssilist" :doc "dssilist checks the variables DSSI_PATH and LADSPA_PATH and lists all plugins available in all plugin libraries there" :html "dssilist.html")) csdoc-opcode-database)
(puthash "dssiinit" (quote (:opcode "dssiinit" :spec "i dssiinit iii" :out "i" :in "iii" :template "ihandle dssiinit ilibraryname, iplugindex [, iverbose]" :doc "dssiinit is used to load a DSSI or LADSPA plugin into memory for use with the other dssi4cs opcodes" :html "dssiinit.html")) csdoc-opcode-database)
(puthash "dssictls" (quote (:opcode "dssictls" :spec " dssictls iikk" :out nil :in "iikk" :template "dssictls ihandle, iport, kvalue, ktrigger" :doc "dssictls sends control values to a plugins control port" :html "dssictls.html")) csdoc-opcode-database)
(puthash "dssiaudio" (quote (:opcode "dssiaudio" :spec "aaaa dssiaudio iaaaa" :out "aaaa" :in "iaaaa" :template "aout1 [, aout2, aout3, aout4] dssiaudio ihandle, ain1 [,ain2, ain3, ain4]" :doc "dssiaudio generates audio by processing an input signal through a LADSPA plugin" :html "dssiaudio.html")) csdoc-opcode-database)
(puthash "dssiactivate" (quote (:opcode "dssiactivate" :spec " dssiactivate ik" :out nil :in "ik" :template "dssiactivate ihandle, ktoggle" :doc "dssiactivate is used to activate or deactivate a DSSI or LADSPA plugin" :html "dssiactivate.html")) csdoc-opcode-database)
(puthash "dripwater" (quote (:opcode "dripwater" :spec "a dripwater kiiiiiii" :out "a" :in "kiiiiiii" :template "ares dripwater kamp, idettack [, inum] [, idamp] [, imaxshake] [, ifreq] [, ifreq1] [, ifreq2]" :doc "dripwater is a semi-physical model of a water drop" :html "dripwater.html")) csdoc-opcode-database)
(puthash "downsamp" (quote (:opcode "downsamp" :spec "k downsamp ai" :out "k" :in "ai" :template "kres downsamp asig [, iwlen]" :doc "Modify a signal by down-sampling" :html "downsamp.html")) csdoc-opcode-database)
(puthash "divz" (quote (:opcode "divz" :spec "x divz xxx" :out "x" :in "xxx" :template "ares divz xa, xb, ksubst
 ires divz ia, ib, isubst
 kres divz ka, kb, ksubst" :doc "Safely divides two numbers" :html "divz.html")) csdoc-opcode-database)
(puthash "distort1" (quote (:opcode "distort1" :spec "a distort1 akkkki" :out "a" :in "akkkki" :template "ares distort1 asig, kpregain, kpostgain, kshape1, kshape2[, imode]" :doc "Implementation of modified hyperbolic tangent distortion" :html "distort1.html")) csdoc-opcode-database)
(puthash "distort" (quote (:opcode "distort" :spec "a distort akiii" :out "a" :in "akiii" :template "ar distort asig, kdist, ifn[, ihp, istor]" :doc nil :html "distort.html")) csdoc-opcode-database)
(puthash "display" (quote (:opcode "display" :spec " display xiii" :out nil :in "xiii" :template "display xsig, iprd [, inprds] [, iwtflg]" :doc "These units will print orchestra init-values, or produce graphic display of orchestra control signals and audio signals" :html "display.html")) csdoc-opcode-database)
(puthash "dispfft" (quote (:opcode "dispfft" :spec " dispfft xiiiii" :out nil :in "xiiiii" :template "dispfft xsig, iprd, iwsiz [, iwtyp] [, idbout] [, iwtflg]" :doc "These units will print orchestra init-values, or produce graphic display of orchestra control signals and audio signals" :html "dispfft.html")) csdoc-opcode-database)
(puthash "diskin2" (quote (:opcode "diskin2" :spec "aaa diskin2 ikiiiiii" :out "aaa" :in "ikiiiiii" :template "a1[, a2[, ... a24]] diskin2 ifilcod, kpitch[, iskiptim [, iwrap[, iformat [, iwsize[, ibufsize[, iskipinit]]]]]]" :doc "Reads audio data from a file, and can alter its pitch using one of several available interpolation types, as well as convert the sample rate to match the orchestra sr setting" :html "diskin2.html")) csdoc-opcode-database)
(puthash "diskin" (quote (:opcode "diskin" :spec "aaaa diskin ikiiii" :out "aaaa" :in "ikiiii" :template "ar1 [, ar2 [, ar3 [, ... ar24]]] diskin ifilcod, kpitch [, iskiptim] [, iwraparound] [, iformat] [, iskipinit]" :doc "Deprecated" :html "diskin.html")) csdoc-opcode-database)
(puthash "diskgrain" (quote (:opcode "diskgrain" :spec "a diskgrain Skkkkkiiii" :out "a" :in "Skkkkkiiii" :template "asig diskgrain Sfname, kamp, kfreq, kpitch, kgrsize, kprate, ifun, iolaps [,imaxgrsize , ioffset]" :doc "diskgrain implements synchronous granular synthesis" :html "diskgrain.html")) csdoc-opcode-database)
(puthash "diff" (quote (:opcode "diff" :spec "x diff xi" :out "x" :in "xi" :template "ares diff asig [, iskip]
 kres diff ksig [, iskip]" :doc "Modify a signal by differentiation" :html "diff.html")) csdoc-opcode-database)
(puthash "denorm" (quote (:opcode "denorm" :spec " denorm aaa" :out nil :in "aaa" :template "denorm a1[, a2[, a3[, ... ]]]" :doc "Mixes low level (~1e-20 for floats, and ~1e-56 for doubles) noise to a list of a-rate signals" :html "denorm.html")) csdoc-opcode-database)
(puthash "deltapxw" (quote (:opcode "deltapxw" :spec " deltapxw aai" :out nil :in "aai" :template "deltapxw ain, adel, iwsize" :doc "deltapxw mixes the input signal to a delay line" :html "deltapxw.html")) csdoc-opcode-database)
(puthash "deltapx" (quote (:opcode "deltapx" :spec "a deltapx ai" :out "a" :in "ai" :template "aout deltapx adel, iwsize" :doc "deltapx is similar to deltapi or deltap3" :html "deltapx.html")) csdoc-opcode-database)
(puthash "deltapn" (quote (:opcode "deltapn" :spec "a deltapn x" :out "a" :in "x" :template "ares deltapn xnumsamps" :doc "Tap a delay line at variable offset times" :html "deltapn.html")) csdoc-opcode-database)
(puthash "deltapi" (quote (:opcode "deltapi" :spec "a deltapi x" :out "a" :in "x" :template "ares deltapi xdlt" :doc "Taps a delay line at variable offset times, uses interpolation" :html "deltapi.html")) csdoc-opcode-database)
(puthash "deltap3" (quote (:opcode "deltap3" :spec "a deltap3 x" :out "a" :in "x" :template "ares deltap3 xdlt" :doc "Taps a delay line at variable offset times, uses cubic interpolation" :html "deltap3.html")) csdoc-opcode-database)
(puthash "deltap" (quote (:opcode "deltap" :spec "a deltap k" :out "a" :in "k" :template "ares deltap kdlt" :doc "Tap a delay line at variable offset times" :html "deltap.html")) csdoc-opcode-database)
(puthash "delayw" (quote (:opcode "delayw" :spec " delayw a" :out nil :in "a" :template "delayw asig" :doc "Writes the audio signal to a digital delay line" :html "delayw.html")) csdoc-opcode-database)
(puthash "delayr" (quote (:opcode "delayr" :spec "a delayr ii" :out "a" :in "ii" :template "ares delayr idlt [, iskip]" :doc "Reads from an automatically established digital delay line" :html "delayr.html")) csdoc-opcode-database)
(puthash "delayk" (quote (:opcode "delayk" :spec "k delayk kii" :out "k" :in "kii" :template "kr delayk ksig, idel[, imode]" :doc "k-rate delay opcodes" :html "delayk.html")) csdoc-opcode-database)
(puthash "delay1" (quote (:opcode "delay1" :spec "a delay1 ai" :out "a" :in "ai" :template "ares delay1 asig [, iskip]" :doc "Delays an input signal by one sample" :html "delay1.html")) csdoc-opcode-database)
(puthash "delay" (quote (:opcode "delay" :spec "a delay aii" :out "a" :in "aii" :template "ares delay asig, idlt [, iskip]" :doc "A signal can be read from or written into a delay path, or it can be automatically delayed by some time interval" :html "delay.html")) csdoc-opcode-database)
(puthash "dconv" (quote (:opcode "dconv" :spec "a dconv aii" :out "a" :in "aii" :template "ares dconv asig, isize, ifn" :doc "A direct convolution opcode" :html "dconv.html")) csdoc-opcode-database)
(puthash "dcblock2" (quote (:opcode "dcblock2" :spec "a dcblock2 aii" :out "a" :in "aii" :template "ares dcblock2 ain [, iorder] [, iskip]" :doc "Implements a DC blocking filter with improved DC attenuation" :html "dcblock2.html")) csdoc-opcode-database)
(puthash "dcblock" (quote (:opcode "dcblock" :spec "a dcblock ai" :out "a" :in "ai" :template "ares dcblock ain [, igain]" :doc "Implements the DC blocking filter 
 Y[i] = X[i] - X[i-1] + (igain * Y[i-1])      " :html "dcblock.html")) csdoc-opcode-database)
(puthash "dbfsamp" (quote (:function "dbfsamp" :html "dbfsamp.html")) csdoc-opcode-database)
(puthash "dbamp" (quote (:function "dbamp" :html "dbamp.html")) csdoc-opcode-database)
(puthash "db" (quote (:function "db" :html "db.html")) csdoc-opcode-database)
(puthash "dates" (quote (:opcode "dates" :spec "S dates i" :out "S" :in "i" :template "Sir dates [ itime]" :doc "Returns as a string the date and time specified" :html "dates.html")) csdoc-opcode-database)
(puthash "date" (quote (:opcode "date" :spec "i date " :out "i" :in nil :template "ir date" :doc "Returns the number seconds since 1 January 1970, using the operating systems clock" :html "date.html")) csdoc-opcode-database)
(puthash "dam" (quote (:opcode "dam" :spec "a dam akiiii" :out "a" :in "akiiii" :template "ares dam asig, kthreshold, icomp1, icomp2, irtime, iftime" :doc "This opcode dynamically modifies a gain value applied to the input sound ain by comparing its power level to a given threshold level" :html "dam.html")) csdoc-opcode-database)
(puthash "cuserrnd" (quote (:opcode "cuserrnd" :spec "x cuserrnd xxx" :out "x" :in "xxx" :template "aout cuserrnd kmin, kmax, ktableNum
 iout cuserrnd imin, imax, itableNum
 kout cuserrnd kmin, kmax, ktableNum" :doc "Continuous USER-defined-distribution RaNDom generator" :html "cuserrnd.html")) csdoc-opcode-database)
(puthash "ctrlinit" (quote (:opcode "ctrlinit" :spec " ctrlinit iiiiiii" :out nil :in "iiiiiii" :template "ctrlinit ichnl, ictlno1, ival1 [, ictlno2] [, ival2] [, ictlno3] [, ival3] [,...ival32]" :doc "Sets the initial values for a set of MIDI controllers" :html "ctrlinit.html")) csdoc-opcode-database)
(puthash "ctrl7" (quote (:opcode "ctrl7" :spec "x ctrl7 iixxi" :out "x" :in "iixxi" :template "idest ctrl7 ichan, ictlno, imin, imax [, ifn]
 kdest ctrl7 ichan, ictlno, kmin, kmax [, ifn]
 adest ctrl7 ichan, ictlno, kmin, kmax [, ifn] [, icutoff]" :doc "Allows a floating-point 7-bit MIDI signal scaled with a minimum and a maximum range" :html "ctrl7.html")) csdoc-opcode-database)
(puthash "ctrl21" (quote (:opcode "ctrl21" :spec "x ctrl21 iiiixxi" :out "x" :in "iiiixxi" :template "idest ctrl21 ichan, ictlno1, ictlno2, ictlno3, imin, imax [, ifn]
 kdest ctrl21 ichan, ictlno1, ictlno2, ictlno3, kmin, kmax [, ifn]" :doc "Allows a floating-point 21-bit MIDI signal scaled with a minimum and a maximum range" :html "ctrl21.html")) csdoc-opcode-database)
(puthash "ctrl14" (quote (:opcode "ctrl14" :spec "x ctrl14 iiixxi" :out "x" :in "iiixxi" :template "idest ctrl14 ichan, ictlno1, ictlno2, imin, imax [, ifn]
 kdest ctrl14 ichan, ictlno1, ictlno2, kmin, kmax [, ifn]" :doc "Allows a floating-point 14-bit MIDI signal scaled with a minimum and a maximum range" :html "ctrl14.html")) csdoc-opcode-database)
(puthash "crunch" (quote (:opcode "crunch" :spec "a crunch iiiii" :out "a" :in "iiiii" :template "ares crunch iamp, idettack [, inum] [, idamp] [, imaxshake]" :doc "crunch is a semi-physical model of a crunch sound" :html "crunch.html")) csdoc-opcode-database)
(puthash "cross2" (quote (:opcode "cross2" :spec "a cross2 aaiiik" :out "a" :in "aaiiik" :template "ares cross2 ain1, ain2, isize, ioverlap, iwin, kbias" :doc "This is an implementation of cross synthesis using FFTs" :html "cross2.html")) csdoc-opcode-database)
(puthash "cpuprc" (quote (:opcode "cpuprc" :spec " cpuprc ii" :out nil :in "ii" :template "cpuprc insnum, ipercent" :doc "Control allocation of cpu resources on a per-instrument basis, to optimize realtime output" :html "cpuprc.html")) csdoc-opcode-database)
(puthash "cpsxpch" (quote (:opcode "cpsxpch" :spec "i cpsxpch iiii" :out "i" :in "iiii" :template "icps cpsxpch ipch, iequal, irepeat, ibase" :doc "Converts a pitch-class value into cycles-per-second (Hz) for equal divisions of any interval" :html "cpsxpch.html")) csdoc-opcode-database)
(puthash "cpstuni" (quote (:opcode "cpstuni" :spec "i cpstuni ii" :out "i" :in "ii" :template "icps cpstuni index, ifn" :doc "Returns micro-tuning values at init-rate" :html "cpstuni.html")) csdoc-opcode-database)
(puthash "cpstun" (quote (:opcode "cpstun" :spec "k cpstun kkk" :out "k" :in "kkk" :template "kcps cpstun ktrig, kindex, kfn" :doc "Returns micro-tuning values at k-rate" :html "cpstun.html")) csdoc-opcode-database)
(puthash "cpstmid" (quote (:opcode "cpstmid" :spec "i cpstmid i" :out "i" :in "i" :template "icps cpstmid ifn" :doc "This unit is similar to cpsmidi, but allows fully customized micro-tuning scales" :html "cpstmid.html")) csdoc-opcode-database)
(puthash "cpspch" (quote (:function "cpspch" :html "cpspch.html")) csdoc-opcode-database)
(puthash "cpsoct" (quote (:function "cpsoct" :html "cpsoct.html")) csdoc-opcode-database)
(puthash "cpsmidinn" (quote (:function "cpsmidinn" :html "cpsmidinn.html")) csdoc-opcode-database)
(puthash "cpsmidib" (quote (:opcode "cpsmidib" :spec "x cpsmidib i" :out "x" :in "i" :template "icps cpsmidib [irange]
 kcps cpsmidib [irange]" :doc "Get the note number of the current MIDI event and modify it by the current pitch-bend value, express it in cycles-per-second" :html "cpsmidib.html")) csdoc-opcode-database)
(puthash "cpsmidi" (quote (:opcode "cpsmidi" :spec "i cpsmidi " :out "i" :in nil :template "icps cpsmidi" :doc "Get the note number of the current MIDI event, expressed in cycles-per-second" :html "cpsmidi.html")) csdoc-opcode-database)
(puthash "cps2pch" (quote (:opcode "cps2pch" :spec "i cps2pch ii" :out "i" :in "ii" :template "icps cps2pch ipch, iequal" :doc "Converts a pitch-class value into cycles-per-second (Hz) for equal divisions of the octave" :html "cps2pch.html")) csdoc-opcode-database)
(puthash "cosinv" (quote (:function "cosinv" :html "cosinv.html")) csdoc-opcode-database)
(puthash "cosh" (quote (:function "cosh" :html "cosh.html")) csdoc-opcode-database)
(puthash "cos" (quote (:function "cos" :html "cos.html")) csdoc-opcode-database)
(puthash "convolve" (quote (:opcode "convolve" :spec "aaaa convolve aii" :out "aaaa" :in "aii" :template "ar1 [, ar2] [, ar3] [, ar4] convolve ain, ifilcod [, ichannel]" :doc "Output is the convolution of signal ain and the impulse response contained in ifilcod" :html "convolve.html")) csdoc-opcode-database)
(puthash "control" (quote (:opcode "control" :spec "k control k" :out "k" :in "k" :template "kres control knum" :doc "Configurable slider controls for realtime user input" :html "control.html")) csdoc-opcode-database)
(puthash "connect" (quote (:opcode "connect" :spec " connect TSTS" :out nil :in "TSTS" :template "connect Tsource1, Soutlet1, Tsink1, Sinlet1" :doc "The connect opcode, valid only in orchestra headers, sends the signals from the indicated outlet in all instances of the indicated source instrument to the indicated inlet in all instances of the indicated sink instrument" :html "connect.html")) csdoc-opcode-database)
(puthash "compress" (quote (:opcode "compress" :spec "a compress aakkkkkki" :out "a" :in "aakkkkkki" :template "ar compress aasig, acsig, kthresh, kloknee, khiknee, kratio, katt, krel, ilook" :doc "This unit functions as an audio compressor, limiter, expander, or noise gate, using either soft-knee or hard-knee mapping, and with dynamically variable performance characteristics" :html "compress.html")) csdoc-opcode-database)
(puthash "comb" (quote (:opcode "comb" :spec "a comb akiii" :out "a" :in "akiii" :template "ares comb asig, krvt, ilpt [, iskip] [, insmps]" :doc "Reverberates an input signal with a “colored” frequency response" :html "comb.html")) csdoc-opcode-database)
(puthash "cngoto" (quote (:opcode "cngoto" :spec " cngoto Xl" :out nil :in "Xl" :template "cngoto condition, label" :doc "Transfers control on every pass when the condition is not true" :html "cngoto.html")) csdoc-opcode-database)
(puthash "clockon" (quote (:opcode "clockon" :spec " clockon i" :out nil :in "i" :template "clockon inum" :doc "Starts one of a number of internal clocks" :html "clockon.html")) csdoc-opcode-database)
(puthash "clockoff" (quote (:opcode "clockoff" :spec " clockoff i" :out nil :in "i" :template "clockoff inum" :doc "Stops one of a number of internal clocks" :html "clockoff.html")) csdoc-opcode-database)
(puthash "clip" (quote (:opcode "clip" :spec "a clip aiii" :out "a" :in "aiii" :template "ares clip asig, imeth, ilimit [, iarg]" :doc "Clips an a-rate signal to a predefined limit, in a “soft” manner, using one of three methods" :html "clip.html")) csdoc-opcode-database)
(puthash "clfilt" (quote (:opcode "clfilt" :spec "a clfilt akiiiiii" :out "a" :in "akiiiiii" :template "ares clfilt asig, kfreq, itype, inpol [, ikind] [, ipbr] [, isba] [, iskip]" :doc "Implements the classical standard analog filter types: low-pass and high-pass" :html "clfilt.html")) csdoc-opcode-database)
(puthash "clear" (quote (:opcode "clear" :spec " clear aaa" :out nil :in "aaa" :template "clear avar1 [, avar2] [, avar3] [...]" :doc "clear zeroes a list of audio signals" :html "clear.html")) csdoc-opcode-database)
(puthash "ckgoto" (quote (:opcode "ckgoto" :spec " ckgoto Xl" :out nil :in "Xl" :template "ckgoto condition, label" :doc "During the p-time passes only, conditionally transfer control to the statement labeled by label" :html "ckgoto.html")) csdoc-opcode-database)
(puthash "cigoto" (quote (:opcode "cigoto" :spec " cigoto Xl" :out nil :in "Xl" :template "cigoto condition, label" :doc "During the i-time pass only, conditionally transfer control to the statement labeled by label" :html "cigoto.html")) csdoc-opcode-database)
(puthash "chuap" (quote (:opcode "chuap" :spec "aaa chuap kkkkkkkkiiik" :out "aaa" :in "kkkkkkkkiiik" :template "aI3, aV2, aV1 chuap kL, kR0, kC1, kG, kGa, kGb, kE, kC2, iI3, iV2, iV1, ktime_step" :doc "Simulates Chuas oscillator, an LRC oscillator with an active resistor, proved capable of bifurcation and chaotic attractors, with k-rate control of circuit elements" :html "chuap.html")) csdoc-opcode-database)
(puthash "chnset" (quote (:opcode "chnset" :spec " chnset xS" :out nil :in "xS" :template "chnset ival, Sname
 chnset kval, Sname
 chnset aval, Sname
 chnset Sval, Sname" :doc "Write to a channel of the named software bus" :html "chnset.html")) csdoc-opcode-database)
(puthash "chnparams" (quote (:opcode "chnparams" :spec "iiiiii chnparams " :out "iiiiii" :in nil :template "itype, imode, ictltype, idflt, imin, imax chnparams" :doc "Query parameters of a channel (if it does not exist, all returned values are zero)" :html "chnparams.html")) csdoc-opcode-database)
(puthash "chnmix" (quote (:opcode "chnmix" :spec " chnmix aS" :out nil :in "aS" :template "chnmix aval, Sname" :doc "Adds an audio signal to a channel of the named software bus" :html "chnmix.html")) csdoc-opcode-database)
(puthash "chnget" (quote (:opcode "chnget" :spec "x chnget S" :out "x" :in "S" :template "ival chnget Sname
 kval chnget Sname
 aval chnget Sname
 Sval chnget Sname" :doc "Reads data from a channel of the inward named software bus" :html "chnget.html")) csdoc-opcode-database)
(puthash "chnexport" (quote (:opcode "chnexport" :spec "x chnexport Siiiii" :out "x" :in "Siiiii" :template "gival chnexport Sname, imode[, itype, idflt, imin, imax]
 gkval chnexport Sname, imode[, itype, idflt, imin, imax]
 gaval chnexport Sname, imode
 gSval chnexport Sname, imode" :doc "Export a global variable as a channel of the bus; the channel should not already exist, otherwise an init error occurs" :html "chnexport.html")) csdoc-opcode-database)
(puthash "chnclear" (quote (:opcode "chnclear" :spec " chnclear S" :out nil :in "S" :template "chnclear Sname" :doc "Clears an audio channel of the named software bus to zero" :html "chnclear.html")) csdoc-opcode-database)
(puthash "chn" (quote (:opcode "chn" :spec "XSiiiii" :out "XSiiiii" :in "XSiiiii" :template "chn_k Sname, imode[, itype, idflt, imin, imax]
 chn_a Sname, imode
 chn_S Sname, imode" :doc "Declare a channel of the named software bus, with setting optional parameters in the case of a control channel" :html "chn.html")) csdoc-opcode-database)
(puthash "checkbox" (quote (:opcode "checkbox" :spec "k checkbox k" :out "k" :in "k" :template "kres checkbox knum" :doc "Sense on-screen controls" :html "checkbox.html")) csdoc-opcode-database)
(puthash "chebyshevpoly" (quote (:opcode "chebyshevpoly" :spec "a chebyshevpoly akkk" :out "a" :in "akkk" :template "aout chebyshevpoly ain, k0 [, k1 [, k2 [...]]]" :doc "The chebyshevpoly opcode calculates the value of a polynomial expression with a single a-rate input variable that is made up of a linear combination of the first N Chebyshev polynomials of the first kind" :html "chebyshevpoly.html")) csdoc-opcode-database)
(puthash "chano" (quote (:opcode "chano" :spec " chano xk" :out nil :in "xk" :template "chano kval, kchan
 chano aval, kchan" :doc "Send data to a channel of the outward software bus" :html "chano.html")) csdoc-opcode-database)
(puthash "chani" (quote (:opcode "chani" :spec "x chani k" :out "x" :in "k" :template "kval chani kchan
 aval chani kchan" :doc "Reads data from a channel of the inward software bus" :html "chani.html")) csdoc-opcode-database)
(puthash "changed" (quote (:opcode "changed" :spec "k changed kkk" :out "k" :in "kkk" :template "ktrig changed kvar1 [, kvar2,..., kvarN]" :doc "This opcode outputs a trigger signal that informs when any one of its k-rate arguments has changed" :html "changed.html")) csdoc-opcode-database)
(puthash "chanctrl" (quote (:opcode "chanctrl" :spec "x chanctrl iiii" :out "x" :in "iiii" :template "ival chanctrl ichnl, ictlno [, ilow] [, ihigh]
 kval chanctrl ichnl, ictlno [, ilow] [, ihigh]" :doc "Get the current value of a controller and optionally map it onto specified range" :html "chanctrl.html")) csdoc-opcode-database)
(puthash "cggoto" (quote (:opcode "cggoto" :spec " cggoto Xl" :out nil :in "Xl" :template "cggoto condition, label" :doc "Transfer control to label on every pass" :html "cggoto.html")) csdoc-opcode-database)
(puthash "cent" (quote (:function "cent" :html "cent.html")) csdoc-opcode-database)
(puthash "ceil" (quote (:function "ceil" :html "ceil.html")) csdoc-opcode-database)
(puthash "cauchy" (quote (:opcode "cauchy" :spec "x cauchy k" :out "x" :in "k" :template "ares cauchy kalpha
 ires cauchy kalpha
 kres cauchy kalpha" :doc "Cauchy distribution random number generator" :html "cauchy.html")) csdoc-opcode-database)
(puthash "cabasa" (quote (:opcode "cabasa" :spec "a cabasa iiiii" :out "a" :in "iiiii" :template "ares cabasa iamp, idettack [, inum] [, idamp] [, imaxshake]" :doc "cabasa is a semi-physical model of a cabasa sound" :html "cabasa.html")) csdoc-opcode-database)
(puthash "buzz" (quote (:opcode "buzz" :spec "a buzz xxkii" :out "a" :in "xxkii" :template "ares buzz xamp, xcps, knh, ifn [, iphs]" :doc "Output is a set of harmonically related sine partials" :html "buzz.html")) csdoc-opcode-database)
(puthash "button" (quote (:opcode "button" :spec "k button k" :out "k" :in "k" :template "kres button knum" :doc "Sense on-screen controls" :html "button.html")) csdoc-opcode-database)
(puthash "butterlp" (quote (:opcode "butterlp" :spec "a butterlp aki" :out "a" :in "aki" :template "ares butterlp asig, kfreq [, iskip]" :doc "Implementation of a second-order low-pass Butterworth filter" :html "butterlp.html")) csdoc-opcode-database)
(puthash "butterhp" (quote (:opcode "butterhp" :spec "a butterhp aki" :out "a" :in "aki" :template "ares butterhp asig, kfreq [, iskip]" :doc "Implementation of second-order high-pass Butterworth filter" :html "butterhp.html")) csdoc-opcode-database)
(puthash "butterbr" (quote (:opcode "butterbr" :spec "a butterbr akki" :out "a" :in "akki" :template "ares butterbr asig, kfreq, kband [, iskip]" :doc "Implementation of a second-order band-reject Butterworth filter" :html "butterbr.html")) csdoc-opcode-database)
(puthash "butterbp" (quote (:opcode "butterbp" :spec "a butterbp akki" :out "a" :in "akki" :template "ares butterbp asig, kfreq, kband [, iskip]" :doc "Implementation of a second-order band-pass Butterworth filter" :html "butterbp.html")) csdoc-opcode-database)
(puthash "butlp" (quote (:opcode "butlp" :spec "a butlp aki" :out "a" :in "aki" :template "ares butlp asig, kfreq [, iskip]" :doc "Same as the butterlp opcode" :html "butlp.html")) csdoc-opcode-database)
(puthash "buthp" (quote (:opcode "buthp" :spec "a buthp aki" :out "a" :in "aki" :template "ares buthp asig, kfreq [, iskip]" :doc "Same as the butterhp opcode" :html "buthp.html")) csdoc-opcode-database)
(puthash "butbr" (quote (:opcode "butbr" :spec "a butbr akki" :out "a" :in "akki" :template "ares butbr asig, kfreq, kband [, iskip]" :doc "Same as the butterbr opcode" :html "butbr.html")) csdoc-opcode-database)
(puthash "butbp" (quote (:opcode "butbp" :spec "a butbp akki" :out "a" :in "akki" :template "ares butbp asig, kfreq, kband [, iskip]" :doc "Same as the butterbp opcode" :html "butbp.html")) csdoc-opcode-database)
(puthash "bqrez" (quote (:opcode "bqrez" :spec "a bqrez axxii" :out "a" :in "axxii" :template "ares bqrez asig, xfco, xres [, imode] [, iskip]" :doc "A second-order multi-mode filter" :html "bqrez.html")) csdoc-opcode-database)
(puthash "birnd" (quote (:function "birnd" :html "birnd.html")) csdoc-opcode-database)
(puthash "biquada" (quote (:opcode "biquada" :spec "a biquada aaaaaaai" :out "a" :in "aaaaaaai" :template "ares biquada asig, ab0, ab1, ab2, aa0, aa1, aa2 [, iskip]" :doc "A sweepable general purpose biquadratic digital filter" :html "biquada.html")) csdoc-opcode-database)
(puthash "biquad" (quote (:opcode "biquad" :spec "a biquad akkkkkki" :out "a" :in "akkkkkki" :template "ares biquad asig, kb0, kb1, kb2, ka0, ka1, ka2 [, iskip]" :doc "A sweepable general purpose biquadratic digital filter" :html "biquad.html")) csdoc-opcode-database)
(puthash "binit" (quote (:opcode "binit" :spec "f binit fi" :out "f" :in "fi" :template "fsig binit fin, isize" :doc "The binit opcode takes an input containg a TRACKS pv streaming signal (as generated, for instance by partials) and converts it into a equal-bandwidth bin-frame containing amplitude and frequency pairs (PVS_AMP_FREQ), suitable for overlap-add resynthesis (such as performed by pvsynth) or further PVS streaming phase vocoder signal transformations" :html "binit.html")) csdoc-opcode-database)
(puthash "bformdec1" (quote (:opcode "bformdec1" :spec "aa bformdec1 iaaaaaaaaaaaaaaaa" :out "aa" :in "iaaaaaaaaaaaaaaaa" :template "ao1, ao2 bformdec1 isetup, aw, ax, ay, az [, ar, as, at, au, av [, abk, al, am, an, ao, ap, aq]]
 ao1, ao2, ao3, ao4 bformdec1 isetup, aw, ax, ay, az [, ar, as, at, au, av [, abk, al, am, an, ao, ap, aq]]
 ao1, ao2, ao3, ao4, ao5 bformdec1 isetup, aw, ax, ay, az [, ar, as, at, au, av [, abk, al, am, an, ao, ap, aq]]
 ao1, ao2, ao3, ao4, ao5, ao6, ao7, ao8 bformdec1 isetup, aw, ax, ay, az [, ar, as, at, au, av [, abk, al, am, an, ao, ap, aq]]]" :doc "Decodes an ambisonic B format signal into loudspeaker specific signals" :html "bformdec1.html")) csdoc-opcode-database)
(puthash "bformdec" (quote (:opcode "bformdec" :spec "aa bformdec iaaaaaaaaaaaaaaaa" :out "aa" :in "iaaaaaaaaaaaaaaaa" :template "ao1, ao2 bformdec isetup, aw, ax, ay, az [, ar, as, at, au, av [, abk, al, am, an, ao, ap, aq]]
 ao1, ao2, ao3, ao4 bformdec isetup, aw, ax, ay, az [, ar, as, at, au, av [, abk, al, am, an, ao, ap, aq]]
 ao1, ao2, ao3, ao4, ao5 bformdec isetup, aw, ax, ay, az [, ar, as, at, au, av [, abk, al, am, an, ao, ap, aq]]
 ao1, ao2, ao3, ao4, ao5, ao6, ao7, ao8 bformdec isetup, aw, ax, ay, az [, ar, as, at, au, av [, abk, al, am, an, ao, ap, aq]]]" :doc "Decodes an ambisonic B format signal into loudspeaker specific signals" :html "bformdec.html")) csdoc-opcode-database)
(puthash "bformenc1" (quote (:opcode "bformenc1" :spec "aaaa bformenc1 akk" :out "aaaa" :in "akk" :template "aw, ax, ay, az bformenc1 asig, kalpha, kbeta
 aw, ax, ay, az, ar, as, at, au, av bformenc1 asig, kalpha, kbeta
 aw, ax, ay, az, ar, as, at, au, av, ak, al, am, an, ao, ap, aq bformenc1 asig, kalpha, kbeta" :doc "Codes a signal into the ambisonic B format" :html "bformenc1.html")) csdoc-opcode-database)
(puthash "bformenc" (quote (:opcode "bformenc" :spec "aaaa bformenc akkkk" :out "aaaa" :in "akkkk" :template "aw, ax, ay, az bformenc asig, kalpha, kbeta, kord0, kord1
 aw, ax, ay, az, ar, as, at, au, av bformenc asig, kalpha, kbeta, kord0, kord1 , kord2
 aw, ax, ay, az, ar, as, at, au, av, ak, al, am, an, ao, ap, aq bformenc asig, kalpha, kbeta, kord0, kord1, kord2, kord3" :doc "Codes a signal into the ambisonic B format" :html "bformenc.html")) csdoc-opcode-database)
(puthash "bexprnd" (quote (:opcode "bexprnd" :spec "x bexprnd k" :out "x" :in "k" :template "ares bexprnd krange
 ires bexprnd krange
 kres bexprnd krange" :doc "Exponential distribution random number generator" :html "bexprnd.html")) csdoc-opcode-database)
(puthash "betarand" (quote (:opcode "betarand" :spec "x betarand kkk" :out "x" :in "kkk" :template "ares betarand krange, kalpha, kbeta
 ires betarand krange, kalpha, kbeta
 kres betarand krange, kalpha, kbeta" :doc "Beta distribution random number generator (positive values only)" :html "betarand.html")) csdoc-opcode-database)
(puthash "bbcuts" (quote (:opcode "bbcuts" :spec "aa bbcuts aaiiiiiiii" :out "aa" :in "aaiiiiiiii" :template "a1,a2 bbcuts asource1, asource2, ibps, isubdiv, ibarlength, iphrasebars, inumrepeats [, istutterspeed] [, istutterchance] [, ienvchoice]" :doc "The BreakBeat Cutter automatically generates cut-ups of a source audio stream in the style of drum and bass/jungle breakbeat manipulations" :html "bbcuts.html")) csdoc-opcode-database)
(puthash "bbcutm" (quote (:opcode "bbcutm" :spec "a bbcutm aiiiiiiii" :out "a" :in "aiiiiiiii" :template "a1 bbcutm asource, ibps, isubdiv, ibarlength, iphrasebars, inumrepeats [, istutterspeed] [, istutterchance] [, ienvchoice ]" :doc "The BreakBeat Cutter automatically generates cut-ups of a source audio stream in the style of drum and bass/jungle breakbeat manipulations" :html "bbcutm.html")) csdoc-opcode-database)
(puthash "barmodel" (quote (:opcode "barmodel" :spec "a barmodel kkiikiiii" :out "a" :in "kkiikiiii" :template "ares barmodel kbcL, kbcR, iK, ib, kscan, iT30, ipos, ivel, iwid" :doc "Audio output is a tone similar to a struck metal bar, using a physical model developed from solving the partial differential equation" :html "barmodel.html")) csdoc-opcode-database)
(puthash "bamboo" (quote (:opcode "bamboo" :spec "a bamboo kiiiiiii" :out "a" :in "kiiiiiii" :template "ares bamboo kamp, idettack [, inum] [, idamp] [, imaxshake] [, ifreq] [, ifreq1] [, ifreq2]" :doc "bamboo is a semi-physical model of a bamboo sound" :html "bamboo.html")) csdoc-opcode-database)
(puthash "balance" (quote (:opcode "balance" :spec "a balance aaii" :out "a" :in "aaii" :template "ares balance asig, acomp [, ihp] [, iskip]" :doc "The rms power of asig can be interrogated, set, or adjusted to match that of a comparator signal" :html "balance.html")) csdoc-opcode-database)
(puthash "babo" (quote (:opcode "babo" :spec "aa babo akkkiiiii" :out "aa" :in "akkkiiiii" :template "a1, a2 babo asig, ksrcx, ksrcy, ksrcz, irx, iry, irz [, idiff] [, ifno]" :doc "babo stands for ball-within-the-box" :html "babo.html")) csdoc-opcode-database)
(puthash "ATSsinnoi" (quote (:opcode "ATSsinnoi" :spec "a ATSsinnoi kkkkiiii" :out "a" :in "kkkkiiii" :template "ar ATSsinnoi ktimepnt, ksinlev, knzlev, kfmod, iatsfile, ipartials [, ipartialoffset, ipartialincr]" :doc "ATSsinnoi reads data from an ATS data file and uses the information to synthesize sines and noise together" :html "ATSsinnoi.html")) csdoc-opcode-database)
(puthash "ATSpartialtap" (quote (:opcode "ATSpartialtap" :spec "kk ATSpartialtap i" :out "kk" :in "i" :template "kfrq, kamp ATSpartialtap ipartialnum" :doc "ATSpartialtap takes a partial number and returns a frequency, amplitude pair" :html "ATSpartialtap.html")) csdoc-opcode-database)
(puthash "ATSreadnz" (quote (:opcode "ATSreadnz" :spec "k ATSreadnz kii" :out "k" :in "kii" :template "kenergy ATSreadnz ktimepnt, iatsfile, iband" :doc "ATSreadnz returns the energy (kenergy) of a user specified noise band (1-25 bands) at the time indicated by the time pointer ktimepnt" :html "ATSreadnz.html")) csdoc-opcode-database)
(puthash "ATSread" (quote (:opcode "ATSread" :spec "kk ATSread kii" :out "kk" :in "kii" :template "kfreq, kamp ATSread ktimepnt, iatsfile, ipartial" :doc "ATSread returns the amplitude (kamp) and frequency (kfreq) information of a user specified partial contained in the ATS analysis file at the time indicated by the time pointer ktimepnt" :html "ATSread.html")) csdoc-opcode-database)
(puthash "ATSinterpread" (quote (:opcode "ATSinterpread" :spec "k ATSinterpread k" :out "k" :in "k" :template "kamp ATSinterpread kfreq" :doc "ATSinterpread allows a user to determine the frequency envelope of any ATSbufread" :html "ATSinterpread.html")) csdoc-opcode-database)
(puthash "ATSinfo" (quote (:opcode "ATSinfo" :spec "i ATSinfo ii" :out "i" :in "ii" :template "idata ATSinfo iatsfile, ilocation" :doc "atsinfo reads data out of the header of an ATS file" :html "ATSinfo.html")) csdoc-opcode-database)
(puthash "ATScross" (quote (:opcode "ATScross" :spec "a ATScross kkiikkiii" :out "a" :in "kkiikkiii" :template "ar ATScross ktimepnt, kfmod, iatsfile, ifn, kmylev, kbuflev, ipartials [, ipartialoffset, ipartialincr]" :doc "ATScross uses data from an ATS analysis file and data from an ATSbufread to perform cross synthesis" :html "ATScross.html")) csdoc-opcode-database)
(puthash "ATSbufread" (quote (:opcode "ATSbufread" :spec " ATSbufread kkiiii" :out nil :in "kkiiii" :template "ATSbufread ktimepnt, kfmod, iatsfile, ipartials[, ipartialoffset, ipartialincr]" :doc "ATSbufread reads data from and ATS data file and stores it in an internal data table of frequency, amplitude pairs" :html "ATSbufread.html")) csdoc-opcode-database)
(puthash "ATSaddnz" (quote (:opcode "ATSaddnz" :spec "a ATSaddnz kiiii" :out "a" :in "kiiii" :template "ar ATSaddnz ktimepnt, iatsfile, ibands[, ibandoffset, ibandincr]" :doc "ATSaddnz reads from an ATS analysis file and uses the data to perform additive synthesis using a modified randi function" :html "ATSaddnz.html")) csdoc-opcode-database)
(puthash "ATSadd" (quote (:opcode "ATSadd" :spec "a ATSadd kkiiiiii" :out "a" :in "kkiiiiii" :template "ar ATSadd ktimepnt, kfmod, iatsfile, ifn, ipartials[, ipartialoffset, ipartialincr, igatefn]" :doc "ATSadd reads from an ATS analysis file and uses the data to perform additive synthesis using an internal array of interpolating oscillators" :html "ATSadd.html")) csdoc-opcode-database)
(puthash "atonex" (quote (:opcode "atonex" :spec "a atonex akii" :out "a" :in "akii" :template "ares atonex asig, khp [, inumlayer] [, iskip]" :doc "atonex is equivalent to a filter consisting of more layers of atone with the same arguments, serially connected" :html "atonex.html")) csdoc-opcode-database)
(puthash "atonek" (quote (:opcode "atonek" :spec "k atonek kki" :out "k" :in "kki" :template "kres atonek ksig, khp [, iskip]" :doc "A hi-pass filter whose transfer functions are the complements of the tonek opcode" :html "atonek.html")) csdoc-opcode-database)
(puthash "atone" (quote (:opcode "atone" :spec "a atone aki" :out "a" :in "aki" :template "ares atone asig, khp [, iskip]" :doc "A hi-pass filter whose transfer functions are the complements of the tone opcode" :html "atone.html")) csdoc-opcode-database)
(puthash "aresonk" (quote (:opcode "aresonk" :spec "k aresonk kkkii" :out "k" :in "kkkii" :template "kres aresonk ksig, kcf, kbw [, iscl] [, iskip]" :doc "A notch filter whose transfer functions are the complements of the reson opcode" :html "aresonk.html")) csdoc-opcode-database)
(puthash "areson" (quote (:opcode "areson" :spec "a areson akkii" :out "a" :in "akkii" :template "ares areson asig, kcf, kbw [, iscl] [, iskip]" :doc "A notch filter whose transfer functions are the complements of the reson opcode" :html "areson.html")) csdoc-opcode-database)
(puthash "ampmidi" (quote (:opcode "ampmidi" :spec "i ampmidi ii" :out "i" :in "ii" :template "iamp ampmidi iscal [, ifn]" :doc "Get the velocity of the current MIDI event" :html "ampmidi.html")) csdoc-opcode-database)
(puthash "ampdbfs" (quote (:function "ampdbfs" :html "ampdbfs.html")) csdoc-opcode-database)
(puthash "ampdb" (quote (:function "ampdb" :html "ampdb.html")) csdoc-opcode-database)
(puthash "alpass" (quote (:opcode "alpass" :spec "a alpass akiii" :out "a" :in "akiii" :template "ares alpass asig, krvt, ilpt [, iskip] [, insmps]" :doc "Reverberates an input signal with a flat frequency response" :html "alpass.html")) csdoc-opcode-database)
(puthash "aftouch" (quote (:opcode "aftouch" :spec "k aftouch ii" :out "k" :in "ii" :template "kaft aftouch [imin] [, imax]" :doc "Get the current after-touch value for this channel" :html "aftouch.html")) csdoc-opcode-database)
(puthash "adsynt2" (quote (:opcode "adsynt2" :spec "a adsynt2 kkiiiii" :out "a" :in "kkiiiii" :template "ar adsynt2 kamp, kcps, iwfn, ifreqfn, iampfn, icnt [, iphs]" :doc "Performs additive synthesis with an arbitrary number of partials, not necessarily harmonic" :html "adsynt2.html")) csdoc-opcode-database)
(puthash "adsynt" (quote (:opcode "adsynt" :spec "a adsynt kkiiiii" :out "a" :in "kkiiiii" :template "ares adsynt kamp, kcps, iwfn, ifreqfn, iampfn, icnt [, iphs]" :doc "Performs additive synthesis with an arbitrary number of partials, not necessarily harmonic" :html "adsynt.html")) csdoc-opcode-database)
(puthash "adsyn" (quote (:opcode "adsyn" :spec "a adsyn kkki" :out "a" :in "kkki" :template "ares adsyn kamod, kfmod, ksmod, ifilcod" :doc "Output is an additive set of individually controlled sinusoids, using an oscillator bank" :html "adsyn.html")) csdoc-opcode-database)
(puthash "adsr" (quote (:opcode "adsr" :spec "x adsr iiiii" :out "x" :in "iiiii" :template "ares adsr iatt, idec, islev, irel [, idel]
 kres adsr iatt, idec, islev, irel [, idel]" :doc "Calculates the classical ADSR envelope using linear segments" :html "adsr.html")) csdoc-opcode-database)
(puthash "active" (quote (:opcode "active" :spec "x active x" :out "x" :in "x" :template "ir active insnum
 kres active kinsnum" :doc "Returns the number of active instances of an instrument" :html "active.html")) csdoc-opcode-database)
(puthash "abs" (quote (:function "abs" :html "abs.html")) csdoc-opcode-database)
(puthash "a" (quote (:function "a" :html "opa.html")) csdoc-opcode-database)
(puthash "~" (quote (:function "~" :html "opbitnot.html")) csdoc-opcode-database)
(puthash "|" (quote (:function "|" :html "opbitor.html")) csdoc-opcode-database)
(puthash "&" (quote (:function "&" :html "opbitand.html")) csdoc-opcode-database)
(puthash "||" (quote (:function "||" :html "opor.html")) csdoc-opcode-database)
(puthash "^" (quote (:function "^" :html "raises.html")) csdoc-opcode-database)
(puthash "==" (quote (:function "==" :html "equals.html")) csdoc-opcode-database)
(puthash "=" (quote (:opcode "=" :spec "x = x" :out "x" :in "x" :template "ares = xarg
 ires = iarg
 kres = karg" :doc "Performs a simple assignment" :html "assign.html")) csdoc-opcode-database)
(puthash "/" (quote (:function "/" :html "divides.html")) csdoc-opcode-database)
(puthash "+" (quote (:function "+" :html "adds.html")) csdoc-opcode-database)
(puthash "*" (quote (:function "*" :html "multiplies.html")) csdoc-opcode-database)
(puthash "%" (quote (:function "%" :html "modulus.html")) csdoc-opcode-database)
(puthash "!=" (quote (:function "!=" :html "notequal.html")) csdoc-opcode-database)
(provide (quote csound-opcodes))